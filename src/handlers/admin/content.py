# src/handlers/admin/content.py

from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
import os

from config.settings import settings
from core.utils.logger import log_error, logger
from database.models import News, Broadcast, User
from keyboards.admin.admin import (
    get_admin_keyboard,
    get_news_management_keyboard,
    get_content_management_keyboard,
    get_broadcast_management_keyboard,
    get_admin_inline_keyboard
)
from core.utils.image_handler import delete_photo, save_photo_to_disk
from states.admin import NewsStates

router = Router(name='admin_content')

CONTENT_PREFIXES = [
    "content_add_news_",
    "content_delete_news_",
    "content_news_",
    "content_manage_news",
    "content_manage_broadcasts",
    "content_back_to_content",
    "manage_content",
    "edit_news_start_",
    "edit_news_text_",
    "edit_news_photo_",
    "edit_news_title_"
]

def is_content_callback(callback: CallbackQuery) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ callback –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    """
    return any(callback.data.startswith(prefix) for prefix in CONTENT_PREFIXES)

def admin_filter(message: Message | CallbackQuery) -> bool:
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    user_id = message.from_user.id if isinstance(message, Message) else message.message.from_user.id
    return user_id in settings.admin_ids

@router.callback_query(F.data == "manage_content", admin_filter, is_content_callback)
async def manage_content(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    """
    try:
        logger.info("=== –ù–ê–ß–ê–õ–û manage_content ===")
        logger.info(f"Callback data: {callback.data}")
        logger.info(f"User ID: {callback.from_user.id}")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–∞—Ö
        news_count = await session.scalar(select(News).count())
        broadcasts_count = await session.scalar(select(Broadcast).count())
        
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –Ω–æ–≤–æ—Å—Ç–∏={news_count}, —Ä–∞—Å—Å—ã–ª–∫–∏={broadcasts_count}")

        text = (
            "<b>üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</b>\n\n"
            f"<b>üì∞ –ù–æ–≤–æ—Å—Ç–µ–π:</b> {news_count}\n"
            f"<b>üì® –†–∞—Å—Å—ã–ª–æ–∫:</b> {broadcasts_count}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        )
        
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π")
        await callback.message.edit_text(
            text,
            reply_markup=get_content_management_keyboard(),
            parse_mode="HTML"
        )
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ manage_content: {e}", exc_info=True)
        log_error(e)
        await callback.message.edit_text(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</b>",
            reply_markup=get_admin_inline_keyboard(),
            parse_mode="HTML"
        )
    finally:
        logger.info("=== –ö–û–ù–ï–¶ manage_content ===")

@router.callback_query(F.data == "content_add_news_", is_content_callback)
async def start_add_news(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
    """
    try:
        logger.info(f"DEBUG: –í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ start_add_news —Å callback_data={callback.data}")
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏")
        await callback.answer()
        
        await state.set_state(NewsStates.entering_title)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start_add_news: {e}")
        log_error(e)
        await callback.message.edit_text(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏</b>",
            reply_markup=get_news_management_keyboard([]),
            parse_mode="HTML"
        )


@router.message(NewsStates.entering_title, admin_filter)
async def process_news_title(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏
    """
    await state.update_data(title=message.text)
    await state.set_state(NewsStates.entering_content)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:")


@router.message(NewsStates.entering_content, admin_filter)
async def process_news_content(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    """
    await state.update_data(content=message.text)
    await state.set_state(NewsStates.uploading_photo)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    )


@router.message(NewsStates.uploading_photo, F.photo, admin_filter)
async def process_news_photo(message: Message, state: FSMContext, session: AsyncSession, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_result = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=get_admin_keyboard()
            )
            return

        photo = message.photo[-1]
        data = await state.get_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏ –ø–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∏ file_id
        image_path, file_id = await save_photo_to_disk(photo, bot, "news")
        
        news_item = News(
            title=data["title"],
            content=data["content"],
            image_url=image_path,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            created_by=user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        )
        session.add(news_item)
        await session.commit()

        await state.clear()
        await message.answer(
            "‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!",
            reply_markup=get_admin_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if 'image_path' in locals():
            await delete_photo(image_path)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_admin_keyboard()
        )


@router.message(NewsStates.uploading_photo, Command("skip"), admin_filter)
async def skip_news_photo(
    message: Message,
    state: FSMContext,
    session: AsyncSession
) -> None:
    """
    –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_result = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=get_admin_keyboard()
            )
            return

        data = await state.get_data()
        
        news_item = News(
            title=data["title"],
            content=data["content"],
            created_by=user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        )
        session.add(news_item)
        await session.commit()

        await state.clear()
        await message.answer(
            "‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_admin_keyboard()
        )


@router.callback_query(F.data.startswith("content_delete_news_"), is_content_callback)
async def delete_news_item(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
    """
    try:
        news_id = int(callback.data.split("_")[3])
        logger.info(f"Attempting to delete news #{news_id}")
        
        news_item = await session.get(News, news_id)
        
        if not news_item:
            await callback.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ —Å –¥–∏—Å–∫–∞
        if news_item.image_url:
            try:
                await delete_photo(news_item.image_url)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")

        # –£–¥–∞–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await session.delete(news_item)
        await session.commit()
        logger.info(f"News #{news_id} successfully deleted")
        
        await callback.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
        news_items = await session.execute(
            select(News).order_by(News.created_at.desc())
        )
        news_items = news_items.scalars().all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            "<b>üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ—Å—Ç—è–º–∏:\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ\n" 
            "‚Ä¢ –£–¥–∞–ª—è—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ\n\n"
            f"<b>üìä –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π:</b> {len(news_items)}\n"
            "<code>‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ</code>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        try:
            await callback.message.delete()
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        await callback.message.answer(
            message_text,
            reply_markup=get_news_management_keyboard(news_items),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        log_error(e)
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏",
            show_alert=True
        )

@router.callback_query(F.data == "content_manage_news", is_content_callback)
async def manage_news(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏ —á–µ—Ä–µ–∑ callback
    """
    try:
        logger.info("=== –ù–ê–ß–ê–õ–û manage_news ===")
        logger.info(f"Callback data: {callback.data}")
        logger.info(f"User ID: {callback.from_user.id}")
        await callback.answer()
        
        news_items = await session.execute(
            select(News).order_by(News.created_at.desc())
        )
        news_items = news_items.scalars().all()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.message.answer(
            "<b>üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ—Å—Ç—è–º–∏:\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n" 
            "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ\n"
            "‚Ä¢ –£–¥–∞–ª—è—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ\n\n"
            f"üìä –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(news_items)}\n"
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_news_management_keyboard(news_items),
            parse_mode="HTML"
        )
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        logger.info("=== –ö–û–ù–ï–¶ manage_news ===")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ manage_news: {e}")
        log_error(e)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏",
            reply_markup=get_content_management_keyboard()
        )

@router.callback_query(F.data == "content_manage_broadcasts", is_content_callback)
async def manage_broadcasts(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ —á–µ—Ä–µ–∑ callback
    """
    try:
        logger.info("=== –ù–ê–ß–ê–õ–û manage_broadcasts ===")
        logger.info(f"Callback data: {callback.data}")
        logger.info(f"User ID: {callback.from_user.id}")
        await callback.answer()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ –º–æ–¥–µ–ª–∏ Broadcast
        result = await session.execute(
            select(Broadcast).order_by(Broadcast.created_at.desc())
        )
        broadcasts = result.scalars().all()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
        await callback.message.answer(
            "<b>üì® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_broadcast_management_keyboard(broadcasts),
            parse_mode="HTML"
        )
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        
        logger.info("=== –ö–û–ù–ï–¶ manage_broadcasts ===")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ manage_broadcasts: {e}")
        log_error(e)
        await callback.message.answer(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>",
            reply_markup=get_content_management_keyboard(),
            parse_mode="HTML"
        )

@router.callback_query(F.data == "content_back_to_content", is_content_callback)
async def back_to_content(callback: CallbackQuery) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    """
    try:
        logger.info(f"DEBUG: –í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ back_to_content —Å callback_data={callback.data}")
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º")
        await callback.answer()
        
        await callback.message.edit_text(
            "<b>üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_content_management_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ back_to_content: {e}")
        log_error(e)
        await callback.message.edit_text(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</b>",
            reply_markup=get_admin_inline_keyboard(),
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("content_news_"), is_content_callback)
async def view_news_item(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–¥–µ–ª—å–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
    """
    try:
        news_id = int(callback.data.split("_")[2])
        logger.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ—Å—Ç–∏ #{news_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
        news = await session.get(News, news_id)
        if not news:
            await callback.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        created_at = news.created_at.strftime("%d.%m.%Y %H:%M")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        news_text = (
            f"<b>üì∞ –ù–æ–≤–æ—Å—Ç—å #{news.id}</b>\n\n"
            f"<b>üìå {news.title}</b>\n"
            f"üïí _{created_at}_\n\n"
            f"{news.content}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=f"edit_news_start_{news.id}"
                ),
                InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"content_delete_news_{news.id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –Ω–æ–≤–æ—Å—Ç—è–º",
                    callback_data="content_manage_news"
                )
            ]
        ])
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if news.image_url:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è caption
            if len(news_text) > 1024:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
                full_image_path = f"src/{news.image_url}"
                if os.path.exists(full_image_path):
                    await callback.message.answer_photo(
                        photo=FSInputFile(full_image_path),
                        caption="<b>üì∞ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ—Å—Ç–∏</b>",
                        parse_mode="HTML"
                    )
                await callback.message.answer(
                    news_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ caption
                full_image_path = f"src/{news.image_url}"
                if os.path.exists(full_image_path):
                    await callback.message.answer_photo(
                        photo=FSInputFile(full_image_path),
                        caption=news_text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                else:
                    await callback.message.answer(
                        news_text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await callback.message.answer(
                news_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–∏",
            show_alert=True
        )

@router.callback_query(F.data.startswith("edit_news_title_"), is_content_callback)
async def edit_news_title(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏
    """
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ callback_data
        news_id = int(callback.data.rsplit("_", 1)[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        news = await session.get(News, news_id)
        if not news:
            await callback.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            news_id=news_id,
            current_title=news.title,
            current_photo=news.image_url,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
            edit_mode="title_only"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        await state.set_state(NewsStates.edit_title)
        
        message_text = (
            f"<b>üìù –¢–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:</b>\n{news.title}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:"
        )

        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            message_text,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(NewsStates.edit_title)
async def process_edit_news_title(message: Message, state: FSMContext, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏
    """
    try:
        data = await state.get_data()
        news_id = data.get('news_id')
        current_photo = data.get('current_photo')
        edit_mode = data.get('edit_mode')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if not news_id or edit_mode != "title_only":
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            await state.clear()
            await state.set_state(None)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
        news = await session.get(News, news_id)
        if not news:
            await message.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            await state.set_state(None)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
        news.title = message.text
        news.image_url = current_photo  # –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
        await session.commit()
        
        await message.answer("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await show_news_after_edit(message, news, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
        await state.clear()
        await state.set_state(None)

@router.callback_query(F.data.startswith("edit_news_text_"), is_content_callback)
async def edit_news_content(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
    """
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ callback_data
        news_id = int(callback.data.rsplit("_", 1)[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        news = await session.get(News, news_id)
        if not news:
            await callback.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            news_id=news_id,
            current_photo=news.image_url,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
            edit_mode="text_only"  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        await state.set_state(NewsStates.edit_content)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        current_text = (
            "<b>üìÑ –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n"
            f"{news.content}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:"
        )
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            current_text,
            parse_mode="HTML"
        )
        
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ ID –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –Ω–æ–≤–æ—Å—Ç–∏", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏", show_alert=True)

@router.message(NewsStates.edit_content)
async def process_edit_news_content(message: Message, state: FSMContext, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        news_id = data.get('news_id')
        current_photo = data.get('current_photo')
        edit_mode = data.get('edit_mode')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if not news_id or edit_mode != "text_only":
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            await state.clear()
            await state.set_state(None)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
        news = await session.get(News, news_id)
        if not news:
            await message.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            await state.set_state(None)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
        news.content = message.text
        news.image_url = current_photo  # –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
        await session.commit()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
        created_at = news.created_at.strftime("%d.%m.%Y %H:%M")
        news_text = (
            f"<b>üì∞ –ù–æ–≤–æ—Å—Ç—å #{news.id}</b>\n\n"
            f"<b>üìå {news.title}</b>\n"
            f"üïí _{created_at}_\n\n"
            f"{news.content}\n\n"
            "‚úÖ –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    callback_data=f"edit_news_start_{news.id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π",
                    callback_data="content_manage_news"
                )
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç—å—é
        if news.image_url:
            full_image_path = f"src/{news.image_url}"
            if os.path.exists(full_image_path):
                if len(news_text) > 1024:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∫–æ—Ä–æ—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
                    await message.answer_photo(
                        photo=FSInputFile(full_image_path),
                        caption="<b>üì∞ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ—Å—Ç–∏</b>",
                        parse_mode="HTML"
                    )
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    await message.answer(
                        news_text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                else:
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ caption, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—ë –≤–º–µ—Å—Ç–µ
                    await message.answer_photo(
                        photo=FSInputFile(full_image_path),
                        caption=news_text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await message.answer(
                    news_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await message.answer(
                news_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        await state.set_state(None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
        await state.clear()
        await state.set_state(None)

@router.callback_query(F.data.startswith("edit_news_photo_"), is_content_callback)
async def edit_news_photo(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –Ω–æ–≤–æ—Å—Ç–∏
    """
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ callback_data
        news_id = int(callback.data.rsplit("_", 1)[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        news = await session.get(News, news_id)
        if not news:
            await callback.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            news_id=news_id,
            edit_mode="photo_only"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ
        await state.set_state(NewsStates.edit_photo)
        
        message_text = (
            "<b>üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏</b>\n"
            "<i>(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)</i>"
        )

        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(message_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(NewsStates.edit_photo, F.photo)
async def process_edit_news_photo(message: Message, state: FSMContext, session: AsyncSession, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏
    """
    try:
        data = await state.get_data()
        news_id = data.get('news_id')
        edit_mode = data.get('edit_mode')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if not news_id or edit_mode != "photo_only":
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            await state.clear()
            await state.set_state(None)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
        news = await session.get(News, news_id)
        if not news:
            await message.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            await state.set_state(None)
            return
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if news.image_url:
            await delete_photo(news.image_url)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        image_path, file_id = await save_photo_to_disk(photo, bot, "news")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ
        news.image_url = image_path
        await session.commit()
        
        await message.answer("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        await show_news_after_edit(message, news, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
        await state.clear()
        await state.set_state(None)

@router.message(NewsStates.edit_photo, Command("skip"))
async def skip_edit_news_photo(message: Message, state: FSMContext, session: AsyncSession) -> None:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –Ω–æ–≤–æ—Å—Ç–∏
    """
    try:
        data = await state.get_data()
        news_id = data.get('news_id')
        edit_mode = data.get('edit_mode')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if not news_id or edit_mode != "photo_only":
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            await state.clear()
            await state.set_state(None)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
        news = await session.get(News, news_id)
        if not news:
            await message.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            await state.set_state(None)
            return
        
        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if news.image_url:
            await delete_photo(news.image_url)
            news.image_url = None
            await session.commit()
        
        await message.answer("‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ!")
        await show_news_after_edit(message, news, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")
        await state.clear()
        await state.set_state(None)

async def show_news_after_edit(message: Message, news: News, state: FSMContext) -> None:
    """
    –ü–æ–∫–∞–∑ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    await state.clear()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                callback_data=f"edit_news_start_{news.id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π",
                callback_data="content_manage_news"
            )
        ]
    ])
    
    created_at = news.created_at.strftime("%d.%m.%Y %H:%M")
    news_text = (
        f"<b>üì∞ –ù–æ–≤–æ—Å—Ç—å #{news.id}</b>\n\n"
        f"<b>üìå {news.title}</b>\n"
        f"üïí _{created_at}_\n\n"
        f"{news.content}"
    )
    
    if news.image_url:
        full_image_path = f"src/{news.image_url}"
        if os.path.exists(full_image_path):
            if len(news_text) > 1024:
                await message.answer_photo(
                    photo=FSInputFile(full_image_path),
                    caption="<b>üì∞ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ—Å—Ç–∏</b>",
                    parse_mode="HTML"
                )
                await message.answer(
                    news_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            else:
                await message.answer_photo(
                    photo=FSInputFile(full_image_path),
                    caption=news_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
        else:
            await message.answer(
                news_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    else:
        await message.answer(
            news_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("edit_news_start_"), is_content_callback)
async def start_edit_news(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ callback_data
        news_id = int(callback.data.split("_")[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        news = await session.get(News, news_id)
        if not news:
            await callback.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫",
                    callback_data=f"edit_news_title_{news_id}"
                ),
                InlineKeyboardButton(
                    text="üìù –¢–µ–∫—Å—Ç",
                    callback_data=f"edit_news_text_{news_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                    callback_data=f"edit_news_photo_{news_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data="content_manage_news"
                )
            ]
        ])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        created_at = news.created_at.strftime("%d.%m.%Y %H:%M")
        text = (
            f"<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ #{news_id}</b>\n\n"
            f"<b>üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {news.title}\n"
            f"<b>üïí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {created_at}\n\n"
            f"<b>üìÑ –¢–µ–∫—Å—Ç:</b>\n{news.content}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:"
        )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        if news.image_url:
            full_image_path = f"src/{news.image_url}"
            if os.path.exists(full_image_path):
                # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await callback.message.delete()
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                
                if len(text) > 1024:
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
                    await callback.message.answer_photo(
                        photo=FSInputFile(full_image_path),
                        caption="<b>üì∞ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ—Å—Ç–∏</b>",
                        parse_mode="HTML"
                    )
                    await callback.message.answer(
                        text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                else:
                    await callback.message.answer_photo(
                        photo=FSInputFile(full_image_path),
                        caption=text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
            else:
                await callback.message.edit_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
        else:
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

