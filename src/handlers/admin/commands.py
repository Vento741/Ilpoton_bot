# src/handlers/admin/commands.py

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from loguru import logger

from config.settings import settings
from database.models.models import Appointment, User, Service, TimeSlot
from keyboards.admin.admin import (
    get_appointments_management_keyboard,
    get_confirmation_keyboard,
    get_admin_keyboard
)
from states.admin import AdminAppointmentStates
from core.utils import NOT_ADMIN_MESSAGE



router = Router()

COMMAND_PREFIXES = [
    "admin",
    "appointment_",
    "settings_",
    "change_status_",
    "confirm_status_",
    "cancel_",
    "start"
    
]

def is_command_callback(callback: CallbackQuery) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ callback –∫ –∫–æ–º–∞–Ω–¥–∞–º
    """
    return any(callback.data.startswith(prefix) for prefix in COMMAND_PREFIXES)

def admin_filter(message: Message | CallbackQuery) -> bool:
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    user_id = message.from_user.id if isinstance(message, Message) else message.message.from_user.id
    return user_id in settings.admin_ids

@router.message(Command("admin"), admin_filter)
async def cmd_admin(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
    """
    await message.answer(
        "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=get_admin_keyboard()
    )

@router.message(Command("admin"))
async def cmd_admin_no_access(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    await message.answer(NOT_ADMIN_MESSAGE)

@router.message(F.text == "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏", admin_filter)
async def show_appointments(message: Message, session: AsyncSession, state: FSMContext) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
    """
    await state.set_state(AdminAppointmentStates.viewing_list)
    
    appointments = await session.execute(
        select(Appointment).order_by(Appointment.created_at.desc())
    )
    appointments = appointments.scalars().all()
    
    if not appointments:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π
    appointments_text = "üìù –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π:\n\n"
    for app in appointments:
        appointments_text += (
            f"<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> {app.user.full_name}\n"
            f"<b>üìÖ –î–∞—Ç–∞:</b> {app.time_slot.date.strftime('%d.%m.%Y %H:%M')}\n"
            f"<b>üíá‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞:</b> {app.service.name}\n"
            f"<b>üìä –°—Ç–∞—Ç—É—Å:</b> {app.status}\n\n"
        )
    
    await message.answer(appointments_text, parse_mode="HTML")

@router.callback_query(F.data.startswith("appointment_"), admin_filter, is_command_callback)
async def show_appointment_details(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    appointment_id = int(callback.data.split("_")[1])
    
    query = select(Appointment).where(Appointment.id == appointment_id)
    result = await session.execute(query)
    appointment = result.scalar_one_or_none()
    
    if not appointment:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user = await session.get(User, appointment.user_id)
    service = await session.get(Service, appointment.service_id)
    time_slot = await session.get(TimeSlot, appointment.time_slot_id)
    
    details = (
        f"<b>üìã –î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏ #{appointment.id}</b>\n\n"
        f"<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> {user.full_name}\n"
        f"<b>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone_number}\n"
        f"<b>üíá‚Äç‚ôÄÔ∏è –£—Å–ª—É–≥–∞:</b> {service.name}\n"
        f"<b>üìÖ –î–∞—Ç–∞:</b> {time_slot.date.strftime('%d.%m.%Y')}\n"
        f"<b>üìù –°—Ç–∞—Ç—É—Å:</b> {appointment.status}\n"
    )
    
    if appointment.comment:
        details += f"<b>üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {appointment.comment}\n"
    
    keyboard = get_appointments_management_keyboard(appointments=[appointment])
    await callback.message.edit_text(details, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data.startswith("change_status_"), admin_filter, is_command_callback)
async def change_appointment_status(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏"""
    appointment_id = int(callback.data.split("_")[2])
    new_status = callback.data.split("_")[3]
    
    query = select(Appointment).where(Appointment.id == appointment_id)
    result = await session.execute(query)
    appointment = result.scalar_one_or_none()
    
    if not appointment:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    await state.update_data(appointment_id=appointment_id, new_status=new_status)
    confirmation_text = f"<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ #{appointment_id} –Ω–∞ {new_status}?</b>"
    await callback.message.edit_text(
        confirmation_text,
        reply_markup=get_confirmation_keyboard(f"confirm_status_{appointment_id}")
    )

@router.callback_query(F.data.startswith("confirm_status_"), admin_filter, is_command_callback)
async def confirm_status_change(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏"""
    data = await state.get_data()
    appointment_id = data.get("appointment_id")
    new_status = data.get("new_status")
    
    query = select(Appointment).where(Appointment.id == appointment_id)
    result = await session.execute(query)
    appointment = result.scalar_one_or_none()
    
    if not appointment:
        await callback.answer("<b>‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>", parse_mode="HTML")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    appointment.status = new_status
    await session.commit()
    
    await callback.answer(
        f"<b>‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏</b> <code>#{appointment_id}</code> <b>–∏–∑–º–µ–Ω–µ–Ω –Ω–∞</b> <code>{new_status}</code>",
        parse_mode="HTML"
    )
    await show_appointments(callback.message, session)
    await state.clear()

@router.callback_query(F.data.startswith("cancel_"), admin_filter, is_command_callback)
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"""
    await state.clear()
    await show_appointments(callback.message, callback.message.bot.session)

@router.message(Command("start"), admin_filter)
async def cmd_start(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")
    await message.answer(
        "<b>üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:</b>\n\n",
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    ) 