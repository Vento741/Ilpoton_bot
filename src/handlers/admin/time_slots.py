# src/handlers/admin/time_slots.py

from datetime import datetime, timedelta, time
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from loguru import logger

from config.settings import settings
from database.models import TimeSlot, Appointment
from keyboards.admin.admin import (
    get_admin_keyboard,
    get_time_slots_dates_keyboard,
    get_time_slots_for_date_keyboard,
    get_admin_inline_keyboard
)
from states.admin import TimeSlotStates
from core.utils.logger import log_error
from core.utils.time_slots import get_time_slots_view, check_and_clear_states, update_completed_appointments


router = Router(name='admin_time_slots')

TIME_SLOTS_PREFIXES = [
    "manage_schedule",
    "view_date_",
    "add_slot_to_date_",
    "add_appointment_comment_",
    "select_time_schedule_",
    "select_date_schedule_",
    "manual_time_schedule",
    "manual_date_schedule",
    "delete_slot_",
    "auto_create_slots_schedule",
    "auto_month_",
    "date_page_",
    "select_time_slot_"
]

def admin_filter(message: Message | CallbackQuery) -> bool:
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    user_id = message.from_user.id if isinstance(message, Message) else message.from_user.id
    return user_id in settings.admin_ids

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ callback'–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def is_time_slots_callback(callback: CallbackQuery) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ callback –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    """
    return any(callback.data.startswith(prefix) for prefix in TIME_SLOTS_PREFIXES)

@router.callback_query(F.data == "manage_schedule", is_time_slots_callback)
async def manage_schedule(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    """
    try:
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º")
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        await update_completed_appointments(session)
        
        # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer()
        
        time_slots = await session.execute(
            select(TimeSlot)
            .where(TimeSlot.date >= datetime.now())
            .order_by(TimeSlot.date)
        )
        time_slots = time_slots.scalars().all()
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(time_slots)}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton(
                text="üîÑ –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –Ω–∞ –º–µ—Å—è—Ü",
                callback_data="auto_create_slots_schedule"
            )],
            [InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç",
                callback_data="add_time_slot_schedule"
            )]
        ]
        
        dates_keyboard = get_time_slots_dates_keyboard(time_slots, page=1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏ "message is not modified"
        current_time = datetime.now().strftime("%H:%M:%S")
        
        try:
            await callback.message.edit_text(
                f"<b>üïê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º</b>\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:\n"
                f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ {current_time}",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=keyboard + dates_keyboard.inline_keyboard
                ),
                parse_mode="HTML"
            )
        except Exception as edit_error:
            if "message is not modified" in str(edit_error):
                logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return
            else:
                await callback.message.answer(
                    f"<b>üïê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º</b>\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:\n"
                    f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ {current_time}",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=keyboard + dates_keyboard.inline_keyboard
                    ),
                    parse_mode="HTML"
                )
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
            reply_markup=get_admin_inline_keyboard()
        )

@router.callback_query(F.data.startswith("view_date_"), is_time_slots_callback)
async def view_date_slots(callback: CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    """
    if not admin_filter(callback):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        await update_completed_appointments(session)
        
        date_str = callback.data.split("_")[2]
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–ª–æ—Ç—ã –Ω–∞ {date_str}")
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback_data: {callback.data}")
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        selected_date = datetime.strptime(date_str, "%d.%m.%Y")
        
        text, keyboard = await get_time_slots_view(selected_date, session)
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–ª–æ—Ç–æ–≤ –Ω–∞ –¥–∞—Ç—É: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤",
            reply_markup=get_time_slots_dates_keyboard([])
        )

@router.callback_query(F.data.startswith("add_slot_to_date_"), is_time_slots_callback)
async def start_add_slot_to_date(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
    """
    try:
        date_str = callback.data.split("_")[-1]
        await callback.answer()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ datetime
        date = datetime.strptime(date_str, "%d.%m.%Y")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        existing_slots = await session.execute(
            select(TimeSlot)
            .where(
                TimeSlot.date >= date.replace(hour=0, minute=0),
                TimeSlot.date <= date.replace(hour=23, minute=59)
            )
        )
        existing_slots = existing_slots.scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        all_appointments = await session.execute(
            select(Appointment)
            .join(TimeSlot)
            .where(
                TimeSlot.date >= date.replace(hour=0, minute=0),
                TimeSlot.date <= date.replace(hour=23, minute=59)
            )
            .options(
                selectinload(Appointment.time_slot)
            )
        )
        all_appointments = all_appointments.scalars().all()
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–∞–Ω—è—Ç—ã—Ö –≤—Ä–µ–º–µ–Ω
        existing_times = {slot.date.strftime('%H:%M') for slot in existing_slots}
        occupied_times = set()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏ —Å–ª–µ–¥—É—é—â–∏–µ —á–∞—Å—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö
        for app in all_appointments:
            time_str = app.time_slot.date.strftime('%H:%M')
            occupied_times.add(time_str)
            # –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å
            if app.status == "CONFIRMED":
                next_hour = (app.time_slot.date + timedelta(hours=1))
                if next_hour.date() == app.time_slot.date.date():
                    occupied_times.add(next_hour.strftime('%H:%M'))
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
        keyboard.append([InlineKeyboardButton(
            text="üïê –í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤—Ä—É—á–Ω—É—é",
            callback_data="manual_time_schedule"
        )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —á–∞—Å–∞–º–∏
        all_times = ["09:00","10:00","11:00","12:00","13:00","14:00","15:00","16:00","17:00"]
        available_times = [t for t in all_times if t not in existing_times and t not in occupied_times]
        
        for time in available_times:
            keyboard.append([InlineKeyboardButton(
                text=time,
                callback_data=f"select_time_schedule_{time}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data=f"view_date_{date_str}"
        )])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(date=date_str)
        await state.set_state(TimeSlotStates.selecting_time)
        
        message_text = (
            f"<b>üìÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date_str}</b>\n\n"
            "<b>üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
            "‚Ä¢ <code>–ß–ß</code> (10)\n"
            "‚Ä¢ <code>–ß–ß:–ú–ú</code> (10:30)"
        )
        
        if not available_times:
            message_text += "\n\n‚ùóÔ∏è –í—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ –∑–∞–Ω—è—Ç—ã"
        
        await callback.message.edit_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞ –Ω–∞ –¥–∞—Ç—É: {e}", exc_info=True)
        await callback.message.edit_text(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>",
            reply_markup=get_admin_inline_keyboard(),
            parse_mode="HTML"
        )

@router.callback_query(F.data == "add_time_slot_schedule", F.from_user.id.in_(settings.admin_ids), is_time_slots_callback)
async def start_add_time_slot(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
    """
    try:
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞")
        await callback.answer()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
        keyboard = []
        today = datetime.now()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
        keyboard.append([InlineKeyboardButton(
            text="üìÖ –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é",
            callback_data="manual_date_schedule"
        )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏
        for i in range(7):
            date = today + timedelta(days=i)
            keyboard.append([InlineKeyboardButton(
                text=date.strftime("%d.%m.%Y (%a)"),
                callback_data=f"select_date_schedule_{date.strftime('%d.%m.%Y')}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="manage_schedule"
        )])
        
        await state.set_state(TimeSlotStates.selecting_date)
        await callback.message.edit_text(
            "<b>üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
            "‚Ä¢ <code>–î–î.–ú–ú</code> (15.02)\n"
            "‚Ä¢ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code> (15.02.2025)",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
    except Exception as e:
        log_error(e)
        await callback.message.edit_text(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>",
            reply_markup=get_time_slots_dates_keyboard([]),
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("select_date_"), TimeSlotStates.selecting_date, is_time_slots_callback)
async def process_date_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–Ω–æ–ø–æ–∫
    """
    try:
        selected_date = callback.data.split("_")[2]
        await process_date_input(callback.message, state, session, selected_date, is_callback=True)
    except Exception as e:
        log_error(e)
        await callback.message.edit_text(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>",
            reply_markup=get_admin_inline_keyboard(),
            parse_mode="HTML"
        )

@router.callback_query(F.data == "manual_date_schedule", TimeSlotStates.selecting_date, is_time_slots_callback)
async def request_manual_date(callback: CallbackQuery) -> None:
    """
    –ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    """
    await callback.message.edit_text(
        "<b>üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:</b>\n"
        "‚Ä¢ <code>–î–î.–ú–ú</code> (15.02)\n"
        "‚Ä¢ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code> (15.02.2025)",
        parse_mode="HTML"
    )

@router.message(TimeSlotStates.selecting_date, admin_filter)
async def process_manual_date(message: Message, state: FSMContext, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    """
    await process_date_input(message, state, session, message.text)

async def process_date_input(message: Message, state: FSMContext, session: AsyncSession, date_text: str, is_callback: bool = False) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã
    """
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã (–î–î.–ú–ú)
        if len(date_text.split('.')) == 2:
            current_year = datetime.now().year
            date_text = f"{date_text}.{current_year}"
        
        date = datetime.strptime(date_text, "%d.%m.%Y")
        
        if date.date() < datetime.now().date():
            text = "<b>‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:"
            if is_callback:
                await message.edit_text(text, parse_mode="HTML")
            else:
                await message.answer(text, parse_mode="HTML")
            return
        
        await state.update_data(date=date.strftime("%d.%m.%Y"))
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        existing_slots = await session.execute(
            select(TimeSlot)
            .where(
                TimeSlot.date >= date.replace(hour=0, minute=0),
                TimeSlot.date <= date.replace(hour=23, minute=59)
            )
        )
        existing_slots = existing_slots.scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        confirmed_appointments = await session.execute(
            select(Appointment)
            .join(TimeSlot)
            .where(
                TimeSlot.date >= date.replace(hour=0, minute=0),
                TimeSlot.date <= date.replace(hour=23, minute=59),
                Appointment.status == "CONFIRMED"
            )
        )
        confirmed_appointments = confirmed_appointments.scalars().all()
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–∞–Ω—è—Ç—ã—Ö –≤—Ä–µ–º–µ–Ω
        existing_times = {slot.date.strftime('%H:%M') for slot in existing_slots}
        occupied_times = set()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏ —Å–ª–µ–¥—É—é—â–∏–µ —á–∞—Å—ã
        for app in confirmed_appointments:
            time_str = app.time_slot.date.strftime('%H:%M')
            occupied_times.add(time_str)
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å
            next_hour = (app.time_slot.date + timedelta(hours=1))
            if next_hour.date() == app.time_slot.date.date():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
                occupied_times.add(next_hour.strftime('%H:%M'))
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
        keyboard.append([InlineKeyboardButton(
            text="üïê –í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤—Ä—É—á–Ω—É—é",
            callback_data="manual_time_schedule"
        )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        all_times = ["09:00","10:00","11:00","12:00","13:00","14:00","15:00","16:00","17:00"]
        available_times = [time for time in all_times if time not in existing_times and time not in occupied_times]
        
        if available_times:
            for time in available_times:
                keyboard.append([InlineKeyboardButton(
                    text=time,
                    callback_data=f"select_time_schedule_{time}"
                )])
        else:
            # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = (
                f"<b>‚ùå –ù–∞ {date.strftime('%d.%m.%Y')} –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ –∑–∞–Ω—è—Ç—ã!</b>\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:"
            )
            if is_callback:
                await message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="add_time_slot_schedule")
                ]]), parse_mode="HTML")
            else:
                await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="add_time_slot_schedule")
                ]]), parse_mode="HTML")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="add_time_slot_schedule"
        )])
        
        text = (
            f"<b>üìÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date.strftime('%d.%m.%Y')}</b>\n\n"
            "<b>üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
            "‚Ä¢ <code>–ß–ß</code> (10)\n"
            "‚Ä¢ <code>–ß–ß:–ú–ú</code> (10:30)"
        )
        
        await state.set_state(TimeSlotStates.selecting_time)
        if is_callback:
            await message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
        else:
            await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
            
    except ValueError:
        text = (
            "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ <code>–î–î.–ú–ú</code> (15.02)\n"
            "‚Ä¢ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code> (15.02.2025)"
        )
        if is_callback:
            await message.edit_text(text, parse_mode="HTML")
        else:
            await message.answer(text, parse_mode="HTML")

@router.callback_query(F.data.startswith("select_time_schedule_"), is_time_slots_callback)
async def process_time_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ—Ç–∞
    """
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {callback.from_user.id}")
        selected_time = callback.data.split("_")[3]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        date_str = data.get("date")
        
        if not date_str:
            await callback.answer("–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ datetime
        date = datetime.strptime(date_str, "%d.%m.%Y")
        time_parts = selected_time.split(":")
        slot_datetime = date.replace(hour=int(time_parts[0]), minute=int(time_parts[1]))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–ª–æ—Ç –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è
        existing_slot_result = await session.execute(
            select(TimeSlot)
            .where(
                TimeSlot.date >= slot_datetime.replace(second=0, microsecond=0),
                TimeSlot.date < slot_datetime.replace(second=0, microsecond=0) + timedelta(minutes=1)
            )
        )
        if existing_slot_result.scalar_one_or_none():
            await callback.answer("–ù–∞ —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å–ª–æ—Ç!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è
        appointments_result = await session.execute(
            select(Appointment)
            .join(TimeSlot)
            .where(
                TimeSlot.date >= date.replace(hour=0, minute=0),
                TimeSlot.date <= date.replace(hour=23, minute=59)
            )
            .options(
                selectinload(Appointment.time_slot)
            )
        )
        appointments = appointments_result.scalars().all()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏
        for app in appointments:
            app_time = app.time_slot.date
            app_time_str = app_time.strftime('%H:%M')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            if app_time_str == selected_time:
                await callback.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ –∑–∞–ø–∏—Å—å—é!")
                return
                
            if app.status == "CONFIRMED":
                next_hour = app_time + timedelta(hours=1)
                next_hour_str = next_hour.strftime('%H:%M')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –Ω–æ–≤—ã–π —Å–ª–æ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
                if next_hour_str == selected_time:
                    await callback.answer("–≠—Ç–æ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ (—Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏)!")
                    return
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å –Ω–æ–≤–æ–≥–æ —Å–ª–æ—Ç–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
                new_slot_next_hour = slot_datetime + timedelta(hours=1)
                if new_slot_next_hour.strftime('%H:%M') == app_time_str:
                    await callback.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç - —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å—å—é!")
                    return

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
        time_slot = TimeSlot(
            date=slot_datetime,
            is_available=True
        )
        session.add(time_slot)
        await session.commit()

        await callback.answer("‚úÖ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–ª–æ—Ç–æ–≤ –Ω–∞ –¥–∞—Ç—É
        text, keyboard = await get_time_slots_view(date, session)
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞")
        await callback.message.edit_text(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞</b>",
            reply_markup=get_admin_inline_keyboard(),
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("select_time_slot_"), is_time_slots_callback)
async def handle_time_slot_selection(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
    """
    try:
        slot_id = int(callback.data.split("_")[3])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç
        slot = await session.get(TimeSlot, slot_id)
        if not slot:
            await callback.answer("–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç
        result = await session.execute(
            select(Appointment)
            .where(
                Appointment.time_slot_id == slot_id,
                Appointment.status.in_(["PENDING", "CONFIRMED"])
            )
        )
        appointment = result.scalar_one_or_none()
        
        if appointment:
            await callback.answer("–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç!")
            return
            
        # –ï—Å–ª–∏ —Å–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω
        await callback.answer(
            "‚úÖ –°–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏",
            show_alert=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ª–æ—Ç–∞: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–æ—Ç–∞")

@router.callback_query(F.data == "manual_time_schedule", is_time_slots_callback)
async def request_manual_time(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        date_str = data.get("date")
        
        keyboard = [[InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏",
            callback_data=f"add_slot_to_date_{date_str}"
        )]]
        
        await callback.message.edit_text(
            "<b>üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:</b>\n"
            "‚Ä¢ <code>–ß–ß</code> (10)\n"
            "‚Ä¢ <code>–ß–ß:–ú–ú</code> (10:30)",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(lambda c: c.data.startswith("delete_slot_"), admin_filter, is_time_slots_callback)
async def delete_time_slot(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
    """
    try:
        slot_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        result = await session.execute(
            select(TimeSlot)
            .options(selectinload(TimeSlot.appointments))
            .where(TimeSlot.id == slot_id)
        )
        slot = result.scalar_one_or_none()
        
        if not slot:
            await callback.answer("–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        date_str = slot.date.strftime('%d.%m.%Y')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç
        active_appointments = [app for app in slot.appointments 
                             if app.status in ("PENDING", "CONFIRMED")]
        
        if active_appointments:
            await callback.answer(
                "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏!",
                show_alert=True
            )
            return
            
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        for app in slot.appointments:
            await session.delete(app)
            
        # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º —Å–ª–æ—Ç
        await session.delete(slot)
        await session.commit()
        
        await callback.answer("‚úÖ –°–ª–æ—Ç —É–¥–∞–ª–µ–Ω!")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
        text, keyboard = await get_time_slots_view(slot.date, session)
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_time_slot: {e}", exc_info=True)
        await session.rollback()
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞",
            reply_markup=get_admin_inline_keyboard()
        )

@router.callback_query(F.data == "auto_create_slots_schedule", F.from_user.id.in_(settings.admin_ids), is_time_slots_callback)
async def start_auto_create_slots(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤
    """
    try:
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(TimeSlotStates.selecting_auto_month)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Å—è—Ü–µ–≤
        keyboard = []
        current_date = datetime.now()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–µ 2 –º–µ—Å—è—Ü–∞
        for i in range(3):
            if i == 0:
                future_date = current_date
            else:
                year = current_date.year + ((current_date.month + i - 1) // 12)
                month = ((current_date.month + i - 1) % 12) + 1
                future_date = datetime(year, month, 1)
            
            month_names = {
                1: '–Ø–Ω–≤–∞—Ä—å', 2: '–§–µ–≤—Ä–∞–ª—å', 3: '–ú–∞—Ä—Ç', 4: '–ê–ø—Ä–µ–ª—å',
                5: '–ú–∞–π', 6: '–ò—é–Ω—å', 7: '–ò—é–ª—å', 8: '–ê–≤–≥—É—Å—Ç',
                9: '–°–µ–Ω—Ç—è–±—Ä—å', 10: '–û–∫—Ç—è–±—Ä—å', 11: '–ù–æ—è–±—Ä—å', 12: '–î–µ–∫–∞–±—Ä—å'
            }
            month_name = month_names[future_date.month]
            
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{month_name} {future_date.year}",
                    callback_data=f"auto_month_{future_date.strftime('%m.%Y')}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é",
                callback_data="manage_schedule"
            )
        ])
        
        await callback.message.edit_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
        await callback.answer()
        
    except Exception as e:
        log_error(e)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Å—è—Ü–∞",
            reply_markup=get_admin_inline_keyboard()
        )

@router.callback_query(F.data.startswith("auto_month_"), TimeSlotStates.selecting_auto_month, is_time_slots_callback)
async def process_auto_month(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤
    """
    try:
        month_year = callback.data.split("_")[2]
        month, year = map(int, month_year.split("."))
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –≤—ã–±—Ä–∞–ª –º–µ—Å—è—Ü {month}.{year} –¥–ª—è –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è")
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –¥–æ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤
        await callback.answer("‚è≥ –°–æ–∑–¥–∞—é —Å–ª–æ—Ç—ã...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞
        current_datetime = datetime.now().replace(second=0, microsecond=0)
        start_date = max(
            current_datetime.date(),
            datetime(year, month, 1).date()
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        if month == 12:
            next_month = datetime(year + 1, 1, 1)
        else:
            next_month = datetime(year, month + 1, 1)
        end_date = (next_month - timedelta(days=1)).date()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ –∑–∞—Ä–∞–Ω–µ–µ
        existing_slots = await session.execute(
            select(TimeSlot)
            .where(
                TimeSlot.date >= datetime.combine(start_date, time.min),
                TimeSlot.date <= datetime.combine(end_date, time.max)
            )
        )
        existing_slots_set = {
            slot.date.strftime('%Y-%m-%d %H:%M')
            for slot in existing_slots.scalars().all()
        }
        
        slots_to_create = []
        current_date = start_date
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        await callback.message.edit_text(
            f"‚è≥ –°–æ–∑–¥–∞—é —Å–ª–æ—Ç—ã –Ω–∞ {month}.{year}...\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )
        
        while current_date <= end_date:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (6 - —ç—Ç–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
            if current_date.weekday() == 6:
                current_date += timedelta(days=1)
                continue
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            if current_date.weekday() < 5:  # –ü–ù-–ü–¢
                time_ranges = [(9, 17)]  # —Å 9:00 –¥–æ 17:00
            else:  # –°–ë
                time_ranges = [(10, 13)]  # —Å 10:00 –¥–æ 13:00
            
            for start_hour, end_hour in time_ranges:
                for hour in range(start_hour, end_hour):
                    slot_datetime = datetime.combine(current_date, time(hour, 0))
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–æ—Ç—ã –≤ –ø—Ä–æ—à–ª–æ–º
                    if slot_datetime <= current_datetime:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞ –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ
                    slot_key = slot_datetime.strftime('%Y-%m-%d %H:%M')
                    if slot_key in existing_slots_set:
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ—Ç
                    time_slot = TimeSlot(
                        date=slot_datetime,
                        is_available=True,
                        created_at=current_datetime,
                        updated_at=current_datetime
                    )
                    slots_to_create.append(time_slot)
            
            current_date += timedelta(days=1)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        if slots_to_create:
            session.add_all(slots_to_create)
            await session.commit()
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(slots_to_create)} –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ {month}.{year}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤
        time_slots = await session.execute(
            select(TimeSlot)
            .where(TimeSlot.date >= current_datetime)
            .order_by(TimeSlot.date)
        )
        time_slots = time_slots.scalars().all()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton(
                text="üîÑ –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –Ω–∞ –º–µ—Å—è—Ü",
                callback_data="auto_create_slots_schedule"
            )],
            [InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç",
                callback_data="add_time_slot_schedule"
            )]
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏
        dates_keyboard = get_time_slots_dates_keyboard(time_slots)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        month_names = {
            1: '–Ø–Ω–≤–∞—Ä—å', 2: '–§–µ–≤—Ä–∞–ª—å', 3: '–ú–∞—Ä—Ç', 4: '–ê–ø—Ä–µ–ª—å',
            5: '–ú–∞–π', 6: '–ò—é–Ω—å', 7: '–ò—é–ª—å', 8: '–ê–≤–≥—É—Å—Ç',
            9: '–°–µ–Ω—Ç—è–±—Ä—å', 10: '–û–∫—Ç—è–±—Ä—å', 11: '–ù–æ—è–±—Ä—å', 12: '–î–µ–∫–∞–±—Ä—å'
        }
        month_name = month_names[month]
        
        message_text = (
            f"<b>‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ {len(slots_to_create)} —Å–ª–æ—Ç–æ–≤ –Ω–∞ {month_name} {year}!</b>\n\n"
            "<b>üïê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º</b>\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        try:
            await callback.message.edit_text(
                message_text,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=keyboard + dates_keyboard.inline_keyboard
                ),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(
                message_text,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=keyboard + dates_keyboard.inline_keyboard
                ),
                parse_mode="HTML"
            )
            
    except Exception as e:
        log_error(e)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤</b>",
            reply_markup=get_admin_inline_keyboard(),
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("date_page_"), is_time_slots_callback)
async def handle_date_pagination(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–∞—Ç
    """
    try:
        page = int(callback.data.split("_")[2])
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}")
        await callback.answer()
        
        time_slots = await session.execute(
            select(TimeSlot)
            .where(TimeSlot.date >= datetime.now())
            .order_by(TimeSlot.date)
        )
        time_slots = time_slots.scalars().all()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton(
                text="üîÑ –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –Ω–∞ –º–µ—Å—è—Ü",
                callback_data="auto_create_slots_schedule"
            )],
            [InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç",
                callback_data="add_time_slot_schedule"
            )]
        ]
        
        dates_keyboard = get_time_slots_dates_keyboard(time_slots, page)
        
        await callback.message.edit_text(
            "<b>üïê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=keyboard + dates_keyboard.inline_keyboard
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        log_error(e)
        await callback.message.edit_text(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</b>",
            reply_markup=get_admin_inline_keyboard(),
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("view_appointment_"), is_time_slots_callback)
async def view_appointment_details(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø–∏—Å–∏
    """
    try:
        appointment_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        result = await session.execute(
            select(Appointment)
            .where(Appointment.id == appointment_id)
            .options(
                selectinload(Appointment.user),
                selectinload(Appointment.service),
                selectinload(Appointment.time_slot)
            )
        )
        appointment = result.scalar_one_or_none()
        
        if not appointment:
            await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —ç–º–æ–¥–∑–∏
        status_emoji = "üïê" if appointment.status == "PENDING" else "üöó"
        status_text = "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" if appointment.status == "PENDING" else "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø–∏—Å–∏
        text = (
            f"<b>üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏ #{appointment.id}</b>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_text}\n"
            f"<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> {appointment.user.full_name}\n"
            f"<b>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</b> {appointment.user.phone_number or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>üìÖ –î–∞—Ç–∞:</b> {appointment.time_slot.date.strftime('%d.%m.%Y %H:%M')}\n"
            f"<b>üíá‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞:</b> {appointment.service.name}\n"
            f"<b>üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> {appointment.car_brand} {appointment.car_model} ({appointment.car_year})\n"
        )
        
        if appointment.final_price:
            text += f"<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {appointment.final_price}‚ÇΩ\n"
        else:
            text += f"<b>üí∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> –æ—Ç {appointment.service.price}‚ÇΩ\n"
            
        if appointment.client_comment:
            text += f"\n<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞:</b> {appointment.client_comment}\n"
        if appointment.admin_response:
            text += f"<b>‚Ü™Ô∏è –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b> {appointment.admin_response}\n"
        if appointment.admin_comment:
            text += f"<b>üë®‚Äçüíº –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b> {appointment.admin_comment}\n"
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if appointment.status == "PENDING":
            keyboard.append([
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"confirm_appointment_{appointment.id}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data=f"cancel_appointment_{appointment.id}"
                )
            ])
        else:
            keyboard.append([
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data=f"cancel_appointment_{appointment.id}"
                )
            ])
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        keyboard.append([
            InlineKeyboardButton(
                text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                callback_data=f"add_appointment_comment_{appointment.id}"
            )
        ])
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é",
                callback_data=f"view_date_{appointment.time_slot.date.strftime('%d.%m.%Y')}"
            )
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø–∏—Å–∏: {e}", exc_info=True)
        await callback.message.edit_text(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏</b>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")
            ]]),
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("add_appointment_comment_"), is_time_slots_callback)
async def start_add_appointment_comment(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–ø–∏—Å–∏
    """
    try:
        appointment_id = int(callback.data.split("_")[3])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await check_and_clear_states(state)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
        result = await session.execute(
            select(Appointment)
            .where(Appointment.id == appointment_id)
            .options(
                selectinload(Appointment.user),
                selectinload(Appointment.service),
                selectinload(Appointment.time_slot)
            ))
        appointment = result.scalar_one_or_none()
        
        if not appointment:
            await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø–∏—Å–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            appointment_id=appointment_id,
            source='schedule' if 'view_date_' in callback.message.text else 'appointments'
        )
        await state.set_state(TimeSlotStates.adding_comment)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å
        text = (
            f"<b>üí¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–ø–∏—Å–∏ #{appointment.id}</b>\n\n"
            f"<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> {appointment.user.full_name}\n"
            f"<b>üìÖ –î–∞—Ç–∞:</b> {appointment.time_slot.date.strftime('%d.%m.%Y %H:%M')}\n"
            f"<b>üíá‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞:</b> {appointment.service.name}\n\n"
        )
        
        if appointment.admin_comment:
            text += f"<b>–¢–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{appointment.admin_comment}\n\n"
            
        text += "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard = [[
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞",
                callback_data=f"view_appointment_{appointment.id}"
            )
        ]]
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}", exc_info=True)
        await callback.message.edit_text(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è</b>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")
            ]]),
            parse_mode="HTML"
        )

@router.message(TimeSlotStates.adding_comment)
async def process_appointment_comment(message: Message, state: FSMContext, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–ø–∏—Å–∏
    """
    try:
        data = await state.get_data()
        appointment_id = data.get('appointment_id')
        source = data.get('source', 'appointments')
        
        if not appointment_id:
            await message.answer(
                "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∑–∞–Ω–æ–≤–æ.</b>",
                parse_mode="HTML"
            )
            await state.clear()
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
        result = await session.execute(
            select(Appointment)
            .where(Appointment.id == appointment_id)
            .options(
                selectinload(Appointment.user),
                selectinload(Appointment.service),
                selectinload(Appointment.time_slot)
            )
        )
        appointment = result.scalar_one_or_none()
        
        if not appointment:
            await message.answer(
                "<b>‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>",
                parse_mode="HTML"
            )
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        appointment.admin_comment = message.text
        await session.commit()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–ø–∏—Å–∏
        status_emoji = "‚úÖ" if appointment.status == "CONFIRMED" else "üïê"
        price_text = f"{appointment.final_price}‚ÇΩ" if appointment.final_price else f"–æ—Ç {appointment.service.price}‚ÇΩ"
        
        text = (
            f"<b>{status_emoji} –ó–∞–ø–∏—Å—å #{appointment.id}</b>\n"
            f"<b>‚è∞ {appointment.time_slot.date.strftime('%H:%M')} "
            f"üìÖ {appointment.time_slot.date.strftime('%d.%m.%Y')}</b>\n"
            f"<b>üë§</b> {appointment.user.full_name}\n"
            f"<b>üì±</b> {appointment.user.phone_number or '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}\n"
            f"<b>üöò</b> {appointment.car_brand} {appointment.car_model} ({appointment.car_year})\n"
            f"<b>üíá‚Äç‚ôÇÔ∏è</b> {appointment.service.name}\n"
            f"<b>üí∞</b> {price_text}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
        if appointment.client_comment:
            text += f"<b>üí¨ –ö–ª–∏–µ–Ω—Ç:</b> {appointment.client_comment}\n"
        if appointment.admin_response:
            text += f"<b>‚Ü™Ô∏è –û—Ç–≤–µ—Ç:</b> {appointment.admin_response}\n"
        if appointment.admin_comment:
            text += f"<b>üë®‚Äçüíº –î–ª—è –∞–¥–º–∏–Ω–æ–≤:</b> {appointment.admin_comment}\n"
            
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥: –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        row1 = []
        if appointment.status != "CONFIRMED":
            row1.append(InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=f"confirm_appointment_{appointment.id}"
            ))
        row1.append(InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data=f"cancel_appointment_{appointment.id}"
        ))
        keyboard.append(row1)
        
        # –í—Ç–æ—Ä–æ–π —Ä—è–¥: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard.append([
            InlineKeyboardButton(
                text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                callback_data=f"add_appointment_comment_{appointment.id}"
            )
        ])
        
        # –¢—Ä–µ—Ç–∏–π —Ä—è–¥: –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_text = "‚Ü©Ô∏è –ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é" if source == 'schedule' else "‚Ü©Ô∏è –ö –∑–∞–ø–∏—Å—è–º"
        back_data = (f"view_date_{appointment.time_slot.date.strftime('%d.%m.%Y')}" 
                    if source == 'schedule' else "view_week_appointments")
        keyboard.append([
            InlineKeyboardButton(text=back_text, callback_data=back_data)
        ])
        
        await message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}", exc_info=True)
        await message.answer(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è</b>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")
            ]]),
            parse_mode="HTML"
        )
        await state.clear()