# src/handlers/admin/broadcasts.py

from aiogram import Router, F, Bot
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from loguru import logger
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update
from datetime import datetime
import asyncio
import logging

from config.settings import settings
from database.models import User, Broadcast, Appointment
from keyboards.admin.admin import (
    get_admin_keyboard,
    get_content_management_keyboard,
    get_broadcast_management_keyboard,
    get_broadcast_audience_keyboard,
    get_skip_image_keyboard
)
from states.admin import BroadcastStates

router = Router(name='admin_broadcasts')

BROADCAST_PREFIXES = [
    "broadcast_",  # –û–±—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏
    "broadcast_add",
    "broadcast_view_",
    "broadcast_send_",
    "broadcast_edit_",
    "broadcast_delete_",
    "broadcast_confirm_",
    "broadcast_back_to_content",
    "broadcast_back_to_broadcasts",
    "broadcast_audience_all",
    "broadcast_audience_active",
    "broadcast_cancel"
]

def is_broadcast_callback(callback: CallbackQuery) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ callback –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏
    """
    return any(callback.data.startswith(prefix) for prefix in BROADCAST_PREFIXES)


def admin_filter(message: Message | CallbackQuery) -> bool:
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    user_id = message.from_user.id if isinstance(message, Message) else message.message.from_user.id
    return user_id in settings.admin_ids


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏
@router.message(F.text == "üì® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏", admin_filter)
async def broadcast_management(message: Message, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏
    """
    broadcasts = await session.execute(
        select(Broadcast).order_by(Broadcast.created_at.desc())
    )
    broadcasts = broadcasts.scalars().all()

    await message.answer(
        "<b>üì® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_broadcast_management_keyboard(broadcasts),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "broadcast_add", is_broadcast_callback)
async def start_add_broadcast(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")]
    ])
    
    await callback.message.edit_text(
        "<b>üì® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(BroadcastStates.waiting_for_title)
    await callback.answer()


@router.message(StateFilter(BroadcastStates.waiting_for_title), admin_filter)
async def process_broadcast_title(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    await state.update_data(title=message.text)
    
    await message.answer(
        "<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
        parse_mode="HTML"
    )
    await state.set_state(BroadcastStates.waiting_for_content)


@router.message(StateFilter(BroadcastStates.waiting_for_content), admin_filter)
async def process_broadcast_content(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    await state.update_data(content=message.text)
    
    await message.answer(
        "<b>–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=get_skip_image_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(BroadcastStates.waiting_for_image)


@router.message(StateFilter(BroadcastStates.waiting_for_image), F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", admin_filter)
async def skip_broadcast_image(message: Message, state: FSMContext) -> None:
    """
    –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ä–∞—Å—Å—ã–ª–∫–µ
    """
    await state.update_data(image_url=None)
    await select_broadcast_audience(message, state)


@router.message(StateFilter(BroadcastStates.waiting_for_image), F.photo, admin_filter)
async def process_broadcast_image(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    photo = message.photo[-1]
    file_id = photo.file_id
    await state.update_data(image_url=file_id)
    
    await select_broadcast_audience(message, state)


async def select_broadcast_audience(message: Message, state: FSMContext) -> None:
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    await message.answer(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>",
        reply_markup=get_broadcast_audience_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(BroadcastStates.waiting_for_audience)


@router.callback_query(StateFilter(BroadcastStates.waiting_for_audience),
                       F.data.in_(["broadcast_audience_all", "broadcast_audience_active"]))
async def process_broadcast_audience(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
        data = await state.get_data()
        required_fields = ["title", "content"]
        if not all(field in data for field in required_fields):
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await state.clear()
            return

        audience_type = callback.data.replace("broadcast_audience_", "")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∏—Å–ø–æ–ª—å–∑—É—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        new_broadcast = Broadcast(
            title=data["title"],
            content=data["content"],
            image_url=data.get("image_url"),  # –∏—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            created_by=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            audience_type=audience_type,
            status="DRAFT"
        )
        
        session.add(new_broadcast)
        await session.commit()
        await session.refresh(new_broadcast)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        broadcasts = await session.execute(
            select(Broadcast).order_by(Broadcast.created_at.desc())
        )
        broadcasts = broadcasts.scalars().all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        audience_text = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" if audience_type == "all" else "–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"
        await callback.message.edit_text(
            f"<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ \"{data['title']}\" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"<b>ID:</b> {new_broadcast.id}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> –ß–µ—Ä–Ω–æ–≤–∏–∫\n"
            f"<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {audience_text}\n\n"
            f"<b>–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏.</b>",
            reply_markup=get_broadcast_management_keyboard(broadcasts),
            parse_mode="HTML"
        )
        
        await state.clear()
        await callback.answer("<b>–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞</b>", parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await callback.answer("<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>", show_alert=True, parse_mode="HTML")
        await state.clear()
        # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await session.rollback()


@router.callback_query(F.data.startswith("broadcast_delete_"), is_broadcast_callback)
async def delete_broadcast(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É
    """
    broadcast_id = int(callback.data.split("_")[-1])
    
    broadcast = await session.get(Broadcast, broadcast_id)
    if not broadcast:
        await callback.answer("<b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</b>", parse_mode="HTML")
        return
    
    await session.delete(broadcast)
    await session.commit()
    
    broadcasts = await session.execute(
        select(Broadcast).order_by(Broadcast.created_at.desc())
    )
    broadcasts = broadcasts.scalars().all()
    
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            "<b>üì® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>\n\n"
            "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_broadcast_management_keyboard(broadcasts),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
    
    await callback.answer()


@router.callback_query(F.data.startswith("broadcast_send_"), is_broadcast_callback)
async def send_broadcast(callback: CallbackQuery, session: AsyncSession, bot: Bot) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    """
    broadcast_id = int(callback.data.split("_")[-1])
    
    broadcast = await session.get(Broadcast, broadcast_id)
    if not broadcast:
        await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    query = select(User)
    if broadcast.audience_type == "active":
        # –§–∏–ª—å—Ç—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        query = query.filter(User.appointments.any(Appointment.status == "COMPLETED"))
    
    users = await session.execute(query)
    users = users.scalars().all()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast.status = "SENDING"
    await session.commit()
    await session.refresh(broadcast)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            f"<b>üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ \"{broadcast.title}\" –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</b>",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ–Ω–µ
    task = asyncio.create_task(
        send_broadcast_to_users(bot, broadcast, users, session)
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    def handle_task_result(task):
        try:
            task.result()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    
    task.add_done_callback(handle_task_result)
    await callback.answer()


async def send_broadcast_to_users(bot: Bot, broadcast: Broadcast, users: list[User], session: AsyncSession) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    """
    success_count = 0
    error_count = 0
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    broadcast_id = broadcast.id
    
    for user in users:
        try:
            if broadcast.image_url:
                await bot.send_photo(
                    chat_id=user.telegram_id,
                    photo=broadcast.image_url,
                    caption=f"<b>{broadcast.title}</b>\n\n{broadcast.content}",
                    parse_mode="HTML"
                )
            else:
                await bot.send_message(
                    chat_id=user.telegram_id,
                    text=f"<b>{broadcast.title}</b>\n\n{broadcast.content}",
                    parse_mode="HTML"
                )
            success_count += 1
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
            await asyncio.sleep(0.05)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            error_count += 1
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    broadcast = await session.get(Broadcast, broadcast_id)
    if not broadcast:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫—É —Å ID {broadcast_id}")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast.status = "SENT"
    broadcast.sent_at = datetime.now()
    broadcast.sent_count = success_count
    await session.commit()
    await session.refresh(broadcast)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    broadcasts = await session.execute(
        select(Broadcast).order_by(Broadcast.created_at.desc())
    )
    broadcasts = broadcasts.scalars().all()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º telegram_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        admin_result = await session.execute(
            select(User).where(User.id == broadcast.created_by)
        )
        admin = admin_result.scalar_one_or_none()
        
        if admin:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
            completion_message = await bot.send_message(
                chat_id=admin.telegram_id,
                text=f"<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ \"{broadcast.title}\" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                     f"<b>–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {success_count}\n"
                     f"<b>–û—à–∏–±–æ–∫:</b> {error_count}",
                reply_markup=get_broadcast_management_keyboard(broadcasts),
                parse_mode="HTML"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
                status_text = {
                    "DRAFT": "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫",
                    "SENDING": "üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è",
                    "SENT": "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
                    "CANCELLED": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
                }.get(broadcast.status, broadcast.status)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏
                audience_text = {
                    "all": "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                    "active": "üë§ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"
                }.get(broadcast.audience_type, broadcast.audience_type)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
                text = (
                    f"üì® –†–∞—Å—Å—ã–ª–∫–∞: <b>{broadcast.title}</b>\n\n"
                    f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
                    f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {audience_text}\n"
                    f"–°–æ–∑–¥–∞–Ω–∞: {broadcast.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                )
                
                if broadcast.sent_at:
                    text += f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {broadcast.sent_at.strftime('%d.%m.%Y %H:%M')}\n"
                
                if broadcast.sent_count:
                    text += f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {broadcast.sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                
                text += f"\n–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n{broadcast.content}"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                keyboard = [
                    [
                        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"broadcast_delete_{broadcast.id}")
                    ],
                    [
                        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="broadcast_back_to_broadcasts")
                    ]
                ]
                
                # –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
                messages = await bot.get_chat_history(admin.telegram_id, limit=10)
                for msg in messages:
                    if msg.text and "üì® –†–∞—Å—Å—ã–ª–∫–∞:" in msg.text and broadcast.title in msg.text:
                        try:
                            await msg.edit_text(
                                text=text,
                                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                                parse_mode="HTML"
                            )
                            break
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏: {e}")
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await bot.send_message(
                                chat_id=admin.telegram_id,
                                text=text,
                                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                                parse_mode="HTML"
                            )
                            break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")


@router.callback_query(F.data == "broadcast_back_to_broadcasts", is_broadcast_callback)
async def back_to_broadcasts(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
    
    broadcasts = await session.execute(
        select(Broadcast).order_by(Broadcast.created_at.desc())
    )
    broadcasts = broadcasts.scalars().all()
    
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            "<b>üì® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_broadcast_management_keyboard(broadcasts),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
    
    await callback.answer()


@router.callback_query(F.data == "broadcast_back_to_content")
async def back_to_content_management(callback: CallbackQuery) -> None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    """
    await callback.message.edit_text(
        "<b>üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_content_management_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("broadcast_view_"), is_broadcast_callback)
async def view_broadcast(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    try:
        logger.info(f"=== –ù–ê–ß–ê–õ–û view_broadcast ===")
        logger.info(f"Callback data: {callback.data}")
        logger.info(f"User ID: {callback.from_user.id}")
        
        broadcast_id = int(callback.data.split("_")[-1])
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω ID —Ä–∞—Å—Å—ã–ª–∫–∏: {broadcast_id}")
        
        broadcast = await session.get(Broadcast, broadcast_id)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞: {broadcast}")
        
        if not broadcast:
            logger.warning(f"–†–∞—Å—Å—ã–ª–∫–∞ —Å ID {broadcast_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
        status_text = {
            "DRAFT": "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫",
            "SENDING": "üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è",
            "SENT": "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
            "CANCELLED": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
        }.get(broadcast.status, broadcast.status)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏
        audience_text = {
            "all": "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            "active": "üë§ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"
        }.get(broadcast.audience_type, broadcast.audience_type)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
        text = (
            f"<b>üì® –†–∞—Å—Å—ã–ª–∫–∞:</b> <b>{broadcast.title}</b>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
            f"<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {audience_text}\n"
            f"<b>–°–æ–∑–¥–∞–Ω–∞:</b> {broadcast.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        )
        
        if broadcast.sent_at:
            text += f"<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:</b> {broadcast.sent_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        if broadcast.sent_count:
            text += f"<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {broadcast.sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        
        text += f"\n–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n{broadcast.content}"
        logger.info("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = []
        
        # –ï—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        if broadcast.status == "DRAFT":
            keyboard.append([
                InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"broadcast_send_{broadcast.id}")
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"broadcast_delete_{broadcast.id}")
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="broadcast_back_to_broadcasts")
        ])
        logger.info("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞")
        
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            if broadcast.image_url:
                logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
                await callback.message.delete()
                await callback.message.answer_photo(
                    photo=broadcast.image_url,
                    caption=text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    parse_mode="HTML"
                )
            else:
                logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                await callback.message.edit_text(
                    text=text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    parse_mode="HTML"
                )
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise
        
        await callback.answer()
        logger.info("=== –ö–û–ù–ï–¶ view_broadcast ===")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)


@router.callback_query(F.data == "broadcast_cancel", is_broadcast_callback)
async def cancel_broadcast_creation(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    await state.clear()
    broadcasts = await session.execute(
        select(Broadcast).order_by(Broadcast.created_at.desc())
    )
    broadcasts = broadcasts.scalars().all()
    
    await callback.message.edit_text(
        "<b>üì® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>\n\n"
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_broadcast_management_keyboard(broadcasts),
        parse_mode="HTML"
    )
    await callback.answer() 