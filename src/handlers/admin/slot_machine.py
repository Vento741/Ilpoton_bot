# src/handlers/admin/slot_machine.py

from datetime import datetime, timedelta
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from sqlalchemy.orm import selectinload
from loguru import logger

from config.settings import settings
from database.models import Prize, User, SlotSpin
from keyboards.admin.admin import get_admin_inline_keyboard
from src.handlers.admin.appointments import STATUS_TRANSLATIONS

# –î–æ–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
STATUS_TRANSLATIONS.update({
    "PENDING": "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
    "CONFIRMED": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
    "REJECTED": "–û—Ç–∫–ª–æ–Ω–µ–Ω",
    "USED": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
})

router = Router(name='admin_slot_machine_router')

SLOT_MACHINE_PREFIXES = [
    "admin_slot_machine_menu",
    "admin_slot_view_prize_",
    "admin_slot_confirm_",
    "admin_slot_reject_",
    "admin_slot_reject_reason_",
    "admin_slot_stats",
    "admin_slot_prizes_page_",
    "admin_slot_archive_",
    "admin_slot_confirmed_prizes_",
    "admin_slot_used_prizes_",
    "admin_slot_rejected_prizes_",
    "admin_slot_mark_used_",
    "admin_slot_prize_stats"
]

def is_slot_callback(callback: CallbackQuery) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ callback –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–ª–æ—Ç-–º–∞—à–∏–Ω–æ–π
    """
    return any(callback.data.startswith(prefix) for prefix in SLOT_MACHINE_PREFIXES)

router.callback_query.filter(is_slot_callback)

def admin_filter(callback: CallbackQuery) -> bool:
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    return callback.from_user.id in settings.admin_ids

@router.callback_query(F.data == "admin_slot_machine_menu")
async def manage_slot_machine(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω–æ–π
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_spins = await session.scalar(select(func.count(Prize.id)))
        pending_prizes = await session.scalar(
            select(func.count(Prize.id))
            .where(Prize.status == "PENDING")
        )
        confirmed_prizes = await session.scalar(
            select(func.count(Prize.id))
            .where(Prize.status == "CONFIRMED")
        )
        used_prizes = await session.scalar(
            select(func.count(Prize.id))
            .where(Prize.status == "USED")
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–∏–∑–æ–≤
        recent_prizes = await session.execute(
            select(Prize)
            .options(selectinload(Prize.user))
            .order_by(Prize.created_at.desc())
            .limit(5)
        )
        recent_prizes = recent_prizes.scalars().all()

        text = (
            "<b>üé∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–æ–π</b>\n\n"
            f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∏–≥—Ä: {total_spins}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {pending_prizes}\n"
            f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø—Ä–∏–∑–æ–≤: {confirmed_prizes}\n"
            f"‚Ä¢ –í—ã–¥–∞–Ω–æ –ø—Ä–∏–∑–æ–≤: {used_prizes}\n\n"
            "<b>üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–∑—ã:</b>\n"
        )

        if recent_prizes:
            for prize in recent_prizes:
                # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                status_emoji = {
                    "PENDING": "‚è≥",
                    "CONFIRMED": "‚úÖ",
                    "REJECTED": "‚ùå",
                    "USED": "üéâ"
                }.get(prize.status, "‚ùì")
                
                text += (
                    f"{status_emoji} {prize.user.full_name} - {prize.prize_name}\n"
                    f"–ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {prize.combination}\n"
                    f"–°—Ç–∞—Ç—É—Å: {STATUS_TRANSLATIONS[prize.status]}\n\n"
                )
        else:
            text += "–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–∑–æ–≤\n"

        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚è≥ –ü—Ä–∏–∑—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                    callback_data="admin_slot_prizes_page_1"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã",
                    callback_data="admin_slot_confirmed_prizes_1"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üéâ –í—ã–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã",
                    callback_data="admin_slot_used_prizes_1"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã",
                    callback_data="admin_slot_rejected_prizes_1"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data="admin_slot_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data="back_to_admin"
                )
            ]
        ]

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω–æ–π: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω–æ–π",
            reply_markup=get_admin_inline_keyboard()
        )

@router.callback_query(F.data.startswith("admin_slot_prizes_page_"))
async def view_prizes_list(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    try:
        page = int(callback.data.split("_")[-1])
        items_per_page = 5

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤
        total_prizes = await session.scalar(
            select(func.count(Prize.id))
            .where(Prize.status == "PENDING")
        )

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_pages = (total_prizes + items_per_page - 1) // items_per_page

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        prizes = await session.execute(
            select(Prize)
            .where(Prize.status == "PENDING")
            .options(selectinload(Prize.user))
            .order_by(Prize.created_at.desc())
            .offset((page - 1) * items_per_page)
            .limit(items_per_page)
        )
        prizes = prizes.scalars().all()

        if not prizes:
            text = "<b>üéÅ –ù–µ—Ç –ø—Ä–∏–∑–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>"
            keyboard = [[
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data="admin_slot_machine_menu"
                )
            ]]
        else:
            text = "<b>üéÅ –ü—Ä–∏–∑—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b>\n\n"
            keyboard = []

            for prize in prizes:
                text += (
                    f"üë§ #{prize.id} {prize.user.full_name}\n"
                    f"üéÅ –ü—Ä–∏–∑: {prize.prize_name}\n"
                    f"üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {prize.combination}\n"
                    f"üìÖ {prize.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                )
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å #{prize.id}",
                        callback_data=f"admin_slot_view_prize_{prize.id}"
                    )
                ])

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            nav_buttons = []
            if page > 1:
                nav_buttons.append(InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"admin_slot_prizes_page_{page-1}"
                ))
            nav_buttons.append(InlineKeyboardButton(
                text=f"üìÑ {page}/{total_pages}",
                callback_data="ignore"
            ))
            if page < total_pages:
                nav_buttons.append(InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=f"admin_slot_prizes_page_{page+1}"
                ))
            if nav_buttons:
                keyboard.append(nav_buttons)

            keyboard.append([
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data="admin_slot_machine_menu"
                )
            ])

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–∏–∑–æ–≤: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑–æ–≤",
            reply_markup=get_admin_inline_keyboard()
        )

@router.callback_query(F.data.startswith("admin_slot_view_prize_"))
async def view_prize_details(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∑–µ
    """
    try:
        prize_id = int(callback.data.split("_")[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        result = await session.execute(
            select(Prize)
            .where(Prize.id == prize_id)
            .options(selectinload(Prize.user))
        )
        prize = result.scalar_one_or_none()
        
        if not prize:
            await callback.answer("‚ùå –ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–∑–µ
        text = (
            f"<b>üéÅ –ü—Ä–∏–∑ #{prize.id}</b>\n\n"
            f"<b>üë§ –ò–≥—Ä–æ–∫:</b> {prize.user.full_name}\n"
            f"<b>üÜî ID –∏–≥—Ä–æ–∫–∞:</b> {prize.user.telegram_id}\n"
            f"<b>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</b> {prize.user.phone_number or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"<b>üéÅ –ü—Ä–∏–∑:</b> {prize.prize_name}\n"
            f"<b>üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è:</b> {prize.combination}\n"
            f"<b>üìÖ –ü–æ–ª—É—á–µ–Ω:</b> {prize.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"<b>üìä –°—Ç–∞—Ç—É—Å:</b> {STATUS_TRANSLATIONS[prize.status]}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        if prize.status in ["CONFIRMED", "REJECTED"]:
            message_text = text + f"\nüìù <b>–î–∞—Ç–∞ {STATUS_TRANSLATIONS[prize.status].lower()}:</b> {prize.confirmed_at.strftime('%d.%m.%Y %H:%M')}\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ
            admin_result = await session.execute(
                select(User).where(User.id == prize.confirmed_by)
            )
            admin = admin_result.scalar_one_or_none()
            admin_name = admin.full_name if admin else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            
            if prize.status == "CONFIRMED":
                message_text += f"\nüéâ <b>–ü—Ä–∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n"
                message_text += f"üë®‚Äçüíº –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª: {admin_name}\n"
                message_text += f"üìÖ –î–∞—Ç–∞: {prize.confirmed_at.strftime('%d.%m.%Y %H:%M')}\n"
            else:
                message_text += f"\n‚ùå <b>–ü—Ä–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω!</b>\n"
                message_text += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {prize.reject_reason}\n"
                message_text += f"üë®‚Äçüíº –û—Ç–∫–ª–æ–Ω–∏–ª: {admin_name}\n"
                message_text += f"üìÖ –î–∞—Ç–∞: {prize.confirmed_at.strftime('%d.%m.%Y %H:%M')}\n"
        else:
            message_text = text

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = []
        if prize.status == "PENDING":
            keyboard.extend([
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data=f"admin_slot_confirm_{prize.id}"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                        callback_data=f"admin_slot_reject_{prize.id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫—É",
                        url=f"tg://user?id={prize.user.telegram_id}"
                    )
                ]
            ])
        elif prize.status == "CONFIRMED":
            keyboard.extend([
                [
                    InlineKeyboardButton(
                        text="üéâ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω—ã–π",
                        callback_data=f"admin_slot_mark_used_{prize.id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—é",
                        url=f"tg://user?id={prize.user.telegram_id}"
                    )
                ]
            ])
        else:
            keyboard.append([
                InlineKeyboardButton(
                    text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—é",
                    url=f"tg://user?id={prize.user.telegram_id}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        back_callback = {
            "PENDING": "admin_slot_prizes_page_1",
            "CONFIRMED": "admin_slot_confirmed_prizes_1",
            "REJECTED": "admin_slot_rejected_prizes_1",
            "USED": "admin_slot_used_prizes_1"
        }.get(prize.status, "admin_slot_machine_menu")

        keyboard.append([
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data=back_callback
            )
        ])

        await callback.message.edit_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏–∑–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–∑–µ",
            reply_markup=get_admin_inline_keyboard()
        )

@router.callback_query(F.data.startswith("admin_slot_confirm_"))
async def confirm_prize(callback: CallbackQuery, session: AsyncSession, bot: Bot) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–∏–≥—Ä—ã—à –ø—Ä–∏–∑–∞
    """
    try:
        prize_id = int(callback.data.split("_")[-1])  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑
        result = await session.execute(
            select(Prize)
            .where(Prize.id == prize_id)
            .options(selectinload(Prize.user))
        )
        prize = result.scalar_one_or_none()
        
        if not prize:
            await callback.answer("‚ùå –ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        if prize.status != "PENDING":
            await callback.answer(
                f"‚ùå –ü—Ä–∏–∑ —É–∂–µ {STATUS_TRANSLATIONS[prize.status].lower()}",
                show_alert=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        admin = admin_result.scalar_one_or_none()
        
        if not admin:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–∑–∞
        prize.status = "CONFIRMED"
        prize.confirmed_at = datetime.now()
        prize.confirmed_by = admin.id
        await session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
        try:
            notification = (
                f"üéâ <b>–í–∞—à –ø—Ä–∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
                f"<b>–ü—Ä–∏–∑:</b> {prize.prize_name}\n"
                f"<b>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è:</b> {prize.combination}\n\n"
                f"<b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞:</b>\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –ø–æ –∞–¥—Ä–µ—Å—É: <b>—É–ª.–ö–∞–ª–∏–Ω–∏–Ω–∞ 128–ê –∫2</b>\n"
                f"–ü—Ä–∏ —Å–µ–±–µ –∏–º–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π –ª–∏—á–Ω–æ—Å—Ç—å.\n\n"
                f"<i>–ü—Ä–∏–∑ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π.</i>"
            )
            await bot.send_message(
                chat_id=prize.user.telegram_id,
                text=notification,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É: {e}")

        await callback.answer("‚úÖ –ü—Ä–∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–∏–∑–æ–≤
        await view_prizes_list(callback, session)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞",
            reply_markup=get_admin_inline_keyboard()
        )

@router.callback_query(F.data.startswith("admin_slot_reject_"), ~F.data.startswith("admin_slot_reject_reason_"))
async def reject_prize(callback: CallbackQuery, session: AsyncSession, bot: Bot) -> None:
    """
    –û—Ç–∫–ª–æ–Ω—è–µ—Ç –≤—ã–∏–≥—Ä—ã—à –ø—Ä–∏–∑–∞
    """
    try:
        prize_id = int(callback.data.split("_")[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑
        result = await session.execute(
            select(Prize)
            .where(Prize.id == prize_id)
            .options(selectinload(Prize.user))
        )
        prize = result.scalar_one_or_none()
        
        if not prize:
            await callback.answer("‚ùå –ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        if prize.status != "PENDING":
            await callback.answer(
                f"‚ùå –ü—Ä–∏–∑ —É–∂–µ {STATUS_TRANSLATIONS[prize.status].lower()}",
                show_alert=True
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        text = (
            f"<b>‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–∑–∞ #{prize.id}</b>\n\n"
            f"<b>üë§ –ò–≥—Ä–æ–∫:</b> {prize.user.full_name}\n"
            f"<b>üéÅ –ü—Ä–∏–∑:</b> {prize.prize_name}\n"
            f"<b>üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è:</b> {prize.combination}\n\n"
            f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</b>"
        )

        keyboard = [
            [
                InlineKeyboardButton(
                    text="üö´ –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è",
                    callback_data=f"admin_slot_reject_reason_{prize_id}_invalid_combination"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚õîÔ∏è –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–µ",
                    callback_data=f"admin_slot_reject_reason_{prize_id}_fraud"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–±–æ–π",
                    callback_data=f"admin_slot_reject_reason_{prize_id}_technical"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞",
                    callback_data=f"admin_slot_view_prize_{prize_id}"
                )
            ]
        ]

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞",
            reply_markup=get_admin_inline_keyboard()
        )

@router.callback_query(F.data.startswith("admin_slot_reject_reason_"))
async def reject_prize_with_reason(callback: CallbackQuery, session: AsyncSession, bot: Bot) -> None:
    """
    –û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø—Ä–∏–∑ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π
    """
    try:
        # –ü–∞—Ä—Å–∏–º ID –ø—Ä–∏–∑–∞ –∏ –ø—Ä–∏—á–∏–Ω—É –∏–∑ callback_data
        # –§–æ—Ä–º–∞—Ç: admin_slot_reject_reason_1_fraud
        parts = callback.data.split("_")
        if len(parts) < 6:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        try:
            prize_id = int(parts[4])  # –ø—è—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ID
            reason = parts[5]    # —à–µ—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç - –ø—Ä–∏—á–∏–Ω–∞
        except (IndexError, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ ID –ø—Ä–∏–∑–∞: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        # –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –ø—Ä–∏—á–∏–Ω
        reason_texts = {
            "invalid_combination": "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è",
            "fraud": "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–µ",
            "technical": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–±–æ–π"
        }
        
        if reason not in reason_texts:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {reason}")
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑
        result = await session.execute(
            select(Prize)
            .where(Prize.id == prize_id)
            .options(selectinload(Prize.user))
        )
        prize = result.scalar_one_or_none()
        
        if not prize:
            await callback.answer("‚ùå –ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        admin = admin_result.scalar_one_or_none()
        
        if not admin:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–∑–∞
        prize.status = "REJECTED"
        prize.confirmed_at = datetime.now()
        prize.confirmed_by = admin.id
        prize.reject_reason = reason_texts.get(reason, "–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞")
        await session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
        try:
            notification = (
                f"‚ùå <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø—Ä–∏–∑ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</b>\n\n"
                f"<b>–ü—Ä–∏–∑:</b> {prize.prize_name}\n"
                f"<b>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è:</b> {prize.combination}\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason_texts.get(reason, '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
                f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            await bot.send_message(
                chat_id=prize.user.telegram_id,
                text=notification,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É: {e}")

        await callback.answer("‚ùå –ü—Ä–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω", show_alert=True)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–∏–∑–æ–≤
        new_callback = CallbackQuery(
            id=callback.id,
            from_user=callback.from_user,
            chat_instance=callback.chat_instance,
            message=callback.message,
            data="admin_slot_prizes_page_1"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–∏–∑–æ–≤
        await view_prizes_list(new_callback, session)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞",
            reply_markup=get_admin_inline_keyboard()
        )

@router.callback_query(F.data == "admin_slot_stats")
async def view_slot_stats(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã slot_spins
        total_spins = await session.scalar(select(func.count(SlotSpin.id)))
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–∏–≥—Ä—ã—à–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã prizes
        total_wins = await session.scalar(
            select(func.count(Prize.id))
            .where(Prize.status.in_(["PENDING", "CONFIRMED", "USED"]))
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        pending_prizes = await session.scalar(
            select(func.count(Prize.id))
            .where(Prize.status == "PENDING")
        )
        confirmed_prizes = await session.scalar(
            select(func.count(Prize.id))
            .where(Prize.status == "CONFIRMED")
        )
        rejected_prizes = await session.scalar(
            select(func.count(Prize.id))
            .where(Prize.status == "REJECTED")
        )
        used_prizes = await session.scalar(
            select(func.count(Prize.id))
            .where(Prize.status == "USED")
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        day_ago = datetime.now() - timedelta(days=1)
        spins_24h = await session.scalar(
            select(func.count(SlotSpin.id))
            .where(SlotSpin.created_at >= day_ago)
        )
        wins_24h = await session.scalar(
            select(func.count(Prize.id))
            .where(
                Prize.created_at >= day_ago,
                Prize.status.in_(["PENDING", "CONFIRMED", "USED"])
            )
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        week_ago = datetime.now() - timedelta(days=7)
        spins_week = await session.scalar(
            select(func.count(SlotSpin.id))
            .where(SlotSpin.created_at >= week_ago)
        )
        wins_week = await session.scalar(
            select(func.count(Prize.id))
            .where(
                Prize.created_at >= week_ago,
                Prize.status.in_(["PENDING", "CONFIRMED", "USED"])
            )
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–π –∏–≥—Ä—ã
        first_game_result = await session.execute(
            select(SlotSpin.created_at)
            .order_by(SlotSpin.created_at.asc())
            .limit(1)
        )
        first_game_date = first_game_result.scalar_one_or_none()
        
        if first_game_date:
            days_since_start = (datetime.now() - first_game_date).days
            avg_spins_per_day = total_spins / max(days_since_start, 1)
            avg_wins_per_day = total_wins / max(days_since_start, 1)
        else:
            days_since_start = 0
            avg_spins_per_day = 0
            avg_wins_per_day = 0

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        text = (
            "<b>üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã</b>\n\n"
            f"<b>üéÆ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∏–≥—Ä: {total_spins}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–µ–π: {total_wins}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–≥—Ä—ã
        if total_spins > 0:
            text += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π: {(total_wins/total_spins*100):.1f}%\n"
        else:
            text += "‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π: 0%\n"
            
        text += (
            f"‚Ä¢ –î–Ω–µ–π —Ä–∞–±–æ—Ç—ã: {days_since_start}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –∏–≥—Ä –≤ –¥–µ–Ω—å: {avg_spins_per_day:.1f}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –≤—ã–∏–≥—Ä—ã—à–µ–π –≤ –¥–µ–Ω—å: {avg_wins_per_day:.1f}\n\n"
            
            f"<b>üìà –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n"
            f"‚Ä¢ –ò–≥—Ä: {spins_24h}\n"
            f"‚Ä¢ –í—ã–∏–≥—Ä—ã—à–µ–π: {wins_24h}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π –∑–∞ 24 —á–∞—Å–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–≥—Ä—ã
        if spins_24h > 0:
            text += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π: {(wins_24h/spins_24h*100):.1f}%\n\n"
        else:
            text += "‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π: 0%\n\n"
            
        text += (
            f"<b>üìä –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:</b>\n"
            f"‚Ä¢ –ò–≥—Ä: {spins_week}\n"
            f"‚Ä¢ –í—ã–∏–≥—Ä—ã—à–µ–π: {wins_week}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–≥—Ä—ã
        if spins_week > 0:
            text += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π: {(wins_week/spins_week*100):.1f}%\n\n"
        else:
            text += "‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π: 0%\n\n"
            
        text += (
            f"<b>üéÅ –°—Ç–∞—Ç—É—Å –ø—Ä–∏–∑–æ–≤:</b>\n"
            f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {pending_prizes}\n"
            f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {confirmed_prizes}\n"
            f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_prizes}\n"
            f"‚Ä¢ –í—ã–¥–∞–Ω–æ: {used_prizes}\n"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–∑–∞–º",
                    callback_data="admin_slot_prize_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="admin_slot_machine_menu"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@router.callback_query(F.data == "admin_slot_prize_stats")
async def view_prize_stats(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–∑–∞–º
    """
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–∑–∞–º —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        prize_stats = await session.execute(
            select(
                Prize.prize_name,
                Prize.status,
                func.count(Prize.id).label('count')
            )
            .group_by(Prize.prize_name, Prize.status)
        )
        prize_stats = prize_stats.all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–∑–∞–º
        prize_breakdown = {}
        most_common_prize = {"name": "", "count": 0}
        most_issued_prize = {"name": "", "count": 0}
        
        for prize_name, status, count in prize_stats:
            if prize_name not in prize_breakdown:
                prize_breakdown[prize_name] = {
                    'total': 0,
                    'pending': 0,
                    'confirmed': 0,
                    'rejected': 0,
                    'used': 0
                }
            prize_breakdown[prize_name]['total'] += count
            if prize_breakdown[prize_name]['total'] > most_common_prize["count"]:
                most_common_prize["name"] = prize_name
                most_common_prize["count"] = prize_breakdown[prize_name]['total']
                
            if status == "PENDING":
                prize_breakdown[prize_name]['pending'] += count
            elif status == "CONFIRMED":
                prize_breakdown[prize_name]['confirmed'] += count
            elif status == "REJECTED":
                prize_breakdown[prize_name]['rejected'] += count
            elif status == "USED":
                prize_breakdown[prize_name]['used'] += count
                if prize_breakdown[prize_name]['used'] > most_issued_prize["count"]:
                    most_issued_prize["name"] = prize_name
                    most_issued_prize["count"] = prize_breakdown[prize_name]['used']

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–∏–∑–æ–≤
        text = (
            "<b>üéÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–∑–∞–º</b>\n\n"
            f"<b>üèÜ –¢–æ–ø –ø—Ä–∏–∑–æ–≤:</b>\n"
            f"‚Ä¢ –°–∞–º—ã–π —á–∞—Å—Ç—ã–π –ø—Ä–∏–∑: {most_common_prize['name']} ({most_common_prize['count']} —Ä–∞–∑)\n"
            f"‚Ä¢ –ß–∞—â–µ –≤—Å–µ–≥–æ –≤—ã–¥–∞–Ω: {most_issued_prize['name']} ({most_issued_prize['count']} —Ä–∞–∑)\n\n"
            f"<b>üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            "<b>üíé –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ —Ä–µ–º–æ–Ω—Ç 1500‚ÇΩ:</b>\n"
            f"{get_prize_stats(prize_breakdown, '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ —Ä–µ–º–æ–Ω—Ç 1500‚ÇΩ')}\n"
            "<b>üéâ –°–∫–∏–¥–∫–∞ 10% –Ω–∞ —Ç–æ–Ω–∏—Ä–æ–≤–∫—É:</b>\n"
            f"{get_prize_stats(prize_breakdown, '–°–∫–∏–¥–∫–∞ 10% –Ω–∞ —Ç–æ–Ω–∏—Ä–æ–≤–∫—É')}\n"
            "<b>üõ¢Ô∏è –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∑–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞:</b>\n"
            f"{get_prize_stats(prize_breakdown, '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∑–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞')}\n"
            "<b>üöó –ü–æ–ª–∏—Ä–æ–≤–∫–∞ —Ñ–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫:</b>\n"
            f"{get_prize_stats(prize_breakdown, '–ü–æ–ª–∏—Ä–æ–≤–∫–∞ —Ñ–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫')}\n"
            "<b>üéÅ –ê–≤—Ç–æ–ø–æ—Ä—Ñ—é–º–µ—Ä–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –≤ –ø–æ–¥–∞—Ä–æ–∫:</b>\n"
            f"{get_prize_stats(prize_breakdown, '–ê–≤—Ç–æ–ø–æ—Ä—Ñ—é–º–µ—Ä–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –≤ –ø–æ–¥–∞—Ä–æ–∫')}\n"
        )

        keyboard = [
            [
                InlineKeyboardButton(
                    text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data="admin_slot_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data="admin_slot_machine_menu"
                )
            ]
        ]

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–∑–æ–≤: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–∑–æ–≤",
            reply_markup=get_admin_inline_keyboard()
        )

def get_prize_stats(prize_breakdown: dict, prize_name: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–∑–∞
    """
    stats = prize_breakdown.get(prize_name, {
        'total': 0,
        'pending': 0,
        'confirmed': 0,
        'rejected': 0,
        'used': 0
    })
    
    success_rate = (stats['confirmed'] + stats['used']) / stats['total'] * 100 if stats['total'] > 0 else 0
    
    return (
        f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total']}\n"
        f"‚Ä¢ –û–∂–∏–¥–∞–µ—Ç: {stats['pending']}\n"
        f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {stats['confirmed']}\n"
        f"‚Ä¢ –í—ã–¥–∞–Ω–æ: {stats['used']}\n"
        f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']}\n"
        f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%"
    )

@router.callback_query(F.data.startswith("admin_slot_mark_used_"))
async def mark_prize_used(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    """
    –û—Ç–º–µ—á–∞–µ—Ç –ø—Ä–∏–∑ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π/–≤—ã–¥–∞–Ω–Ω—ã–π
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–∏–∑–∞ –∏–∑ callback_data
        prize_id = int(callback.data.split("_")[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∑–µ
        prize_result = await session.execute(
            select(Prize)
            .where(Prize.id == prize_id)
            .options(selectinload(Prize.user))
        )
        prize = prize_result.scalar_one_or_none()
        
        if not prize:
            await callback.answer("‚ùå –ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–∑–∞
        if prize.status != "CONFIRMED":
            await callback.answer(
                f"‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω—ã–π –ø—Ä–∏–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {prize.status}",
                show_alert=True
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        admin = admin_result.scalar_one_or_none()
        
        if not admin:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–∑–∞
        prize.status = "USED"
        prize.used_at = datetime.now()
        prize.admin_comment = f"–ü—Ä–∏–∑ –≤—ã–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin.full_name}"
        
        await session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(
                chat_id=prize.user.telegram_id,
                text=(
                    f"üéâ <b>–í–∞—à –ø—Ä–∏–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω!</b>\n\n"
                    f"<b>–ü—Ä–∏–∑:</b> {prize.prize_name}\n"
                    f"<b>–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:</b> {prize.used_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! –ñ–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞! üé∞"
                ),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {prize.user.telegram_id}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–∑–µ
        text = (
            f"‚úÖ <b>–ü—Ä–∏–∑ –≤—ã–¥–∞–Ω!</b>\n\n"
            f"üë§ –ò–≥—Ä–æ–∫: {prize.user.full_name}\n"
            f"üÜî ID: {prize.user.telegram_id}\n"
            f"üéÅ –ü—Ä–∏–∑: {prize.prize_name}\n"
            f"üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {prize.combination}\n"
            f"üìÖ –í—ã–¥–∞–Ω: {prize.used_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üë®‚Äçüíº –í—ã–¥–∞–ª: {admin.full_name}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—é",
                    url=f"tg://user?id={prize.user.telegram_id}"
                ),
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data="admin_slot_machine_menu"
                )
            ]
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –ü—Ä–∏–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω—ã–π!", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–∏–∑–∞ –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω–æ–≥–æ: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)
        await session.rollback()

@router.callback_query(F.data.startswith("admin_slot_confirmed_prizes_"))
async def view_confirmed_prizes(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    try:
        page = int(callback.data.split("_")[-1])
        items_per_page = 5

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤
        total_prizes = await session.scalar(
            select(func.count(Prize.id))
            .where(Prize.status == "CONFIRMED")
        )

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_pages = (total_prizes + items_per_page - 1) // items_per_page

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        prizes = await session.execute(
            select(Prize)
            .where(Prize.status == "CONFIRMED")
            .options(selectinload(Prize.user))
            .order_by(Prize.created_at.desc())
            .offset((page - 1) * items_per_page)
            .limit(items_per_page)
        )
        prizes = prizes.scalars().all()

        if not prizes:
            text = "<b>üéÅ –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤</b>"
            keyboard = [[
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data="admin_slot_machine_menu"
                )
            ]]
        else:
            text = "<b>‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã:</b>\n\n"
            keyboard = []

            for prize in prizes:
                text += (
                    f"üë§ #{prize.id} {prize.user.full_name}\n"
                    f"üéÅ –ü—Ä–∏–∑: {prize.prize_name}\n"
                    f"üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {prize.combination}\n"
                    f"üìÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {prize.confirmed_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                )
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å #{prize.id}",
                        callback_data=f"admin_slot_view_prize_{prize.id}"
                    )
                ])

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            nav_buttons = []
            if page > 1:
                nav_buttons.append(InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"admin_slot_confirmed_prizes_{page-1}"
                ))
            nav_buttons.append(InlineKeyboardButton(
                text=f"üìÑ {page}/{total_pages}",
                callback_data="ignore"
            ))
            if page < total_pages:
                nav_buttons.append(InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=f"admin_slot_confirmed_prizes_{page+1}"
                ))
            if nav_buttons:
                keyboard.append(nav_buttons)

            keyboard.append([
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data="admin_slot_machine_menu"
                )
            ])

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑–æ–≤",
            reply_markup=get_admin_inline_keyboard()
        )

@router.callback_query(F.data.startswith("admin_slot_used_prizes_"))
async def view_used_prizes(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    try:
        page = int(callback.data.split("_")[-1])
        items_per_page = 5

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤
        total_prizes = await session.scalar(
            select(func.count(Prize.id))
            .where(Prize.status == "USED")
        )

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_pages = (total_prizes + items_per_page - 1) // items_per_page

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        prizes = await session.execute(
            select(Prize)
            .where(Prize.status == "USED")
            .options(selectinload(Prize.user))
            .order_by(Prize.created_at.desc())
            .offset((page - 1) * items_per_page)
            .limit(items_per_page)
        )
        prizes = prizes.scalars().all()

        if not prizes:
            text = "<b>üéÅ –ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤</b>"
            keyboard = [[
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data="admin_slot_machine_menu"
                )
            ]]
        else:
            text = "<b>üéâ –í—ã–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã:</b>\n\n"
            keyboard = []

            for prize in prizes:
                text += (
                    f"üë§ #{prize.id} {prize.user.full_name}\n"
                    f"üéÅ –ü—Ä–∏–∑: {prize.prize_name}\n"
                    f"üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {prize.combination}\n"
                    f"üìÖ –í—ã–¥–∞–Ω: {prize.used_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                )
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å #{prize.id}",
                        callback_data=f"admin_slot_view_prize_{prize.id}"
                    )
                ])

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            nav_buttons = []
            if page > 1:
                nav_buttons.append(InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"admin_slot_used_prizes_{page-1}"
                ))
            nav_buttons.append(InlineKeyboardButton(
                text=f"üìÑ {page}/{total_pages}",
                callback_data="ignore"
            ))
            if page < total_pages:
                nav_buttons.append(InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=f"admin_slot_used_prizes_{page+1}"
                ))
            if nav_buttons:
                keyboard.append(nav_buttons)

            keyboard.append([
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data="admin_slot_machine_menu"
                )
            ])

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑–æ–≤",
            reply_markup=get_admin_inline_keyboard()
        )

@router.callback_query(F.data.startswith("admin_slot_rejected_prizes_"))
async def view_rejected_prizes(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    try:
        page = int(callback.data.split("_")[-1])
        items_per_page = 5

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤
        total_prizes = await session.scalar(
            select(func.count(Prize.id))
            .where(Prize.status == "REJECTED")
        )

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_pages = (total_prizes + items_per_page - 1) // items_per_page

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        prizes = await session.execute(
            select(Prize)
            .where(Prize.status == "REJECTED")
            .options(selectinload(Prize.user))
            .order_by(Prize.created_at.desc())
            .offset((page - 1) * items_per_page)
            .limit(items_per_page)
        )
        prizes = prizes.scalars().all()

        if not prizes:
            text = "<b>üéÅ –ù–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤</b>"
            keyboard = [[
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data="admin_slot_machine_menu"
                )
            ]]
        else:
            text = "<b>‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã:</b>\n\n"
            keyboard = []

            for prize in prizes:
                text += (
                    f"üë§ #{prize.id} {prize.user.full_name}\n"
                    f"üéÅ –ü—Ä–∏–∑: {prize.prize_name}\n"
                    f"üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {prize.combination}\n"
                    f"üìÖ –û—Ç–∫–ª–æ–Ω–µ–Ω: {prize.confirmed_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìù –ü—Ä–∏—á–∏–Ω–∞: {prize.reject_reason}\n\n"
                )
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å #{prize.id}",
                        callback_data=f"admin_slot_view_prize_{prize.id}"
                    )
                ])

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            nav_buttons = []
            if page > 1:
                nav_buttons.append(InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"admin_slot_rejected_prizes_{page-1}"
                ))
            nav_buttons.append(InlineKeyboardButton(
                text=f"üìÑ {page}/{total_pages}",
                callback_data="ignore"
            ))
            if page < total_pages:
                nav_buttons.append(InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=f"admin_slot_rejected_prizes_{page+1}"
                ))
            if nav_buttons:
                keyboard.append(nav_buttons)

            keyboard.append([
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data="admin_slot_machine_menu"
                )
            ])

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑–æ–≤",
            reply_markup=get_admin_inline_keyboard()
        ) 