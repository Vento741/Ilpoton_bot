# src/handlers/admin/services.py

from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from loguru import logger
from datetime import datetime

from config.settings import settings
from database.models import Service, Appointment
from keyboards.admin.admin import get_services_management_keyboard, get_admin_inline_keyboard, get_service_edit_keyboard, get_service_view_keyboard, get_back_to_edit_keyboard
from states.admin import ServiceStates
from core.utils.logger import log_error
from core.utils.image_handler import delete_photo, save_photo_to_disk

router = Router(name='admin_services')

SERVICE_PREFIXES = [
    "add_service",
    "back_to_admin",
    "edit_service_",
    "edit_field_",
    "back_to_services",
    "delete_service_",
    "view_all_services",
    "view_service_",
    "back_to_service_edit",
    "manage_services",
    "view_archived_services",
    "process_edit_service_photo"
]

def admin_filter(message: Message | CallbackQuery) -> bool:
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    if isinstance(message, Message):
        user_id = message.from_user.id
    else:  # CallbackQuery
        user_id = message.from_user.id
        
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.debug(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {settings.admin_ids}")
    return user_id in settings.admin_ids

def is_service_callback(callback: CallbackQuery) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ callback –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —É—Å–ª—É–≥–∞–º–∏
    """
    return any(callback.data.startswith(prefix) for prefix in SERVICE_PREFIXES)

@router.message(F.text == "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏", admin_filter)
async def services_management(message: Message, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏
    """
    try:
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –æ—Ç–∫—Ä—ã–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏")
        services = await session.execute(
            select(Service).where(
                Service.is_active == True,
                Service.is_archived == False
            )
        )
        services = services.scalars().all()
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(services)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥")

        keyboard = get_services_management_keyboard(services)
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard.inline_keyboard}")

        await message.answer(
            "<b>üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        log_error(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å–ª—É–≥")

@router.callback_query(F.data == "manage_services", admin_filter, is_service_callback)
async def manage_services(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏
    """
    try:
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏")
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏
        services = await session.execute(select(Service))
        services = services.scalars().all()
        
        await callback.message.edit_text(
            "<b>üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_services_management_keyboard(services),
            parse_mode="HTML"
        )
    except Exception as e:
        log_error(e)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å–ª—É–≥",
            reply_markup=get_admin_inline_keyboard()
        )

@router.callback_query(F.data == "add_service", admin_filter, is_service_callback)
async def start_add_service(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
    """
    try:
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏. Callback data: {callback.data}")
        await callback.answer("–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏")
        await state.set_state(ServiceStates.adding_name)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:")
    except Exception as e:
        log_error(e)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏",
            reply_markup=get_services_management_keyboard([])
        )


@router.callback_query(F.data == "back_to_admin", admin_filter, is_service_callback)
async def back_to_admin_menu(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    try:
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. Callback data: {callback.data}")
        await callback.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await state.clear()
        await callback.message.edit_text(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_inline_keyboard()
        )
    except Exception as e:
        log_error(e)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_admin_inline_keyboard()
        )


@router.callback_query(F.data.startswith("edit_service_"), is_service_callback)
async def edit_service(callback: CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏
    """
    try:
        service_id = int(callback.data.split("_")[2])
        service = await session.get(Service, service_id)
        
        if not service:
            await callback.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        await state.set_state(ServiceStates.editing)
        await state.update_data(service_id=service_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        image_info = "–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"
        if service.image_id:
            image_info = "–∑–∞–≥—Ä—É–∂–µ–Ω–æ"
        
        service_info = (
            f"<b>üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {service.name}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {service.description}\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –æ—Ç {service.price}‚ÇΩ\n"
            f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> –æ—Ç {service.duration} –º–∏–Ω.\n"
            f"<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {image_info}\n\n"
            "<b>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?</b>"
        )

        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                service_info,
                reply_markup=get_service_edit_keyboard()
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ),
            # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await callback.message.delete()
            except Exception as delete_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_error}")
            
            await callback.message.answer(
                service_info,
                reply_markup=get_service_edit_keyboard()
            )
            
    except Exception as e:
        log_error(e)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏",
            reply_markup=get_services_management_keyboard([])
        )


@router.callback_query(F.data.startswith("edit_field_"), ServiceStates.editing, is_service_callback)
async def process_edit_field_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    field = callback.data.split("_")[2]
    await state.update_data(editing_field=field)
    
    field_messages = {
        "name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:",
        "description": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:",
        "price": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (–≤ —Ä—É–±–ª—è—Ö):",
        "duration": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):",
        "image": "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —É—Å–ª—É–≥–∏:"
    }
    
    field_states = {
        "name": ServiceStates.entering_name,
        "description": ServiceStates.entering_description,
        "price": ServiceStates.entering_price,
        "duration": ServiceStates.entering_duration,
        "image": ServiceStates.uploading_photo
    }
    
    # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback —Å –ø–æ–ª–µ–º: {field}")
    logger.debug(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ field_messages: {list(field_messages.keys())}")
    logger.debug(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ field_states: {list(field_states.keys())}")
    
    await state.set_state(field_states[field])
    await callback.message.edit_text(
        field_messages[field],
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_services")]
        ])
    )


@router.callback_query(F.data == "back_to_services", is_service_callback)
async def back_to_services_list(callback: CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥
    """
    try:
        await state.clear()
        services = await session.execute(select(Service))
        services = services.scalars().all()
        
        message_text = (
            "<b>üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏</b>\n\n"
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        )
        
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                message_text,
                reply_markup=get_services_management_keyboard(services),
                parse_mode="HTML"
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ),
            # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await callback.message.delete()
            except Exception as delete_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_error}")
            
            await callback.message.answer(
                message_text,
                reply_markup=get_services_management_keyboard(services),
                parse_mode="HTML"
            )
            
    except Exception as e:
        log_error(e)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥",
            reply_markup=get_services_management_keyboard([])
        )


@router.message(ServiceStates.adding_name, admin_filter)
async def process_add_name(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
    """
    try:
        await state.update_data(name=message.text)
        await state.set_state(ServiceStates.adding_description)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:")
    except Exception as e:
        log_error(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏")


@router.message(ServiceStates.adding_description, admin_filter)
async def process_add_description(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
    """
    try:
        await state.update_data(description=message.text)
        await state.set_state(ServiceStates.adding_price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (–≤ —Ä—É–±–ª—è—Ö):")
    except Exception as e:
        log_error(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥–∏")


@router.message(ServiceStates.adding_price, admin_filter)
async def process_add_price(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
    """
    try:
        price_text = message.text.lower().replace('–æ—Ç', '').strip()
        
        if not price_text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ –û—Ç 1000):")
            return
            
        await state.update_data(price=int(price_text))
        await state.set_state(ServiceStates.adding_duration)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):")
    except Exception as e:
        log_error(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏")


@router.message(ServiceStates.adding_duration, admin_filter)
async def process_add_duration(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
    """
    try:
        duration_text = message.text.lower().replace('–æ—Ç', '').strip()
        
        if not duration_text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30 –∏–ª–∏ –û—Ç 30):")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(duration=int(duration_text))
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
        await state.set_state(ServiceStates.uploading_photo)
        await message.answer(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —É—Å–ª—É–≥–∏:",
            reply_markup=get_back_to_edit_keyboard()
        )
        
    except Exception as e:
        log_error(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏")


@router.message(ServiceStates.uploading_photo, F.photo, admin_filter)
async def process_add_service_photo(message: Message, state: FSMContext, session: AsyncSession, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ service_id –≤ –¥–∞–Ω–Ω—ã—Ö
        if 'service_id' in data:
            # –ï—Å–ª–∏ –µ—Å—Ç—å service_id, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
            await process_edit_service_photo(message, state, session, bot)
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —É—Å–ª—É–≥—É –±–µ–∑ —Ñ–æ—Ç–æ
        new_service = Service(
            name=data['name'],
            description=data['description'],
            price=data['price'],
            duration=data['duration']
        )
        session.add(new_service)
        await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        image_path, file_id = await save_photo_to_disk(photo, bot, f"services/{new_service.id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
        new_service.image_path = image_path
        new_service.image_id = file_id
        await session.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
        service_info = (
            f"<b>‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {new_service.name}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {new_service.description}\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –æ—Ç {new_service.price}‚ÇΩ\n"
            f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> –æ—Ç {new_service.duration} –º–∏–Ω."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å–ª—É–≥–µ
        await message.answer_photo(
            photo=file_id,
            caption=service_info
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
        services = await session.execute(select(Service))
        services = services.scalars().all()
        await message.answer(
            "<b>üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏</b>\n\n"
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
            reply_markup=get_services_management_keyboard(services),
            parse_mode="HTML"
        )
        await state.clear()
        
    except Exception as e:
        log_error(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏")


@router.message(ServiceStates.uploading_photo, admin_filter)
async def process_add_service_no_photo(message: Message, state: FSMContext, session: AsyncSession) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏ –±–µ–∑ —Ñ–æ—Ç–æ"""
    try:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —É—Å–ª—É–≥–∏.\n"
            "–û—Ç–ø—Ä–∞–≤–∫–∞ URL –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.",
            reply_markup=get_back_to_edit_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏ –±–µ–∑ —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ:",
            reply_markup=get_back_to_edit_keyboard()
        )


@router.message(ServiceStates.entering_name, admin_filter)
async def process_edit_name(message: Message, state: FSMContext, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏
    """
    try:
        data = await state.get_data()
        service_id = data['service_id']
        service = await session.get(Service, service_id)
        
        if not service:
            await message.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            await state.clear()
            return
        
        service.name = message.text
        await session.commit()
        
        await show_updated_service(message, service, state, session)
    except Exception as e:
        log_error(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏")


@router.message(ServiceStates.entering_description, admin_filter)
async def process_edit_description(message: Message, state: FSMContext, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥–∏
    """
    try:
        data = await state.get_data()
        service_id = data['service_id']
        service = await session.get(Service, service_id)
        
        if not service:
            await message.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            await state.clear()
            return
        
        service.description = message.text
        await session.commit()
        
        await show_updated_service(message, service, state, session)
    except Exception as e:
        log_error(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥–∏")


@router.message(ServiceStates.entering_price, admin_filter)
async def process_edit_price(message: Message, state: FSMContext, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏
    """
    try:
        # –£–±–∏—Ä–∞–µ–º "–æ—Ç" –∏ –ø—Ä–æ–±–µ–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        price_text = message.text.lower().replace('–æ—Ç', '').strip()
        
        if not price_text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ –û—Ç 1000):")
            return
            
        data = await state.get_data()
        service_id = data['service_id']
        service = await session.get(Service, service_id)
        
        if not service:
            await message.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            await state.clear()
            return
        
        service.price = int(price_text)
        await session.commit()
        
        await show_updated_service(message, service, state, session)
    except Exception as e:
        log_error(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏")


@router.message(ServiceStates.entering_duration, admin_filter)
async def process_edit_duration(message: Message, state: FSMContext, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏
    """
    try:
        # –£–±–∏—Ä–∞–µ–º "–æ—Ç" –∏ –ø—Ä–æ–±–µ–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        duration_text = message.text.lower().replace('–æ—Ç', '').strip()
        
        if not duration_text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30 –∏–ª–∏ –û—Ç 30):")
            return
            
        data = await state.get_data()
        service_id = data['service_id']
        service = await session.get(Service, service_id)
        
        if not service:
            await message.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            await state.clear()
            return
        
        service.duration = int(duration_text)
        await session.commit()
        
        await show_updated_service(message, service, state, session)
    except Exception as e:
        log_error(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏")

@router.message(ServiceStates.uploading_photo, F.photo, admin_filter)
async def process_edit_service_photo(message: Message, state: FSMContext, session: AsyncSession, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        service_id = data.get('service_id')
        
        if not service_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥—É –∏–∑ –ë–î
        service = await session.get(Service, service_id)
        if not service:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if service.image_path:
            await delete_photo(service.image_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        image_path, file_id = await save_photo_to_disk(photo, bot, f"services/{service.id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
        service.image_path = image_path
        service.image_id = file_id
        await session.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
        service_info = (
            f"<b>‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {service.name}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {service.description}\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –æ—Ç {service.price}‚ÇΩ\n"
            f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> –æ—Ç {service.duration} –º–∏–Ω."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å–ª—É–≥–µ
        await message.answer_photo(
            photo=file_id,
            caption=service_info,
            reply_markup=get_service_edit_keyboard()
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.set_state(ServiceStates.editing)
        
    except Exception as e:
        log_error(e)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ",
            reply_markup=get_back_to_edit_keyboard()
        )

async def show_updated_service(message: Message, service: Service, state: FSMContext, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
    """
    await state.set_state(ServiceStates.editing)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    image_info = "–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"
    if service.image_id:
        image_info = "–∑–∞–≥—Ä—É–∂–µ–Ω–æ"
    
    service_info = (
        f"<b>‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {service.name}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {service.description}\n"
        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –æ—Ç {service.price}‚ÇΩ\n"
        f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> –æ—Ç {service.duration} –º–∏–Ω.\n"
        f"<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {image_info}\n\n"
        "<b>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?</b>"
    )
    
    await message.answer(service_info, reply_markup=get_service_edit_keyboard())


@router.callback_query(F.data.startswith("delete_service_"), admin_filter, is_service_callback)
async def delete_service(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
    """
    try:
        service_id = int(callback.data.split("_")[2])
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏ —Å ID {service_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥—É –≤–º–µ—Å—Ç–µ —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
        appointments_count = await session.scalar(
            select(func.count(Appointment.id)).where(Appointment.service_id == service_id)
        )
        
        service = await session.get(Service, service_id)
        if not service:
            logger.warning(f"–£—Å–ª—É–≥–∞ —Å ID {service_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await callback.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return

        service_name = service.name
        has_appointments = appointments_count > 0
        
        if has_appointments:
            logger.info(f"–ê—Ä—Ö–∏–≤–∞—Ü–∏—è —É—Å–ª—É–≥–∏ '{service_name}' (ID: {service_id}) –∏–∑-–∑–∞ –Ω–∞–ª–∏—á–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            # –ü–æ–º–µ—á–∞–µ–º —É—Å–ª—É–≥—É –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—É—é
            service.is_active = False
            service.is_archived = True
            service.updated_at = datetime.now()
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if service.image_path:
                await delete_photo(service.image_path)
                service.image_path = None
                service.image_id = None
                
            await session.commit()
            logger.info(f"–£—Å–ª—É–≥–∞ '{service_name}' —É—Å–ø–µ—à–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            
            await callback.answer(
                "‚ÑπÔ∏è –£—Å–ª—É–≥–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤, —Ç–∞–∫ –∫–∞–∫ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏",
                show_alert=True
            )
        else:
            logger.info(f"–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ '{service_name}' (ID: {service_id})")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if service.image_path:
                await delete_photo(service.image_path)
            
            # –£–¥–∞–ª—è–µ–º —É—Å–ª—É–≥—É –∏–∑ –ë–î
            await session.delete(service)
            await session.commit()
            logger.info(f"–£—Å–ª—É–≥–∞ '{service_name}' –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞")
            
            await callback.answer("‚úÖ –£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥
        services = await session.execute(
            select(Service).where(
                Service.is_active == True,
                Service.is_archived == False
            )
        )
        services = services.scalars().all()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥: {len(services)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥")
        
        status_text = "–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if has_appointments else "—É–¥–∞–ª–µ–Ω–∞"
        message_text = (
            f"<b>‚úÖ –£—Å–ª—É–≥–∞ '{service_name}' {status_text}!</b>\n\n"
            "<b>üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏</b>\n"
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        )

        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                message_text,
                reply_markup=get_services_management_keyboard(services),
                parse_mode="HTML"
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ),
            # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await callback.message.delete()
            except Exception as delete_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_error}")
            
            await callback.message.answer(
                message_text,
                reply_markup=get_services_management_keyboard(services),
                parse_mode="HTML"
            )
        
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ID —É—Å–ª—É–≥–∏: {str(e)}")
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Å–ª—É–≥–∏!", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏/–∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —É—Å–ª—É–≥–∏: {str(e)}")
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )


@router.callback_query(F.data == "view_all_services", is_service_callback)
async def view_all_services(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥
    """
    try:
        services = await session.execute(
            select(Service).where(
                Service.is_active == True,
                Service.is_archived == False
            )
        )
        services = services.scalars().all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        new_text = "<b>üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        keyboard = []
        
        if not services:
            new_text = "<b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥.</b>"
            new_keyboard = get_services_management_keyboard([])
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–∏
            for service in services:
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"{service.name} - –æ—Ç {service.price}‚ÇΩ",
                        callback_data=f"view_service_{service.id}"
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([
                InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_services")
            ])
            new_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
        current_text = callback.message.text
        current_markup = callback.message.reply_markup
        
        if current_text != new_text or current_markup != new_keyboard:
            await callback.message.edit_text(
                new_text,
                reply_markup=new_keyboard,
                parse_mode="HTML"
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await callback.answer()
            
    except Exception as e:
        log_error(e)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥",
            reply_markup=get_services_management_keyboard([]),
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("view_service_"), admin_filter, is_service_callback)
async def view_service_details(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
    """
    try:
        service_id = int(callback.data.split("_")[2])
        service = await session.get(Service, service_id)
        
        if not service:
            await callback.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        service_info = (
            f"<b>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ:</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {service.name}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {service.description}\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –æ—Ç {service.price}‚ÇΩ\n"
            f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> –æ—Ç {service.duration} –º–∏–Ω."
        )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        if service.image_id:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            await callback.message.answer_photo(
                photo=service.image_id,
                caption=service_info,
                reply_markup=get_service_view_keyboard(service.id)
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(
                service_info,
                reply_markup=get_service_view_keyboard(service.id)
            )
            
    except ValueError:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Å–ª—É–≥–∏!", show_alert=True)
    except Exception as e:
        log_error(e)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ",
            reply_markup=get_services_management_keyboard([]),
            parse_mode="HTML"
        )


@router.callback_query(F.data == "edit_field_image_url", admin_filter, is_service_callback)
async def process_edit_image_url(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ª—É–≥–∏
    """
    try:
        data = await state.get_data()
        service_id = data['service_id']
        service = await session.get(Service, service_id)
        
        if not service:
            await callback.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            await state.clear()
            return
        
        await state.set_state(ServiceStates.uploading_photo)
        await callback.message.edit_text(
            "<b>üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —É—Å–ª—É–≥–∏:</b>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_services")]
            ]),
            parse_mode="HTML"
        )
    except Exception as e:
        log_error(e)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            reply_markup=get_service_edit_keyboard(),
            parse_mode="HTML"
        )


@router.callback_query(F.data == "back_to_service_edit", admin_filter, is_service_callback)
async def back_to_service_edit(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —É—Å–ª—É–≥–∏
    """
    try:
        data = await state.get_data()
        service_id = data.get('service_id')
        
        if not service_id:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_services_management_keyboard([]),
                parse_mode="HTML"
            )
            await state.clear()
            return
        
        service = await session.get(Service, service_id)
        if not service:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=get_services_management_keyboard([])
            )
            await state.clear()
            return
        
        await state.set_state(ServiceStates.editing)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        image_info = "–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"
        if service.image_id:
            image_info = "–∑–∞–≥—Ä—É–∂–µ–Ω–æ"
        
        service_info = (
            f"<b>üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {service.name}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {service.description}\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –æ—Ç {service.price}‚ÇΩ\n"
            f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> –æ—Ç {service.duration} –º–∏–Ω.\n"
            f"<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {image_info}\n\n"
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
        )
        
        await callback.message.edit_text(
            service_info,
            reply_markup=get_service_edit_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —É—Å–ª—É–≥–∏: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é",
            reply_markup=get_services_management_keyboard([]),
            parse_mode="HTML"
        )
        await state.clear()

@router.callback_query(F.data == "view_archived_services", admin_filter, is_service_callback)
async def view_archived_services(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
        services = await session.execute(
            select(Service).where(
                Service.is_archived == True
            )
        )
        services = services.scalars().all()
        
        if not services:
            await callback.message.edit_text(
                "<b>üìÅ –í –∞—Ä—Ö–∏–≤–µ –Ω–µ—Ç —É—Å–ª—É–≥.</b>",
                reply_markup=get_services_management_keyboard([]),
                parse_mode="HTML"
            )
            return
        
        keyboard = []
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏
        for service in services:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é —É—Å–ª—É–≥–∏
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üìÅ {service.name} - –æ—Ç {service.price}‚ÇΩ",
                    callback_data=f"view_service_{service.id}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_services")
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        new_text = (
            "<b>üìÅ –ê—Ä—Ö–∏–≤ —É—Å–ª—É–≥:</b>\n"
            "<i>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</i>"
        )
        new_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
        current_text = callback.message.text
        current_markup = callback.message.reply_markup
        
        if current_text != new_text or current_markup != new_keyboard:
            await callback.message.edit_text(
                new_text,
                reply_markup=new_keyboard
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await callback.answer()
            
    except Exception as e:
        log_error(e)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–∞ —É—Å–ª—É–≥",
            reply_markup=get_services_management_keyboard([])
        )