# src/handlers/admin/price_requests.py

from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from loguru import logger


from database.models import PriceRequest, User
from states.admin import PriceRequestStates

router = Router(name='admin_price_requests')

# –î–æ–±–∞–≤–∏–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏
RESPONSE_TEMPLATES = {
    "base": (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å {service_name} –¥–ª—è {car_info} —Å–æ—Å—Ç–∞–≤–∏—Ç {price}‚ÇΩ.\n"
        "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    ),
    "range": (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å {service_name} –¥–ª—è {car_info} —Å–æ—Å—Ç–∞–≤–∏—Ç –æ—Ç {min_price}‚ÇΩ –¥–æ {max_price}‚ÇΩ.\n"
        "–¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–º–æ–∂–µ–º –Ω–∞–∑–≤–∞—Ç—å –ø–æ—Å–ª–µ –æ—Å–º–æ—Ç—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n"
        "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    ),
    "complex": (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
        "–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ {service_name} –Ω—É–∂–µ–Ω –æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n"
        "–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –∏ –º—ã —Å–¥–µ–ª–∞–µ–º —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –Ω–∞ –º–µ—Å—Ç–µ."
    )
}

# –í –Ω–∞—á–∞–ª–µ price_requests.py –¥–æ–±–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
PRICE_REQUEST_PREFIXES = [
    "manage_price_requests",
    "respond_price_",
    "template_",
    "custom_response_",
    "archive_price_",
    "edit_price_response_",
    "price_request_details_",
    "confirm_archive_",
    "send_prepared_response_",
    "edit_prepared_response_",
    "filter_pending_requests",
    "filter_answered_requests",
    "archived_price_requests",
    "archived_page_"
]

def is_price_request_callback(callback: CallbackQuery) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ callback –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    """
    return any(callback.data.startswith(prefix) for prefix in PRICE_REQUEST_PREFIXES)

@router.callback_query(F.data == "manage_price_requests", is_price_request_callback)
async def show_price_requests(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞–º–∏
    """
    try:
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞–º–∏")
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        pending_result = await session.execute(
            select(PriceRequest)
            .where(PriceRequest.status == "PENDING")
        )
        pending_count = len(pending_result.scalars().all())
        
        answered_result = await session.execute(
            select(PriceRequest)
            .where(PriceRequest.status == "ANSWERED")
        )
        answered_count = len(answered_result.scalars().all())
        
        archived_result = await session.execute(
            select(PriceRequest)
            .where(PriceRequest.status == "ARCHIVED")
        )
        archived_count = len(archived_result.scalars().all())
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        text = (
            "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:</b>\n\n"
            f"<b>üïê –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞:</b> {pending_count}\n"
            f"<b>‚úÖ –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ:</b> {answered_count}\n" 
            f"<b>üì¶ –í –∞—Ä—Ö–∏–≤–µ:</b> {archived_count}\n"
            f"<b>üìù –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {pending_count + answered_count + archived_count}\n\n"
            "<i>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</i>"
        )
        
        # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [
                InlineKeyboardButton(
                    text=f"üïê –û–∂–∏–¥–∞—é—â–∏–µ ({pending_count})",
                    callback_data="filter_pending_requests"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"‚úÖ –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ ({answered_count})",
                    callback_data="filter_answered_requests"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"üì¶ –ê—Ä—Ö–∏–≤ ({archived_count})",
                    callback_data="archived_price_requests"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data="back_to_admin"
                )
            ]
        ]
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_price_requests: {e}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                    callback_data="back_to_admin"
                )
            ]]),
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("respond_price_"), is_price_request_callback)
async def start_price_response(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å
    """
    try:
        request_id = int(callback.data.split("_")[2])
        
        result = await session.execute(
            select(PriceRequest)
            .where(PriceRequest.id == request_id)
            .options(
                selectinload(PriceRequest.user),
                selectinload(PriceRequest.service)
            )
        )
        request = result.scalar_one_or_none()
        
        if not request:
            await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(request_id=request_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∏ –æ—Ç–º–µ–Ω–æ–π
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üí∞ –¢–æ—á–Ω–∞—è —Ü–µ–Ω–∞",
                    callback_data=f"template_base_{request_id}"
                ),
                InlineKeyboardButton(
                    text="üìä –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω",
                    callback_data=f"template_range_{request_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîç –ù—É–∂–µ–Ω –æ—Å–º–æ—Ç—Ä",
                    callback_data=f"template_complex_{request_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –°–≤–æ–π –æ—Ç–≤–µ—Ç",
                    callback_data=f"custom_response_{request_id}"
                )
            ],
            [
                InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="manage_price_requests"
                )
            ]
        ]
        
        text = (
            f"<b>üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã #{request_id}</b>\n\n"
            f"<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> {request.user.full_name}\n"
            f"<b>üîß –£—Å–ª—É–≥–∞:</b> {request.service.name}\n"
            f"<b>üöò –ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> {request.car_info}\n\n"
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π:</b>"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("template_"), is_price_request_callback)
async def use_response_template(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞
    """
    try:
        template_type, request_id = callback.data.split("_")[1:3]
        request_id = int(request_id)
        
        result = await session.execute(
            select(PriceRequest)
            .where(PriceRequest.id == request_id)
            .options(
                selectinload(PriceRequest.user),
                selectinload(PriceRequest.service)
            )
        )
        request = result.scalar_one_or_none()
        
        if not request:
            await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–∞–±–ª–æ–Ω–∞
        await state.update_data(
            request_id=request_id,
            template_type=template_type
        )
        await state.set_state(PriceRequestStates.waiting_for_template_params)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–±–ª–æ–Ω–∞
        if template_type == "base":
            text = "<b>–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):</b>"
        elif template_type == "range":
            text = "<b>–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 7000):</b>"
        else:  # complex
            # –î–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –Ω—É–∂–Ω—ã
            await process_template_response(callback, state, session, None)
            return
            
        keyboard = [[
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=f"respond_price_{request_id}"
            )
        ]]
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(
    PriceRequestStates.waiting_for_template_params,
    F.text.regexp(r'^\d+(?:\s+\d+)?$')  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–Ω–æ –∏–ª–∏ –¥–≤–∞ —á–∏—Å–ª–∞
)
async def process_template_params(message: Message, state: FSMContext, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–∞–±–ª–æ–Ω–∞
    """
    try:
        data = await state.get_data()
        template_type = data.get("template_type")
        
        if template_type == "base":
            try:
                price = int(message.text.strip())
                if price <= 0:
                    await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º", parse_mode="HTML")
                    return
                await process_template_response(message, state, session, {"price": price})
            except ValueError:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ", parse_mode="HTML")
                return
                
        elif template_type == "range":
            try:
                min_price, max_price = map(int, message.text.strip().split())
                if min_price <= 0 or max_price <= 0:
                    await message.answer("‚ùå –¶–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏", parse_mode="HTML")
                    return
                if min_price >= max_price:
                    await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π", parse_mode="HTML")
                    return
                await process_template_response(
                    message, 
                    state, 
                    session, 
                    {"min_price": min_price, "max_price": max_price}
                )
            except ValueError:
                await message.answer(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 5000 7000",
                    parse_mode="HTML"
                )
                return
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤",
                callback_data="manage_price_requests"
                )
            ]]),
            parse_mode="HTML"
        )
        await state.clear()

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
@router.message(PriceRequestStates.waiting_for_template_params)
async def process_invalid_template_params(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–∞–±–ª–æ–Ω–∞
    """
    data = await state.get_data()
    template_type = data.get("template_type")
    
    if template_type == "base":
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 5000",
            parse_mode="HTML"
        )
    elif template_type == "range":
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 5000 7000",
            parse_mode="HTML"
        )

async def process_template_response(event, state: FSMContext, session: AsyncSession, params: dict = None) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ —à–∞–±–ª–æ–Ω—É
    """
    try:
        data = await state.get_data()
        request_id = data.get("request_id")
        template_type = data.get("template_type")
        
        result = await session.execute(
            select(PriceRequest)
            .where(PriceRequest.id == request_id)
            .options(
                selectinload(PriceRequest.user),
                selectinload(PriceRequest.service)
            )
        )
        request = result.scalar_one_or_none()
        
        if not request:
            await event.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ —à–∞–±–ª–æ–Ω—É
        template = RESPONSE_TEMPLATES[template_type]
        template_params = {
            "service_name": request.service.name,
            "car_info": request.car_info
        }
        if params:
            template_params.update(params)
            
        response_text = template.format(**template_params)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ—Ç–æ–≤—ã–º –æ—Ç–≤–µ—Ç–æ–º
        data = await state.update_data(prepared_response=response_text)
        await state.set_state(PriceRequestStates.waiting_for_response)
        
        keyboard = [[
            InlineKeyboardButton(
                text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                callback_data=f"send_prepared_response_{request_id}"
            ),
            InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=f"edit_prepared_response_{request_id}"
            )
        ]]
        
        text = (
            f"üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã #{request_id}:\n\n"
            f"{response_text}\n\n"
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?"
        )
        
        if isinstance(event, Message):
            await event.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
        else:  # CallbackQuery
            await event.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        if isinstance(event, Message):
            await event.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", parse_mode="HTML")
        else:
            await event.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()

@router.message(PriceRequestStates.waiting_for_response)
async def process_price_response(message: Message, state: FSMContext, session: AsyncSession, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–Ω–æ–≤–æ–≥–æ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    """
    try:
        data = await state.get_data()
        request_id = data.get("request_id")
        is_editing = data.get("is_editing", False)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å
        result = await session.execute(
            select(PriceRequest)
            .where(PriceRequest.id == request_id)
            .options(
                selectinload(PriceRequest.user),
                selectinload(PriceRequest.service)
            )
        )
        request = result.scalar_one_or_none()
        
        if not request:
            await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        admin = admin.scalar_one_or_none()
        
        if not admin:
            admin = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                full_name=message.from_user.full_name,
                is_admin=True
            )
            session.add(admin)
            await session.flush()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        request.admin_response = message.text.strip()
        request.admin_id = admin.id
        request.status = "ANSWERED"
        
        if not is_editing:
            request.answered_at = datetime.now()
        
        await session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–æ–º
        is_user_bot = False
        if request.user.username and request.user.username.lower().endswith('bot'):
            is_user_bot = True
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user.telegram_id} ({request.user.username}) –ø–æ—Ö–æ–∂ –Ω–∞ –±–æ—Ç–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –±–æ—Ç
        notification_sent = False
        if not is_user_bot:
            try:
                text = (
                    f"<b>üí∞ {'–û–±–Ω–æ–≤–ª—ë–Ω —Ä–∞—Å—á–µ—Ç' if is_editing else '–†–∞—Å—á–µ—Ç'} —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:</b>\n\n"
                    f"<b>üîß –£—Å–ª—É–≥–∞:</b> {request.service.name}\n"
                    f"<b>üöò –ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> {request.car_info}\n\n"
                    f"<b>üí¨ –û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b>\n{request.admin_response}"
                )
                
                await bot.send_message(
                    request.user.telegram_id,
                    text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(
                            text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
                            callback_data=f"book_from_price_request_{request.service_id}_{request_id}"
                        )
                    ]]),
                    parse_mode="HTML"
                )
                notification_sent = True
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=f"archive_price_{request_id}"
                ),
                InlineKeyboardButton(
                    text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
                    callback_data=f"edit_price_response_{request_id}"
                )
            ],
            [InlineKeyboardButton(
                text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤",
                callback_data="manage_price_requests"
            )]
        ])
        
        status_text = ""
        if is_user_bot:
            status_text = "‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ö–æ–∂ –Ω–∞ –±–æ—Ç–∞)"
        elif not notification_sent:
            status_text = "‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏)"
        else:
            status_text = f"{'‚úèÔ∏è –û—Ç–≤–µ—Ç –∏–∑–º–µ–Ω–µ–Ω' if is_editing else '‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'}"
        
        await message.answer(
            f"{status_text} –Ω–∞ –∑–∞–ø—Ä–æ—Å #{request_id}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")
        await state.clear()

@router.callback_query(F.data.startswith("archive_price_"), is_price_request_callback)
async def archive_price_request(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    """
    try:
        request_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å
        result = await session.execute(
            select(PriceRequest)
            .where(PriceRequest.id == request_id)
            .options(
                selectinload(PriceRequest.user),
                selectinload(PriceRequest.service)
            )
        )
        request = result.scalar_one_or_none()
        
        if not request:
            await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç–≤–µ—á–µ–Ω
        if request.status == "PENDING":
            await callback.answer(
                "‚ùå –ù–µ–ª—å–∑—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –±–µ–∑ –æ—Ç–≤–µ—Ç–∞!",
                show_alert=True
            )
            return
        
        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        request.status = "ARCHIVED"
        request.archived_at = datetime.now()
        await session.commit()
        
        await callback.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∞—Ä—Ö–∏–≤")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
        await show_price_requests(callback, session)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏")

@router.callback_query(F.data.startswith("archived_page_"), is_price_request_callback)
@router.callback_query(F.data == "archived_price_requests", is_price_request_callback)
async def show_archived_requests(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    try:
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª –∞—Ä—Ö–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤")
        await callback.answer()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page = 1
        if callback.data.startswith("archived_page_"):
            page = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        result = await session.execute(
            select(PriceRequest)
            .where(PriceRequest.status == "ARCHIVED")
            .order_by(PriceRequest.archived_at.desc())
            .options(
                selectinload(PriceRequest.user),
                selectinload(PriceRequest.service),
                selectinload(PriceRequest.admin)
            )
        )
        all_requests = result.scalars().all()
        
        if not all_requests:
            await callback.message.edit_text(
                "üì¶ –ê—Ä—Ö–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="‚Ü©Ô∏è –ö –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º",
                        callback_data="filter_pending_requests"
                    )
                ]]),
                parse_mode="HTML"
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ –¥–∞—Ç–∞–º
        grouped_requests = {}
        for req in all_requests:
            date = req.archived_at.strftime('%d.%m.%Y')
            if date not in grouped_requests:
                grouped_requests[date] = []
            grouped_requests[date].append(req)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        ITEMS_PER_PAGE = 10
        dates = list(grouped_requests.keys())
        total_pages = (len(all_requests) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (page - 1) * ITEMS_PER_PAGE
        end_idx = start_idx + ITEMS_PER_PAGE
        current_requests = all_requests[start_idx:end_idx]
        
        text = f"üì¶ –ê—Ä—Ö–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n"
        keyboard = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ –¥–∞—Ç–∞–º
        current_grouped = {}
        for req in current_requests:
            date = req.archived_at.strftime('%d.%m.%Y')
            if date not in current_grouped:
                current_grouped[date] = []
            current_grouped[date].append(req)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
        for date, requests in current_grouped.items():
            text += f"üìÖ {date}:\n"
            for req in requests:
                status = "‚úÖ" if req.admin_response else "‚ùå"
                text += (
                    f"#{req.id} {status} {req.user.full_name} ‚Ä¢ "
                    f"{req.service.name[:20]}{'...' if len(req.service.name) > 20 else ''}\n"
                )
            text += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —ç—Ç–æ–π –¥–∞—Ç—ã
            row = []
            for req in requests:
                if len(row) == 2:  # –ú–∞–∫—Å–∏–º—É–º 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
                    keyboard.append(row)
                    row = []
                row.append(
                    InlineKeyboardButton(
                        text=f"üìã #{req.id}",
                        callback_data=f"price_request_details_{req.id}"
                    )
                )
            if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
                keyboard.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        nav_buttons = []
        if page > 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"archived_page_{page-1}"
                )
            )
        if page < total_pages:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=f"archived_page_{page+1}"
                )
            )
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ö –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º",
                callback_data="filter_pending_requests"
            )
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–∞: {e}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤",
                    callback_data="manage_price_requests"
                )
            ]]),
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("price_request_details_"), is_price_request_callback)
async def view_price_request_details(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    """
    try:
        request_id = int(callback.data.split("_")[3])
        
        result = await session.execute(
            select(PriceRequest)
            .where(PriceRequest.id == request_id)
            .options(
                selectinload(PriceRequest.user),
                selectinload(PriceRequest.service),
                selectinload(PriceRequest.admin)
            )
        )
        request = result.scalar_one_or_none()
        
        if not request:
            await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        status_emoji = "üïê" if request.status == "PENDING" else "‚úÖ"
        text = (
            f"{status_emoji} –ó–∞–ø—Ä–æ—Å #{request.id}\n\n"
            f"<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> {request.user.full_name}\n"
            f"<b>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</b> {request.user.phone_number or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>üîß –£—Å–ª—É–≥–∞:</b> {request.service.name}\n"
            f"<b>üöò –ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> {request.car_info}\n"
            f"<b>üìÖ –°–æ–∑–¥–∞–Ω:</b> {request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        )
        
        if request.admin_response:
            answered_at_str = request.answered_at.strftime('%d.%m.%Y %H:%M') if request.answered_at else "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            text += (
                f"\n<b>üí¨ –û—Ç–≤–µ—Ç –æ—Ç {request.admin.full_name}:</b>\n"
                f"{request.admin_response}\n"
                f"<b>üìÖ –û—Ç–≤–µ—á–µ–Ω–æ:</b> {answered_at_str}\n"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = []
        
        if request.status == "PENDING":
            keyboard.append([
                InlineKeyboardButton(
                    text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å",
                    callback_data=f"respond_price_{request.id}"
                )
            ])
        else:
            keyboard.extend([
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç",
                        callback_data=f"edit_price_response_{request.id}"
                    ),
                    InlineKeyboardButton(
                        text="üì¶ –í –∞—Ä—Ö–∏–≤",
                        callback_data=f"archive_price_{request.id}"
                    )
                ]
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞
        back_callback = "filter_pending_requests" if request.status == "PENDING" else "filter_answered_requests"
        keyboard.append([
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data=back_callback
            )
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

@router.callback_query(F.data.startswith("edit_price_response_"), is_price_request_callback)
async def start_edit_price_response(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    """
    try:
        request_id = int(callback.data.split("_")[3])
        
        result = await session.execute(
            select(PriceRequest)
            .where(PriceRequest.id == request_id)
            .options(
                selectinload(PriceRequest.user),
                selectinload(PriceRequest.service)
            )
        )
        request = result.scalar_one_or_none()
        
        if not request:
            await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–º–µ—Ç–∫—É, —á—Ç–æ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        await state.update_data(request_id=request_id, is_editing=True)
        await state.set_state(PriceRequestStates.waiting_for_response)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=f"price_request_details_{request_id}"
            )]
        ])
        
        text = (
            f"<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å #{request_id}</b>\n\n"
            f"<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> {request.user.full_name}\n"
            f"<b>üîß –£—Å–ª—É–≥–∞:</b> {request.service.name}\n"
            f"<b>üöò –ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> {request.car_info}\n\n"
            f"<b>üí¨ –¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç:</b>\n{request.admin_response}\n\n"
            "<b>üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç:</b>"
        )
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "filter_pending_requests", is_price_request_callback)
async def filter_pending_requests(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å—ã
    """
    try:
        await callback.answer()
        
        result = await session.execute(
            select(PriceRequest)
            .where(
                PriceRequest.status == "PENDING"
            )
            .order_by(PriceRequest.created_at.desc())
            .options(
                selectinload(PriceRequest.user),
                selectinload(PriceRequest.service)
            )
        )
        requests = result.scalars().all()
        
        if not requests:
            await callback.message.edit_text(
                "üîç –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                        callback_data="manage_price_requests"
                    )
                ]]),
                parse_mode="HTML"
            )
            return
        
        text = "<b>üïê –û–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å—ã:</b>\n\n"
        keyboard = []
        
        for req in requests:
            text += (
                f"#{req.id} –æ—Ç {req.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"<b>üë§ {req.user.full_name}</b>\n"
                f"<b>üîß {req.service.name}</b>\n"
                f"<b>üöò {req.car_info}</b>\n\n"
            )
            
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å #{req.id}",
                    callback_data=f"respond_price_{req.id}"
                ),
                InlineKeyboardButton(
                    text="üìã –î–µ—Ç–∞–ª–∏",
                    callback_data=f"price_request_details_{req.id}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data="manage_price_requests"
            )
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤",
                    callback_data="manage_price_requests"
                )
            ]]),
            parse_mode="HTML"
        )

@router.callback_query(F.data == "filter_answered_requests", is_price_request_callback)
async def filter_answered_requests(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    """
    try:
        await callback.answer()
        
        result = await session.execute(
            select(PriceRequest)
            .where(
                PriceRequest.status == "ANSWERED"
            )
            .order_by(PriceRequest.answered_at.desc())
            .options(
                selectinload(PriceRequest.user),
                selectinload(PriceRequest.service),
                selectinload(PriceRequest.admin)
            )
        )
        requests = result.scalars().all()
        
        if not requests:
            await callback.message.edit_text(
                "üîç –ù–µ—Ç –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                        callback_data="manage_price_requests"
                    )
                ]]),
                parse_mode="HTML"
            )
            return
        
        text = "<b>‚úÖ –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n\n"
        keyboard = []
        
        for req in requests:
            text += (
                f"#{req.id} –æ—Ç {req.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"<b>üë§ {req.user.full_name}</b>\n"
                f"<b>üîß {req.service.name}</b>\n"
                f"<b>üöò {req.car_info}</b>\n"
                f"<b>üí¨ –û—Ç–≤–µ—Ç –æ—Ç {req.admin.full_name}:</b>\n{req.admin_response}\n\n"
            )
            
            keyboard.append([
                InlineKeyboardButton(
                    text=f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å #{req.id}",
                    callback_data=f"edit_price_response_{req.id}"
                ),
                InlineKeyboardButton(
                    text="üì¶ –í –∞—Ä—Ö–∏–≤",
                    callback_data=f"confirm_archive_{req.id}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data="manage_price_requests"
            )
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤",
                    callback_data="manage_price_requests"
                )
            ]]),
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("confirm_archive_"), is_price_request_callback)
async def confirm_archive_request(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
    """
    try:
        request_id = int(callback.data.split("_")[2])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=f"archive_price_{request_id}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞",
                    callback_data=f"price_request_details_{request_id}"
                )
            ]
        ])
        
        await callback.message.edit_text(
            f"<b>‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å #{request_id}?</b>\n"
            "–ü–æ—Å–ª–µ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –∞—Ä—Ö–∏–≤–µ.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("send_prepared_response_"), is_price_request_callback)
async def send_prepared_response(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    """
    try:
        request_id = int(callback.data.split("_")[3])
        data = await state.get_data()
        prepared_response = data.get("prepared_response")
        
        if not prepared_response:
            await callback.answer("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å
        result = await session.execute(
            select(PriceRequest)
            .where(PriceRequest.id == request_id)
            .options(
                selectinload(PriceRequest.user),
                selectinload(PriceRequest.service)
            )
        )
        request = result.scalar_one_or_none()
        
        if not request:
            await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        admin = admin_result.scalar_one_or_none()
        
        if not admin:
            admin = User(
                telegram_id=callback.from_user.id,
                username=callback.from_user.username,
                full_name=callback.from_user.full_name,
                is_admin=True
            )
            session.add(admin)
            await session.flush()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        request.admin_response = prepared_response
        request.admin_id = admin.id
        request.status = "ANSWERED"
        request.answered_at = datetime.now()
        
        await session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        try:
            text = (
                "<b>üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:</b>\n\n"
                f"<b>üîß –£—Å–ª—É–≥–∞:</b> {request.service.name}\n"
                f"<b>üöò –ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> {request.car_info}\n\n"
                f"<b>üí¨ –û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b>\n{request.admin_response}"
            )
            
            await bot.send_message(
                request.user.telegram_id,
                text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
                        callback_data=f"book_from_price_request_{request.service_id}_{request_id}"
                    )
                ]])
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É", show_alert=True)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=f"archive_price_{request_id}"
                ),
                InlineKeyboardButton(
                    text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
                    callback_data=f"edit_price_response_{request_id}"
                )
            ],
            [InlineKeyboardButton(
                text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤",
                callback_data="manage_price_requests"
            )]
        ])
        
        await callback.message.edit_text(
            f"<b>‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∑–∞–ø—Ä–æ—Å #{request_id}</b>",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞", show_alert=True)
        await state.clear()
        await callback.message.edit_text(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞</b>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤",
                    callback_data="manage_price_requests"
                )
            ]])
        )

@router.callback_query(F.data.startswith("edit_prepared_response_"), is_price_request_callback)
async def edit_prepared_response(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    """
    try:
        request_id = int(callback.data.split("_")[3])
        data = await state.get_data()
        prepared_response = data.get("prepared_response")
        
        if not prepared_response:
            await callback.answer("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç –∏ ID –∑–∞–ø—Ä–æ—Å–∞
        await state.update_data(
            request_id=request_id,
            current_response=prepared_response
        )
        await state.set_state(PriceRequestStates.editing_response)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=f"respond_price_{request_id}"
            )
        ]])
        
        text = (
            f"<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å #{request_id}</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç:</b>\n{prepared_response}\n\n"
            "<b>üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç:</b>"
        )
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()

@router.message(PriceRequestStates.editing_response)
async def process_edited_response(message: Message, state: FSMContext, session: AsyncSession, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    """
    try:
        data = await state.get_data()
        request_id = data.get("request_id")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å
        result = await session.execute(
            select(PriceRequest)
            .where(PriceRequest.id == request_id)
            .options(
                selectinload(PriceRequest.user),
                selectinload(PriceRequest.service)
            )
        )
        request = result.scalar_one_or_none()
        
        if not request:
            await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        request.admin_response = message.text.strip()
        await session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        try:
            text = (
                f"<b>üí∞ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:</b>\n\n"
                f"<b>üîß –£—Å–ª—É–≥–∞:</b> {request.service.name}\n"
                f"<b>üöò –ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> {request.car_info}\n\n"
                f"<b>üí¨ –û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b>\n{request.admin_response}"
            )
            
            await bot.send_message(
                request.user.telegram_id,
                text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
                        callback_data=f"book_from_price_request_{request.service_id}_{request_id}"
                    )
                ]])
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=f"archive_price_{request_id}"
                ),
                InlineKeyboardButton(
                    text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë —Ä–∞–∑",
                    callback_data=f"edit_price_response_{request_id}"
                )
            ],
            [InlineKeyboardButton(
                text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤",
                callback_data="manage_price_requests"
            )]
        ])
        
        await message.answer(
            f"<b>‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã #{request_id} –æ–±–Ω–æ–≤–ª–µ–Ω</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤",
                    callback_data="manage_price_requests"
                )
            ]]),
            parse_mode="HTML"
        )
        await state.clear()

@router.callback_query(F.data.startswith("custom_response_"), is_price_request_callback)
async def start_custom_response(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    """
    try:
        request_id = int(callback.data.split("_")[2])
        
        result = await session.execute(
            select(PriceRequest)
            .where(PriceRequest.id == request_id)
            .options(
                selectinload(PriceRequest.user),
                selectinload(PriceRequest.service)
            )
        )
        request = result.scalar_one_or_none()
        
        if not request:
            await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(request_id=request_id)
        await state.set_state(PriceRequestStates.waiting_for_response)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=f"respond_price_{request_id}"
            )
        ]])
        
        text = (
            f"<b>üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã #{request_id}</b>\n\n"
            f"<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> {request.user.full_name}\n"
            f"<b>üîß –£—Å–ª—É–≥–∞:</b> {request.service.name}\n"
            f"<b>üöò –ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> {request.car_info}\n\n"
            "<b>üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:</b>"
        )
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)