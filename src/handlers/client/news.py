# src/handlers/client/news.py

import os
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from loguru import logger

from database.models import News
from keyboards.client.client import get_main_keyboard
from core.utils.logger import log_error

router = Router()

def get_news_keyboard(current_index: int, total_news: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º
    """
    keyboard = []
    nav_row = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if current_index > 0:
        nav_row.append(
            InlineKeyboardButton(
                text="‚èÆ",
                callback_data="news_first"
            )
        )
        nav_row.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è",
                callback_data=f"news_prev_{current_index}"
            )
        )
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏
    position_text = f"üì∞ {current_index + 1}/{total_news}"
    nav_row.append(
        InlineKeyboardButton(
            text=position_text,
            callback_data="news_position"
        )
    )
    
    if current_index < total_news - 1:
        nav_row.append(
            InlineKeyboardButton(
                text="‚ñ∂Ô∏è",
                callback_data=f"news_next_{current_index}"
            )
        )
        nav_row.append(
            InlineKeyboardButton(
                text="‚è≠",
                callback_data="news_last"
            )
        )
    
    keyboard.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª
    channel_row = [
        InlineKeyboardButton(
            text="üì¢ –ù–∞—à Telegram –∫–∞–Ω–∞–ª",
            url="https://t.me/ILPOavtoTON"
        )
    ]
    keyboard.append(channel_row)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_row = []
    control_row.append(
        InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            callback_data="refresh_news"
        )
    )
    control_row.append(
        InlineKeyboardButton(
            text="üîô –ú–µ–Ω—é",
            callback_data="back_to_main"
        )
    )
    keyboard.append(control_row)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def format_news_date(date: datetime) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥
    """
    now = datetime.now()
    delta = now - date
    
    if delta.days == 0:
        if delta.seconds < 3600:
            minutes = delta.seconds // 60
            return f"{minutes} {'–º–∏–Ω—É—Ç—É' if minutes == 1 else '–º–∏–Ω—É—Ç'} –Ω–∞–∑–∞–¥"
        else:
            hours = delta.seconds // 3600
            return f"{hours} {'—á–∞—Å' if hours == 1 else '—á–∞—Å–æ–≤'} –Ω–∞–∑–∞–¥"
    elif delta.days == 1:
        return "–í—á–µ—Ä–∞"
    elif delta.days == 2:
        return "–ü–æ–∑–∞–≤—á–µ—Ä–∞"
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        return date.strftime("%d %m %Y")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
MAX_CAPTION_LENGTH = 1024
MAX_MESSAGE_LENGTH = 4096

def truncate_text(text: str, max_length: int) -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, –¥–æ–±–∞–≤–ª—è—è '...' –≤ –∫–æ–Ω—Ü–µ
    """
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."

async def show_news_item(message: Message | CallbackQuery, session: AsyncSession, index: int = 0) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–¥–Ω—É –Ω–æ–≤–æ—Å—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
        total_news = await session.scalar(
            select(func.count()).select_from(News)
        )
        
        if total_news == 0:
            text = "<b>üì¢ –ù–æ–≤–æ—Å—Ç–∏</b>\n\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
            if isinstance(message, CallbackQuery):
                await message.message.edit_text(
                    text,
                    reply_markup=get_news_keyboard(0, 1),
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    text,
                    reply_markup=get_news_keyboard(0, 1),
                    parse_mode="HTML"
                )
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –ø–æ –∏–Ω–¥–µ–∫—Å—É
        news_item = await session.execute(
            select(News)
            .order_by(News.created_at.desc())
            .offset(index)
            .limit(1)
        )
        news_item = news_item.scalar_one_or_none()
        
        if not news_item:
            await message.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML —Ç–µ–≥–∞–º–∏
        date_str = format_news_date(news_item.created_at)
        news_text = (
            f"üìå <b>{news_item.title}</b>\n\n"
            f"üïí <i>{date_str}</i>\n\n"
            f"{news_item.content}"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if news_item.image_url:
            news_text = truncate_text(news_text, MAX_CAPTION_LENGTH)
        else:
            news_text = truncate_text(news_text, MAX_MESSAGE_LENGTH)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_news_keyboard(index, total_news)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if isinstance(message, CallbackQuery):
            try:
                if news_item.image_url:
                    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await message.message.delete()
                    except Exception as e:
                        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                    full_image_path = f"src/{news_item.image_url}"
                    if os.path.exists(full_image_path):
                        await message.message.answer_photo(
                            photo=FSInputFile(full_image_path),
                            caption=news_text,
                            reply_markup=keyboard,
                            parse_mode="HTML"
                        )
                    else:
                        await message.message.answer(
                            news_text,
                            reply_markup=keyboard,
                            parse_mode="HTML"
                        )
                else:
                    # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ —Ñ–æ—Ç–æ
                    try:
                        await message.message.edit_text(
                            news_text,
                            reply_markup=keyboard,
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                        try:
                            await message.message.delete()
                        except Exception:
                            pass
                        await message.message.answer(
                            news_text,
                            reply_markup=keyboard,
                            parse_mode="HTML"
                        )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                await message.message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–∏",
                    reply_markup=get_main_keyboard()
                )
        else:
            # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏
            if news_item.image_url:
                full_image_path = f"src/{news_item.image_url}"
                if os.path.exists(full_image_path):
                    await message.answer_photo(
                        photo=FSInputFile(full_image_path),
                        caption=news_text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                else:
                    await message.answer(
                        news_text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
            else:
                await message.answer(
                    news_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                
    except Exception as e:
        log_error(e)
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–∏"
        if isinstance(message, CallbackQuery):
            await message.message.answer(
                error_text,
                reply_markup=get_main_keyboard()
            )
        else:
            await message.answer(
                error_text,
                reply_markup=get_main_keyboard()
            )

@router.message(F.text == "üì¢ –ù–æ–≤–æ—Å—Ç–∏")
async def show_news_command(message: Message, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å
    """
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –Ω–æ–≤–æ—Å—Ç–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
        total_news = await session.scalar(
            select(func.count()).select_from(News)
        )
        
        if total_news == 0:
            await message.answer(
                "<b>üì¢ –ù–æ–≤–æ—Å—Ç–∏</b>\n\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å
        news_item = await session.execute(
            select(News)
            .order_by(News.created_at.desc())
            .limit(1)
        )
        news_item = news_item.scalar_one_or_none()
        
        if not news_item:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML —Ç–µ–≥–∞–º–∏
        date_str = format_news_date(news_item.created_at)
        news_text = (
            f"üìå <b>{news_item.title}</b>\n\n"
            f"üïí <i>{date_str}</i>\n\n"
            f"{news_item.content}"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if news_item.image_url:
            news_text = truncate_text(news_text, MAX_CAPTION_LENGTH)
        else:
            news_text = truncate_text(news_text, MAX_MESSAGE_LENGTH)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_news_keyboard(0, total_news)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if news_item.image_url:
            full_image_path = f"src/{news_item.image_url}"
            if os.path.exists(full_image_path):
                await message.answer_photo(
                    photo=FSInputFile(full_image_path),
                    caption=news_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            else:
                logger.warning(f"Image file not found: {full_image_path}")
                await message.answer(
                    news_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
        else:
            await message.answer(
                news_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"Error in show_news_command: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π",
            reply_markup=get_main_keyboard()
        )

@router.callback_query(F.data.startswith("news_next_"))
async def show_next_news(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å
    """
    try:
        current_index = int(callback.data.split("_")[2])
        await callback.answer()
        await show_news_item(callback, session, current_index + 1)
    except Exception as e:
        logger.error(f"Error in show_next_news: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏", show_alert=True)

@router.callback_query(F.data.startswith("news_prev_"))
async def show_prev_news(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–æ–≤–æ—Å—Ç—å
    """
    try:
        current_index = int(callback.data.split("_")[2])
        await callback.answer()
        await show_news_item(callback, session, current_index - 1)
    except Exception as e:
        logger.error(f"Error in show_prev_news: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏", show_alert=True)

@router.callback_query(F.data == "news_first")
async def show_first_news(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é (—Å–∞–º—É—é —Å–≤–µ–∂—É—é) –Ω–æ–≤–æ—Å—Ç—å
    """
    try:
        await callback.answer()
        await show_news_item(callback, session, 0)
    except Exception as e:
        logger.error(f"Error in show_first_news: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏", show_alert=True)

@router.callback_query(F.data == "news_last")
async def show_last_news(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é (—Å–∞–º—É—é —Å—Ç–∞—Ä—É—é) –Ω–æ–≤–æ—Å—Ç—å
    """
    try:
        total_news = await session.scalar(select(func.count()).select_from(News))
        await callback.answer()
        await show_news_item(callback, session, total_news - 1)
    except Exception as e:
        logger.error(f"Error in show_last_news: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ–≤–æ—Å—Ç–∏", show_alert=True)

@router.callback_query(F.data == "news_position")
async def show_position_info(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ø–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π
    """
    await callback.answer("–ü–æ–∑–∏—Ü–∏—è –≤ —Å–ø–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π")

@router.callback_query(F.data == "refresh_news")
async def refresh_news(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –Ω–æ–≤–æ—Å—Ç—å
    """
    try:
        await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º...")
        await show_news_item(callback, session, 0)
    except Exception as e:
        logger.error(f"Error in refresh_news: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π", show_alert=True)