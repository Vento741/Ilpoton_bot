# src/handlers/client/appointments.py

from datetime import datetime, timedelta
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from loguru import logger
from typing import Union, List, Optional
import re
from aiogram.exceptions import TelegramBadRequest

from database.models import User, Service, Appointment, TimeSlot, PriceRequest
from keyboards.client.client import (
    get_services_keyboard,
    get_time_slots_keyboard,
    get_time_slots_for_date_keyboard,
    get_main_keyboard
)
from src.core.utils.constants import CANCELLATION_REASONS
from states.client import AppointmentStates
from config.settings import settings
from core.utils.logger import log_error
from core.bot import bot  # Updated import path
from ..admin.appointments import send_admin_notification

router = Router()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
class MessageManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏
    """
    def __init__(self):
        self.messages_to_delete: List[int] = []
    
    async def add_message(self, message: Message) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ"""
        if message and message.message_id:
            self.messages_to_delete.append(message.message_id)
    
    async def delete_messages(self, chat_id: int, bot: Bot) -> None:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        for msg_id in self.messages_to_delete:
            try:
                await bot.delete_message(chat_id, msg_id)
            except TelegramBadRequest:
                continue  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
        self.messages_to_delete = []

@router.message(F.text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def start_appointment(message: Message, session: AsyncSession, state: FSMContext, bot: Bot) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏
    """
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_appointments = await session.execute(
            select(Appointment)
            .join(User)
            .join(TimeSlot)
            .where(
                User.telegram_id == message.from_user.id,
                TimeSlot.date >= datetime.now(),
                Appointment.status.in_(["PENDING", "CONFIRMED"])
            )
            .options(
                selectinload(Appointment.service),
                selectinload(Appointment.time_slot)
            )
        )
        active_appointments = active_appointments.scalars().all()
        
        if active_appointments:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö
            text = "‚ùóÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
            for app in active_appointments:
                status_emoji = "‚úÖ" if app.status == "CONFIRMED" else "üïê"
                price_text = f"{app.final_price}‚ÇΩ" if app.final_price else f"–æ—Ç {app.service.price}‚ÇΩ"
                text += (
                    f"{status_emoji} –ó–∞–ø–∏—Å—å #{app.id}\n"
                    f"<b>üìÖ –î–∞—Ç–∞:</b> <code>{app.time_slot.date.strftime('%d.%m.%Y %H:%M')}</code>\n"
                    f"<b>üíá‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞:</b> <code>{app.service.name}</code>\n"
                    f"<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{price_text}</code>\n"
                    "-------------------\n"
                )
            
            text += "\n–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å?"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚úÖ –î–∞, —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –∑–∞–ø–∏—Å—å",
                    callback_data="create_another_appointment"
                )],
                [InlineKeyboardButton(
                    text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data="cancel_booking"
                )]
            ])
            
            await message.answer(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        msg_manager = MessageManager()
        await state.update_data(msg_manager=msg_manager)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏
        services = await session.execute(
            select(Service)
            .order_by(Service.id)
        )
        services = services.scalars().all()
        
        if not services:
            await message.answer(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(AppointmentStates.selecting_service)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = (
            "<b>üéØ –ó–∞–ø–∏—Å—å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</b>\n\n"
            "<b>–î–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>\n"
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É\n"
            "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è\n"
            "4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ\n"
            "5Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π \\(–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\\)\n\n"
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞:</b>"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏
        keyboard = []
        for service in services:
            price_text = f"–æ—Ç {service.price}‚ÇΩ"
            duration_text = f"{service.duration} –º–∏–Ω"
            button_text = f"{service.name} ‚Ä¢ {price_text} ‚Ä¢ ‚è± –û—Ç {duration_text}"
            
            keyboard.append([
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"appointment_select_service_{service.id}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard.append([
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
                callback_data="cancel_booking"
            )
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        sent_message = await message.answer(
            welcome_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        await msg_manager.add_message(message)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await msg_manager.add_message(sent_message)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        
    except Exception as e:
        log_error(e)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏",
            reply_markup=get_main_keyboard()
        )
        await state.clear()

@router.callback_query(F.data.startswith("client_date_page_"))
async def handle_date_pagination(callback: CallbackQuery, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–∞—Ç
    """
    try:
        page = int(callback.data.split("_")[3])
        
        time_slots = await session.execute(
            select(TimeSlot)
            .where(TimeSlot.date >= datetime.now(), TimeSlot.is_available == True)
            .order_by(TimeSlot.date)
        )
        time_slots = time_slots.scalars().all()
        
        await callback.message.edit_text(
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏ üìù:</b>",
            reply_markup=get_time_slots_keyboard(time_slots, page),
            parse_mode="HTML"
        )
    except Exception as e:
        log_error(e)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
            reply_markup=get_main_keyboard()
        )


@router.callback_query(F.data.startswith("select_date_"), AppointmentStates.selecting_date)
async def process_date_selection(callback: CallbackQuery, session: AsyncSession, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        selected_date = datetime.strptime(callback.data.split("_")[2], "%d.%m.%Y")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        time_slots = await session.execute(
            select(TimeSlot)
            .where(
                TimeSlot.date >= selected_date,
                TimeSlot.date < selected_date + timedelta(days=1),
                TimeSlot.is_available == True
            )
            .order_by(TimeSlot.date)
        )
        time_slots = time_slots.scalars().all()
        
        if not time_slots:
            await callback.answer("‚ùå –ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–µ
        data = await state.get_data()
        service = await session.get(Service, data['service_id'])
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await clear_previous_messages(state, callback.message.chat.id, bot)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
        await state.set_state(AppointmentStates.selecting_time)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        date_str = selected_date.strftime("%d.%m.%Y")
        service_info = (
            f"<b>üîß –£—Å–ª—É–≥–∞:</b> <code>{service.name}</code>\n"
            f"<b>üìÖ –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:</b> <code>{date_str}</code>\n"
            f"<b>‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> –æ—Ç <code>{service.duration} –º–∏–Ω</code>\n\n"
            f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:</b>"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
        keyboard = []
        for slot in time_slots:
            time_str = slot.date.strftime("%H:%M")
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üïí {time_str}",
                    callback_data=f"select_time_{slot.id}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_row = []
        nav_row.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º",
                callback_data="client_back_to_dates"
            )
        )
        nav_row.append(
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_booking"
            )
        )
        keyboard.append(nav_row)
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
        except TelegramBadRequest as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
            if "message to delete not found" not in str(e):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = await callback.message.answer(
                service_info,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode="HTML"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            msg_manager = data.get("msg_manager")
            if msg_manager:
                await msg_manager.add_message(sent_message)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
            await state.update_data(selected_date=selected_date.strftime("%Y-%m-%d"))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
            await state.clear()
            
    except Exception as e:
        log_error(e)
        try:
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
        except Exception as send_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {send_error}")
        await state.clear()


@router.callback_query(F.data == "client_back_to_dates")
async def back_to_dates(callback: CallbackQuery, session: AsyncSession, state: FSMContext, bot: Bot) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        time_slots = await session.execute(
            select(TimeSlot)
            .where(
                TimeSlot.date >= datetime.now(),
                TimeSlot.is_available == True
            )
            .order_by(TimeSlot.date)
        )
        time_slots = time_slots.scalars().all()
        
        if not time_slots:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.edit_text(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                    ]]),
                    parse_mode="HTML"
                )
            except TelegramBadRequest:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await callback.message.answer(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                    ]]),
                    parse_mode="HTML"
                )
            return
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await clear_previous_messages(state, callback.message.chat.id, bot)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–µ
        data = await state.get_data()
        service = await session.get(Service, data['service_id'])
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        await state.set_state(AppointmentStates.selecting_date)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        service_info = (
            f"<b>üîß –í—ã–±—Ä–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞:</b> <code>{service.name}</code>\n"
            f"<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –æ—Ç {service.price}‚ÇΩ\n"
            f"<b>‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {service.duration} –º–∏–Ω\n\n"
            f"<b>üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:</b>"
        )
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            edited_message = await callback.message.edit_text(
                service_info,
                reply_markup=get_time_slots_keyboard(time_slots),
                parse_mode="HTML"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            msg_manager = data.get("msg_manager")
            if msg_manager:
                await msg_manager.add_message(edited_message)
        except TelegramBadRequest as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if "message to edit not found" in str(e):
                new_message = await callback.message.answer(
                    service_info,
                    reply_markup=get_time_slots_keyboard(time_slots),
                    parse_mode="HTML"
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                msg_manager = data.get("msg_manager")
                if msg_manager:
                    await msg_manager.add_message(new_message)
            else:
                raise
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_dates: {e}", exc_info=True)
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]]),
                parse_mode="HTML"
            )
        except TelegramBadRequest:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]]),
                parse_mode="HTML"
            )
        await state.clear()

@router.callback_query(F.data.startswith("select_time_"), AppointmentStates.selecting_time)
async def process_time_selection(callback: CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    """
    try:
        time_slot_id = int(callback.data.split("_")[2])
        time_slot = await session.get(TimeSlot, time_slot_id)
        
        if not time_slot or not time_slot.is_available:
            await callback.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        service_id = data.get('service_id')
        from_price_request = data.get('from_price_request', False)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service = await session.get(Service, service_id)
        if not service:
            await callback.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        await state.update_data(time_slot_id=time_slot_id)
        
        if from_price_request:
            try:
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω—ã
                result = await session.execute(
                    select(PriceRequest)
                    .where(PriceRequest.id == data['price_request_id'])
                    .options(selectinload(PriceRequest.user))
                )
                price_request = result.scalar_one_or_none()
                
                if price_request:
                    # –†–∞–∑–±–∏—Ä–∞–µ–º car_info –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ
                    car_info = price_request.car_info.split()
                    if len(car_info) >= 3:
                        car_brand = car_info[0]
                        car_year = car_info[-1]
                        car_model = " ".join(car_info[1:-1])
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                        final_price = None
                        if price_request.admin_response:
                            price_match = re.search(r'(\d+)(?:‚ÇΩ)?', price_request.admin_response)
                            if price_match:
                                final_price = int(price_match.group(1))
                        
                        await state.update_data({
                            'service_id': service_id,
                            'time_slot_id': time_slot_id,
                            'car_brand': car_brand,
                            'car_model': car_model,
                            'car_year': car_year,
                            'final_price': final_price,
                            'user_id': price_request.user_id
                        })
                        
                        await create_appointment(callback.message, state, session)
                    else:
                        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç car_info: {price_request.car_info}")
                        await callback.message.edit_text(
                            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                                InlineKeyboardButton(
                                    text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                    callback_data="back_to_main"
                                )
                            ]])
                        )
                else:
                    await callback.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω—ã: {e}")
                await callback.message.edit_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(
                            text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data="back_to_main"
                        )
                    ]])
                )
                return
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            await state.set_state(AppointmentStates.entering_car_brand)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ —É—Å–ª—É–≥–µ
            message_text = (
                f"<b>üïí –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:</b> <code>{time_slot.date.strftime('%d.%m.%Y %H:%M')}</code>\n"
                f"<b>üîß –£—Å–ª—É–≥–∞:</b> <code>{service.name}</code>\n"
                f"<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –æ—Ç {service.price}‚ÇΩ\n"
                f"<b>‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {service.duration} –º–∏–Ω.\n\n"
                f"<b>üöó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:</b>\n\n"
                f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä:</i> <b>Toyota_, BMW_, Mercedes_</b>\n"
                f"<i>–ê —Ç–∞–∫-–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–∞—Ä–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º:</i> <b>–¢–æ–π–æ—Ç–∞, –ë–ú–í, –ú–µ—Ä—Å–µ–¥–µ—Å</b>"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_booking")
            ]])
            
            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏: {e}", exc_info=True)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_main"
                )
            ]])
        )

async def get_user(user_data, session: AsyncSession) -> User:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user = await session.execute(
        select(User).where(User.telegram_id == user_data.id)
    )
    user = user.scalar_one_or_none()
    
    if not user:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –±–æ—Ç
        chat = await bot.get_chat(user_data.id)
        user = User(
            telegram_id=user_data.id,
            username=user_data.username,
            full_name=chat.full_name or user_data.full_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ —á–∞—Ç–∞
            is_admin=False  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω
        )
        session.add(user)
        await session.flush()
    
    return user

@router.callback_query(F.data.startswith("appointment_select_service_"), AppointmentStates.selecting_service)
async def process_service_selection(callback: CallbackQuery, session: AsyncSession, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
    """
    try:
        service_id = int(callback.data.split("_")[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É
        service = await session.get(Service, service_id)
        if not service:
            await callback.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É—Å–ª—É–≥–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(service_id=service_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        time_slots = await session.execute(
            select(TimeSlot)
            .where(
                TimeSlot.date >= datetime.now(),
                TimeSlot.is_available == True
            )
            .order_by(TimeSlot.date)
        )
        time_slots = time_slots.scalars().all()
        
        if not time_slots:
            await callback.message.edit_text(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
            return
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await clear_previous_messages(state, callback.message.chat.id, bot)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        await state.set_state(AppointmentStates.selecting_date)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        service_info = (
            f"<b>üîß –í—ã–±—Ä–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞:</b> <code>{service.name}</code>\n"
            f"<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –æ—Ç {service.price}‚ÇΩ\n"
            f"<b>‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> –æ—Ç {service.duration} –º–∏–Ω\n\n"
            f"<b>üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:</b>"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–∞—Ç
        sent_message = await callback.message.answer(
            service_info,
            reply_markup=get_time_slots_keyboard(time_slots),
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        data = await state.get_data()
        msg_manager = data.get("msg_manager")
        if msg_manager:
            await msg_manager.add_message(sent_message)
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except TelegramBadRequest as e:
            if "message to delete not found" not in str(e):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
    except Exception as e:
        log_error(e)
        try:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å–ª—É–≥–∏",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
        except Exception as send_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {send_error}")


@router.message(AppointmentStates.entering_car_brand)
async def process_car_brand(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_booking")
    ]])
    
    await state.update_data(car_brand=message.text)
    await state.set_state(AppointmentStates.entering_car_model)
    await message.answer(
        "<b>üöó –í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <u>Camry</u>, <u>X5</u>, <u>A4</u>):",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.message(AppointmentStates.entering_car_model)
async def process_car_model(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_booking")
    ]])
    
    await state.update_data(car_model=message.text)
    await state.set_state(AppointmentStates.entering_car_year)
    await message.answer(
        "<b>üöó –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.message(AppointmentStates.entering_car_year)
async def process_car_year(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_booking")
    ]])
    
    try:
        year = int(message.text)
        current_year = datetime.now().year
        
        if year < 1900 or year > current_year:
            await message.answer(
                f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –æ—Ç 1900 –¥–æ {current_year}</b>",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            return
        
        await state.update_data(car_year=str(year))
        await state.set_state(AppointmentStates.entering_comment)
        await message.answer(
            "<b>–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è):\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer(
            "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2020)</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )


@router.message(Command("skip"), AppointmentStates.entering_comment)
async def skip_comment(message: Message, state: FSMContext, session: AsyncSession) -> None:
    """
    –ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    """
    await create_appointment(message, state, session)

@router.callback_query(F.data == "cancel_booking")
async def cancel_booking(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """
    –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏
    """
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await clear_previous_messages(state, callback.message.chat.id, bot)
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except TelegramBadRequest as e:
            if "message to delete not found" not in str(e):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        await callback.message.answer(
            "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_main_keyboard()
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: {e}", exc_info=True)
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=get_main_keyboard()
            )
        except Exception as send_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ: {send_error}")
        
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()



@router.message(AppointmentStates.entering_comment)
async def process_comment(message: Message, state: FSMContext, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    """
    current_state = await state.get_state()
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π
    if message.text.startswith('/'):
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
        
    await state.update_data(client_comment=message.text)
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
    await create_appointment(message, state, session)
    logger.info("–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞")


async def create_appointment(message: Message, state: FSMContext, session: AsyncSession) -> None:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    """
    try:
        data = await state.get_data()
        logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        if data.get('from_price_request') and data.get('user_data'):
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            user_result = await session.execute(
                select(User)
                .where(User.id == data['user_id'])
            )
            user = user_result.scalar_one_or_none()
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {data.get('user_id')}")
                raise ValueError("User not found")
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
            user = user_result.scalar_one_or_none()
            
            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = User(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username,
                    full_name=message.from_user.full_name
                )
                session.add(user)
                await session.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        time_slot = await session.get(TimeSlot, data['time_slot_id'])
        if not time_slot or not time_slot.is_available:
            await message.answer(
                "<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.</b>",
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service = await session.get(Service, data['service_id'])
        
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        client_comment = data.get('client_comment', '')
        price_text = None
        final_price = None
        if data.get('from_price_request'):
            price_request_result = await session.execute(
                select(PriceRequest)
                .where(PriceRequest.id == data['price_request_id'])
            )
            price_request = price_request_result.scalar_one_or_none()
            if price_request:
                client_comment = (
                    f"<b>–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ #{price_request.id}</b>\n"
                    f"<b>–ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞:</b> <code> {price_request.car_info}</code>\n"
                    f"{f'<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å:</b> <code>{price_request.additional_question}</code>\n' if price_request.additional_question else ''}"
                    f"<b>–û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b> <code>{price_request.admin_response}</code>\n"
                    f"{client_comment}"
                ).strip()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                if price_request.admin_response:
                    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É
                    exact_price_match = re.search(r'—Å–æ—Å—Ç–∞–≤–∏—Ç (\d+)‚ÇΩ', price_request.admin_response)
                    if exact_price_match:
                        final_price = int(exact_price_match.group(1))
                        price_text = f"<b>{final_price}‚ÇΩ</b>"
                    else:
                        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–π —Ü–µ–Ω—ã –Ω–µ—Ç, –∏—â–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                        range_price_match = re.search(r'—Å–æ—Å—Ç–∞–≤–∏—Ç –æ—Ç (\d+)‚ÇΩ', price_request.admin_response)
                        if range_price_match:
                            final_price = int(range_price_match.group(1))
                            price_text = f"–æ—Ç <b>{final_price}‚ÇΩ</b>"

        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
        if not price_text:
            final_price = service.price
            price_text = f"–æ—Ç {service.price}‚ÇΩ"
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å —É—á–µ—Ç–æ–º final_price
        appointment = Appointment(
            user_id=user.id,
            service_id=data['service_id'],
            time_slot_id=data['time_slot_id'],
            car_brand=data['car_brand'],
            car_model=data['car_model'],
            car_year=data['car_year'],
            client_comment=client_comment,
            final_price=final_price,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—É—é –∏–ª–∏ –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
            status="PENDING"
        )
        
        # –ü–æ–º–µ—á–∞–µ–º —Å–ª–æ—Ç –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π
        time_slot.is_available = False
        
        # –ü–æ–º–µ—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π
        next_hour = time_slot.date + timedelta(hours=1)
        next_slot_result = await session.execute(
            select(TimeSlot)
            .where(TimeSlot.date == next_hour)
        )
        next_slot = next_slot_result.scalar_one_or_none()
        
        if next_slot:
            next_slot.is_available = False
            logger.info("–°–ª–µ–¥—É—é—â–∏–π —á–∞—Å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π")
        else:
            # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            next_slot = TimeSlot(date=next_hour, is_available=False)
            session.add(next_slot)
            logger.info("–°–æ–∑–¥–∞–Ω –∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π –Ω–æ–≤—ã–π —Å–ª–æ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å")

        # –ü–æ–º–µ—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞—Å –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π
        prev_hour = time_slot.date - timedelta(hours=1)
        prev_slot_result = await session.execute(
            select(TimeSlot)
            .where(TimeSlot.date == prev_hour)
        )
        prev_slot = prev_slot_result.scalar_one_or_none()
        
        if prev_slot:
            prev_slot.is_available = False
            logger.info("–ü—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞—Å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π")
        else:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª–æ—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            prev_slot = TimeSlot(date=prev_hour, is_available=False)
            session.add(prev_slot)
            logger.info("–°–æ–∑–¥–∞–Ω –∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π –Ω–æ–≤—ã–π —Å–ª–æ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞—Å")
        
        session.add(appointment)
        await session.commit()
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
        await message.answer(
            f"<b>‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> <code>{time_slot.date.strftime('%d.%m.%Y %H:%M')}</code>\n"
            f"üîß <b>–£—Å–ª—É–≥–∞:</b> <code>{service.name}</code>\n"
            f"üöó <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> <code>{data['car_brand']} {data['car_model']} ({data['car_year']})</code>\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{price_text}</code>\n"
            f"‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> <code>{service.duration} –º–∏–Ω.</code>\n\n"
            "<i>‚ÑπÔ∏è –¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. "
            "–ï—Å–ª–∏ —Ü–µ–Ω–∞ –æ–∫–∞–∂–µ—Ç—Å—è –¥–ª—è –≤–∞—Å –≤—ã—Å–æ–∫–æ–π –∏–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ - –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å "
            "–∑–∞–ø–∏—Å—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ üòä üëç</i>\n\n"
            "<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.</b>",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_text = (
            f"<b>üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!</b>\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> <code>{user.full_name}</code>\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{user.phone_number or '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> <code>{time_slot.date.strftime('%d.%m.%Y %H:%M')}</code>\n"
            f"üîß <b>–£—Å–ª—É–≥–∞:</b> <code>{service.name}</code>\n"
            f"üöó <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> <code>{data['car_brand']} {data['car_model']} ({data['car_year']})</code>\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{price_text}</code>\n"
            f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {client_comment or '–ù–µ—Ç'}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in settings.admin_ids:
            try:
                await bot.send_message(
                    admin_id,
                    admin_text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(
                            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                            callback_data=f"confirm_appointment_{appointment.id}"
                        ),
                        InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                            callback_data=f"cancel_appointment_{appointment.id}"
                        )
                    ]]),
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
        
        await state.clear()
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏")
        
    except Exception as e:
        log_error(e)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()


@router.callback_query(F.data.startswith("book_from_price_request_"))
async def book_from_price_request(callback: CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    """
    try:
        logger.info(f"–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å –¥–∞–Ω–Ω—ã–º–∏: {callback.data}")
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        parts = callback.data.split("_")
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ service_id –∏ price_request_id
        if len(parts) >= 4:  # book_from_price_request_{service_id}_{price_request_id}
            service_id = int(parts[-2])  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
            price_request_id = int(parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
            
            logger.info(f"–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: service_id={service_id}, price_request_id={price_request_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            result = await session.execute(
                select(PriceRequest)
                .where(PriceRequest.id == price_request_id)
                .options(
                    selectinload(PriceRequest.service),
                    selectinload(PriceRequest.user)
                )
            )
            price_request = result.scalar_one_or_none()
            
            if not price_request:
                logger.error(f"–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: price_request_id={price_request_id}")
                await callback.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data({
                'service_id': service_id,
                'car_info': price_request.car_info,
                'from_price_request': True,
                'price_request_id': price_request_id,
                'user_id': price_request.user_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                'user_data': {  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    'full_name': price_request.user.full_name,
                    'phone_number': price_request.user.phone_number,
                    'telegram_id': price_request.user.telegram_id
                }
            })
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
            time_slots = await session.execute(
                select(TimeSlot)
                .where(TimeSlot.date >= datetime.now(), TimeSlot.is_available == True)
                .order_by(TimeSlot.date)
            )
            time_slots = time_slots.scalars().all()
            
            if not time_slots:
                await callback.message.edit_text(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(
                            text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data="back_to_main"
                        )]
                    ])
                )
                return

            await state.set_state(AppointmentStates.selecting_date)
            await callback.message.edit_text(
                "*–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:*",
                reply_markup=get_time_slots_keyboard(time_slots),
                parse_mode="Markdown"
            )
        else:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}", exc_info=True)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_main"
                )]
            ])
        )

@router.callback_query(F.data == "create_another_appointment")
async def handle_create_another(callback: CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –µ—â–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
    """
    try:
        await callback.answer()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        msg_manager = MessageManager()
        await state.update_data(msg_manager=msg_manager)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏
        services = await session.execute(
            select(Service)
            .order_by(Service.id)
        )
        services = services.scalars().all()
        
        if not services:
            await callback.message.edit_text(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
        await state.set_state(AppointmentStates.selecting_service)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = (
            "<b>üéØ –ó–∞–ø–∏—Å—å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</b>\n\n"
            "<b>–î–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>\n"
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É\n"
            "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è\n"
            "4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ\n"
            "5Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)\n\n"
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞:</b>"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏
        keyboard = []
        for service in services:
            price_text = f"–æ—Ç {service.price}‚ÇΩ"
            duration_text = f"{service.duration} –º–∏–Ω"
            button_text = f"{service.name} ‚Ä¢ {price_text} ‚Ä¢ ‚è± –û—Ç {duration_text}"
            
            keyboard.append([
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"appointment_select_service_{service.id}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard.append([
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
                callback_data="cancel_booking"
            )
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        try:
            await callback.message.delete()
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
        sent_message = await callback.message.answer(
            welcome_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        await msg_manager.add_message(sent_message)
        
    except Exception as e:
        log_error(e)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏",
            reply_markup=get_main_keyboard()
        )
        await state.clear()


@router.callback_query(F.data == "cancel_specific_appointment")
async def ask_appointment_to_cancel(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    """
    await state.set_state(AppointmentStates.canceling_appointment)
    await callback.message.answer(
        "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å</b> (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É).\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 42</i>",
        parse_mode="HTML"
    )


@router.message(AppointmentStates.canceling_appointment)
async def process_appointment_cancellation(message: Message, session: AsyncSession, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
    """
    try:
        appointment_id = int(message.text)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
        result = await session.execute(
            select(Appointment)
            .where(
                Appointment.id == appointment_id,
                Appointment.user_id == (
                    select(User.id)
                    .where(User.telegram_id == message.from_user.id)
                    .scalar_subquery()
                )
            )
            .options(
                selectinload(Appointment.service),
                selectinload(Appointment.time_slot)
            )
        )
        appointment = result.scalar_one_or_none()
        
        if not appointment:
            await message.answer(
                "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ—ë –æ—Ç–º–µ–Ω—ã.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_main_keyboard()
            )
            await state.clear()
            return
            
        if appointment.status == "CANCELLED":
            await message.answer(
                "‚ùå –≠—Ç–∞ –∑–∞–ø–∏—Å—å —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=get_main_keyboard()
            )
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø–∏—Å–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(appointment_id=appointment_id)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ò–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–ª–∞–Ω—ã",
                    callback_data=f"cancel_reason_plans_{appointment_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ù–∞—à–µ–ª –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ",
                    callback_data=f"cancel_reason_other_place_{appointment_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ù–µ —É—Å—Ç—Ä–æ–∏–ª–∞ —Ü–µ–Ω–∞",
                    callback_data=f"cancel_reason_price_{appointment_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ù–µ –º–æ–≥—É –ø—Ä–∏–µ—Ö–∞—Ç—å",
                    callback_data=f"cancel_reason_cant_come_{appointment_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞",
                    callback_data=f"cancel_reason_custom_{appointment_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –ù–µ –æ—Ç–º–µ–Ω—è—Ç—å",
                    callback_data=f"dont_cancel_{appointment_id}"
                )
            ]
        ])
        
        await state.set_state(AppointmentStates.entering_cancel_reason)
        await message.answer(
            "ü§î –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ.",
            reply_markup=keyboard
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ (—Ü–∏—Ñ—Ä—É).\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 7"
        )
    except Exception as e:
        log_error(e)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()


@router.callback_query(F.data.startswith("cancel_reason_"))
async def handle_cancel_reason_selection(callback: CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã
    """
    try:
        data = await state.get_data()
        appointment_id = data.get('appointment_id')
        
        if not appointment_id:
            await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –ò–∑–º–µ–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ reason_type, —É—á–∏—Ç—ã–≤–∞—è —Ñ–æ—Ä–º–∞—Ç "cancel_reason_cant_come_14"
        parts = callback.data.split("_")
        if len(parts) >= 4:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Å ID –∑–∞–ø–∏—Å–∏
            reason_type = "_".join(parts[2:-1])  # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –º–µ–∂–¥—É "cancel_reason_" –∏ ID
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ ID
            reason_type = parts[2]
        
        if reason_type == "custom":
            await state.set_state(AppointmentStates.entering_cancel_reason)
            await callback.message.edit_text(
                "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data=f"dont_cancel_{appointment_id}"
                    )
                ]])
            )
            return
            
        # –ú–∞–ø–ø–∏–Ω–≥ –ø—Ä–∏—á–∏–Ω –æ—Ç–º–µ–Ω—ã
        reasons = {
            "plans": "–ò–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–ª–∞–Ω—ã",
            "other_place": "–ù–∞—à–µ–ª –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ",
            "price": "–ù–µ —É—Å—Ç—Ä–æ–∏–ª–∞ —Ü–µ–Ω–∞",
            "cant_come": "–ù–µ –º–æ–≥—É –ø—Ä–∏–µ—Ö–∞—Ç—å",
            "other_service": "–ù–∞—à–µ–ª –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å",
            "custom": "–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞"
        }
        
        reason = reasons.get(reason_type)
        if not reason:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã: {reason_type}")
            reason = "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
        result = await session.execute(
            select(Appointment)
            .where(Appointment.id == appointment_id)
            .options(
                selectinload(Appointment.service),
                selectinload(Appointment.time_slot),
                selectinload(Appointment.user)
            )
        )
        appointment = result.scalar_one_or_none()
        
        if not appointment:
            await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        appointment.status = "CANCELLED"
        appointment.cancellation_reason = reason
        appointment.time_slot.is_available = True
        
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å
        if appointment.confirmed_at:
            next_hour = appointment.time_slot.date + timedelta(hours=1)
            next_slot_result = await session.execute(
                select(TimeSlot).where(TimeSlot.date == next_hour)
            )
            next_slot = next_slot_result.scalar_one_or_none()
            if next_slot:
                next_slot.is_available = True
        
        await session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await callback.message.edit_text(
            f"<b>‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n"
            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n\n"
            f"<b>üìÖ –î–∞—Ç–∞:</b> {appointment.time_slot.date.strftime('%d.%m.%Y %H:%M')}\n"
            f"<b>üíá‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞:</b> {appointment.service.name}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]]),
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await send_cancellation_notifications(appointment, reason)
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã: {e}", exc_info=True)
        await callback.message.edit_text(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]])
        )
        await state.clear()

@router.message(AppointmentStates.entering_cancel_reason)
async def handle_custom_cancel_reason(message: Message, session: AsyncSession, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã
    """
    try:
        data = await state.get_data()
        appointment_id = data.get('appointment_id')
        
        if not appointment_id:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
        result = await session.execute(
            select(Appointment)
            .where(Appointment.id == appointment_id)
            .options(
                selectinload(Appointment.service),
                selectinload(Appointment.time_slot),
                selectinload(Appointment.user)
            )
        )
        appointment = result.scalar_one_or_none()
        
        if not appointment:
            await message.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
            
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        appointment.status = "CANCELLED"
        appointment.cancellation_reason = message.text
        appointment.time_slot.is_available = True
        
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å
        if appointment.confirmed_at:
            next_hour = appointment.time_slot.date + timedelta(hours=1)
            next_slot_result = await session.execute(
                select(TimeSlot).where(TimeSlot.date == next_hour)
            )
            next_slot = next_slot_result.scalar_one_or_none()
            if next_slot:
                next_slot.is_available = True
        
        await session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await message.answer(
            f"<b>‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n"
            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {message.text}\n\n"
            f"<b>üìÖ –î–∞—Ç–∞:</b> {appointment.time_slot.date.strftime('%d.%m.%Y %H:%M')}\n"
            f"<b>üíá‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞:</b> {appointment.service.name}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]]),
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await send_cancellation_notifications(appointment, message.text)
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø—Ä–∏—á–∏–Ω—ã: {e}", exc_info=True)
        await message.answer(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
        await state.clear()

@router.callback_query(F.data.startswith("dont_cancel_"))
async def cancel_cancellation(callback: CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    """
    –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
    """
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏
        appointment_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        result = await session.execute(
            select(Appointment)
            .where(Appointment.id == appointment_id)
            .options(
                selectinload(Appointment.service),
                selectinload(Appointment.time_slot)
            )
        )
        appointment = result.scalar_one_or_none()
        
        if not appointment:
            await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏
        status_emoji = "‚úÖ" if appointment.status == "CONFIRMED" else "üïê"
        price_text = f"{appointment.final_price}‚ÇΩ" if appointment.final_price else f"–æ—Ç {appointment.service.price}‚ÇΩ"
        
        text = (
            f"{status_emoji} –ó–∞–ø–∏—Å—å #{appointment.id}\n"
            f"üìÖ –î–∞—Ç–∞: {appointment.time_slot.date.strftime('%d.%m.%Y %H:%M')}\n"
            f"<b>üíá‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞:</b> {appointment.service.name}\n"
            f"<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price_text}\n"
            f"<b>üìä –°—Ç–∞—Ç—É—Å:</b> {CANCELLATION_REASONS[appointment.status]}"
        )
        
        keyboard = [
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
                callback_data=f"client_cancel_appointment_{appointment.id}"
            )],
            [InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data="back_to_profile"
            )]
        ]
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("client_cancel_appointment_"))
async def start_cancel_appointment(callback: CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–º
    """
    try:
        appointment_id = int(callback.data.split("_")[3])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
        result = await session.execute(
            select(Appointment)
            .where(
                Appointment.id == appointment_id,
                Appointment.user_id == (
                    select(User.id)
                    .where(User.telegram_id == callback.from_user.id)
                    .scalar_subquery()
                )
            )
            .options(
                selectinload(Appointment.time_slot),
                selectinload(Appointment.service)
            )
        )
        appointment = result.scalar_one_or_none()
        
        if not appointment:
            await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
        if appointment.status == "COMPLETED":
            await callback.answer(
                "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å",
                show_alert=True
            )
            return
            
        if appointment.status == "CANCELLED":
            await callback.answer(
                "‚ùå –≠—Ç–∞ –∑–∞–ø–∏—Å—å —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                show_alert=True
            )
            return
        
        await state.update_data(appointment_id=appointment_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏ –æ—Ç–º–µ–Ω—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ò–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–ª–∞–Ω—ã",
                    callback_data=f"cancel_reason_plans_{appointment_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ù–∞—à–µ–ª –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ",
                    callback_data=f"cancel_reason_other_place_{appointment_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ù–µ —É—Å—Ç—Ä–æ–∏–ª–∞ —Ü–µ–Ω–∞",
                    callback_data=f"cancel_reason_price_{appointment_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ù–µ –º–æ–≥—É –ø—Ä–∏–µ—Ö–∞—Ç—å",
                    callback_data=f"cancel_reason_cant_come_{appointment_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞",
                    callback_data=f"cancel_reason_custom_{appointment_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –ù–µ –æ—Ç–º–µ–Ω—è—Ç—å",
                    callback_data=f"dont_cancel_{appointment_id}"
                )
            ]
        ])
        
        await callback.message.edit_text(
            "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏:</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏")

async def send_cancellation_notifications(appointment: Appointment, reason: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç—É –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    client_text = (
        "<b>‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n"
        f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> <i>{reason}</i>\n\n"
        f"<b>üìÖ –î–∞—Ç–∞:</b> <code>{appointment.time_slot.date.strftime('%d.%m.%Y %H:%M')}</code>\n"
        f"<b>üíá‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞:</b> <code>{appointment.service.name}</code>\n\n"
        "<i>–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.</i>"
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    admin_text = (
        "<b>‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å!</b>\n\n"
        f"<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> <code>{appointment.user.full_name}</code>\n"
        f"<b>üìÖ –î–∞—Ç–∞:</b> <code>{appointment.time_slot.date.strftime('%d.%m.%Y %H:%M')}</code>\n"
        f"<b>üíá‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞:</b> <code>{appointment.service.name}</code>\n"
        f"<b>‚ùì –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã:</b> <i>{reason}</i>"
    )
    
    for admin_id in settings.admin_ids:
        try:
            await bot.send_message(
                admin_id,
                admin_text,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            
    return client_text

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def clear_previous_messages(state: FSMContext, chat_id: int, bot: Bot) -> None:
    """
    –û—á–∏—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏
    """
    try:
        data = await state.get_data()
        msg_manager: Optional[MessageManager] = data.get("msg_manager")
        
        if msg_manager:
            await msg_manager.delete_messages(chat_id, bot)
            
    except Exception as e:
        log_error(e)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")