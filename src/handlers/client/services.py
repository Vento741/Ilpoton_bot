# src/handlers/client/services.py

from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from loguru import logger

from config.settings import settings
from database.models import Service, User, PriceRequest
from keyboards.client.client import get_main_keyboard, get_services_keyboard
from states.client import ServiceStates
from core.utils.logger import log_error

router = Router()

@router.message(F.text == "üí∞ –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã")
async def show_services_command(message: Message, session: AsyncSession) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∏ —Ü–µ–Ω (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã)
    """
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –∏–∑ –ë–î
        services = await session.execute(
            select(Service)
            .order_by(Service.id)
        )
        services = services.scalars().all()
        
        if not services:
            await message.answer(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Å–ª—É–≥ –≤ HTML
        message_text = (
            "<b>üöò –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã</b>\n\n"
            "<b>‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b> —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã —è–≤–ª—è—é—Ç—Å—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–º–∏.\n"
            "<b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:</b>\n"
            "1Ô∏è‚É£ <code>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —É—Å–ª—É–≥—É</code>\n"
            "2Ô∏è‚É£ <code>–í —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è</code>\n" 
            "3Ô∏è‚É£ <code>–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç (–≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç)</code>\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n\n"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏
        keyboard = get_services_keyboard(services)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_to_main"
            )
        ])
        
        await message.answer(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        log_error(e)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥",
            reply_markup=get_main_keyboard()
        )

@router.callback_query(F.data == "services_and_prices")
async def show_services(callback: CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∏ —Ü–µ–Ω
    """
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥")
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –∏–∑ –ë–î
        services = await session.execute(
            select(Service)
            .order_by(Service.id)
        )
        services = services.scalars().all()
        
        if not services:
            await callback.message.answer(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Å–ª—É–≥ –≤ HTML
        message_text = (
            "<b>üöò –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã</b>\n\n"
            "<b>‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b> —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã —è–≤–ª—è—é—Ç—Å—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–º–∏.\n"
            "<b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:</b>\n"
            "1Ô∏è‚É£ <code>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —É—Å–ª—É–≥—É</code>\n"
            "2Ô∏è‚É£ <code>–í —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è</code>\n" 
            "3Ô∏è‚É£ <code>–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç (–≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç)</code>\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n\n"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏
        keyboard = get_services_keyboard(services)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_to_main"
            )
        ])
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            previous_message_id = data.get("previous_message_id")
            
            if previous_message_id:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback.message.bot.delete_message(
                        callback.message.chat.id,
                        previous_message_id
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            edited_message = await callback.message.edit_text(
                message_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await state.update_data(previous_message_id=edited_message.message_id)
            
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ),
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_message = await callback.message.answer(
                message_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await state.update_data(previous_message_id=new_message.message_id)
        
    except Exception as e:
        log_error(e)
        try:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except:
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )

@router.callback_query(F.data.startswith("appointment_select_service_"))
async def select_service(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
    """
    try:
        service_id = int(callback.data.split("_")[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É
        service = await session.get(Service, service_id)
        if not service:
            await callback.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É—Å–ª—É–≥–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(service_id=service_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üí∞ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                callback_data=f"request_price_{service_id}"
            )],
            [InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥",
                callback_data="services_and_prices"
            )]
        ])
        
        message_text = (
            f"<b>üîΩ –í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É:</b>\n\n"
            f"<b>{service.name}</b>\n"
            f"<i>{service.description}</i>\n\n"
            f"<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>–æ—Ç {service.price}‚ÇΩ</code>\n"
            f"<b>üïí –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> <code>–æ—Ç {service.duration} –º–∏–Ω.</code>\n\n"
            f"<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.</i>"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if service.image_id:
            sent_message = await callback.message.answer_photo(
                photo=service.image_id,
                caption=message_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await state.update_data(previous_message_id=sent_message.message_id)
            await callback.message.delete()
        else:
            edited_message = await callback.message.edit_text(
                message_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await state.update_data(previous_message_id=edited_message.message_id)
        
    except Exception as e:
        log_error(e)
        await callback.message.edit_text(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å–ª—É–≥–∏</b>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="services_and_prices")]
            ]),
            parse_mode="HTML"
        )

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"
@router.callback_query(F.data.startswith("request_price_"))
async def request_price(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    """
    try:
        service_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É
        service = await session.get(Service, service_id)
        if not service:
            await callback.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        await state.set_state(ServiceStates.waiting_for_car_info)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å",
                callback_data=f"appointment_select_service_{service_id}"
            )]
        ])
        
        message_text = (
            f"<b>üìù –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏</b>\n"
            f"<i>{service.name}</i>\n\n"
            f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:</b>\n"
            f"<code>‚Ä¢ –ú–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è</code>\n"
            f"<code>‚Ä¢ –ú–æ–¥–µ–ª—å</code>\n"
            f"<code>‚Ä¢ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞</code>\n\n"
            f"<b>‚ú≥Ô∏è –ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            f"<i>üÜóToyota Camry 2020</i>\n"
            f"<i>üÜó–¢–æ–π–æ—Ç–∞ –ö–∞–º—Ä–∏ 2020</i>"
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        data = await state.get_data()
        previous_message_id = data.get("previous_message_id")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if callback.message.photo:
            new_message = await callback.message.answer_photo(
                photo=callback.message.photo[-1].file_id,
                caption=message_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            new_message = await callback.message.answer(
                message_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.update_data(previous_message_id=new_message.message_id)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
            await callback.message.delete()
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
            if "message to delete not found" not in str(e).lower():
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ callback: {e}")

        if previous_message_id:
            try:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.bot.delete_message(
                    chat_id=callback.message.chat.id,
                    message_id=previous_message_id
                )
            except Exception as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
                if "message to delete not found" not in str(e).lower():
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
    except Exception as e:
        log_error(e)
        await callback.message.answer(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏</b>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"appointment_select_service_{service_id}")]
            ]),
            parse_mode="HTML"
        )

@router.message(ServiceStates.waiting_for_car_info, F.text)
async def process_car_info(message: Message, state: FSMContext, session: AsyncSession, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–æ–º
        if message.from_user.username and message.from_user.username.lower().endswith('bot'):
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –±–æ—Ç–∞: {message.from_user.username}. –ó–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏.")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        service_id = data.get("service_id")
        previous_message_id = data.get("previous_message_id")
        
        if not service_id:
            await message.answer(
                "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.</b>",
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
            await state.clear()
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥—É
        service = await session.get(Service, service_id)
        if not service:
            await message.answer(
                "<b>‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.</b>",
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(car_info=message.text)
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –î–∞, –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å",
                    callback_data="add_question"
                ),
                InlineKeyboardButton(
                    text="‚û°Ô∏è –ù–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å",
                    callback_data="send_request"
                )
            ]
        ])
        
        sent_message = await message.answer(
            "<b>üöó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –ø–æ–ª—É—á–µ–Ω–∞</b>\n\n"
            "<i>–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É—Å–ª—É–≥–µ?</i>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        await state.update_data(question_message_id=sent_message.message_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(ServiceStates.waiting_for_question_choice)
        
    except Exception as e:
        log_error(e)
        await message.answer(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞</b>",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
        await state.clear()

@router.callback_query(F.data == "add_question", ServiceStates.waiting_for_question_choice)
async def request_additional_question(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.delete()
        
        await callback.message.answer(
            "<b>üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n\n"
            "<i>–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º —ç—Ç–æ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.</i>",
            parse_mode="HTML"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(ServiceStates.waiting_for_question)
        
    except Exception as e:
        log_error(e)
        await callback.message.edit_text(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
        await state.clear()

@router.message(ServiceStates.waiting_for_question, F.text)
async def process_additional_question(message: Message, state: FSMContext, session: AsyncSession, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        car_info = data.get("car_info")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
        await create_price_request(message, state, session, bot, car_info, message.text)
        
    except Exception as e:
        log_error(e)
        await message.answer(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏</b>",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )

@router.callback_query(F.data == "send_request", ServiceStates.waiting_for_question_choice)
async def send_request_without_question(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.delete()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É, –ø–µ—Ä–µ–¥–∞–≤–∞—è callback –≤–º–µ—Å—Ç–æ callback.message
        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π from_user (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –±–æ—Ç–∞)
        await create_price_request(callback, state, session, bot, data["car_info"])
        
    except Exception as e:
        log_error(e)
        await callback.message.edit_text(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏</b>",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )

async def create_price_request(event, state: FSMContext, session: AsyncSession, bot: Bot, car_info: str, additional_question: str = None) -> None:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    
    Args:
        event: –ú–æ–∂–µ—Ç –±—ã—Ç—å Message –∏–ª–∏ CallbackQuery
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        car_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        additional_question: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    try:
        data = await state.get_data()
        service_id = data.get("service_id")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ event —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ callback
        if hasattr(event, 'message'):
            # –≠—Ç–æ CallbackQuery
            user_id = event.from_user.id
            username = event.from_user.username
            full_name = event.from_user.full_name
            chat_id = event.message.chat.id
        else:
            # –≠—Ç–æ Message
            user_id = event.from_user.id
            username = event.from_user.username
            full_name = event.from_user.full_name
            chat_id = event.chat.id
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID={user_id}, username={username}, full_name={full_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–æ–º
        is_bot = False
        if username and username.lower().endswith('bot'):
            is_bot = True
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –±–æ—Ç–∞: {username}. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã.")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            user = User(
                telegram_id=user_id,
                username=username,
                full_name=full_name
            )
            session.add(user)
            await session.flush()
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥—É
        service = await session.get(Service, service_id)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        price_request = PriceRequest(
            user_id=user.id,
            service_id=service_id,
            car_info=car_info,
            additional_question=additional_question,
            status="PENDING"
        )
        session.add(price_request)
        await session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        confirmation_text = (
            "<b>‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.</b>\n\n"
            f"<b>üìå –£—Å–ª—É–≥–∞:</b> <i>{service.name}</i>\n"
            f"<b>üöò –ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> <code>{car_info}</code>"
        )
        
        if additional_question:
            confirmation_text += f"\n<b>‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å:</b> <i>{additional_question}</i>"
            
        confirmation_text += (
            "\n\n<b>üë®‚Äçüíº –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n"
            "–¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏.</b>"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if hasattr(event, 'message'):
            # –≠—Ç–æ CallbackQuery
            await bot.send_message(
                chat_id,
                confirmation_text,
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
        else:
            # –≠—Ç–æ Message
            await event.answer(
                confirmation_text,
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_message = (
            "<b>üÜï –ù–û–í–´–ô –ó–ê–ü–†–û–° –†–ê–°–ß–ï–¢–ê –°–¢–û–ò–ú–û–°–¢–ò</b>\n\n"
            f"<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> <code>{user.full_name}</code>\n"
            f"<b>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{user.phone_number or '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n"
            f"<b>üöò –ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> <code>{car_info}</code>\n"
            f"<b>üíá‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞:</b> <i>{service.name}</i>\n"
            f"<b>üí∞ –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>–æ—Ç {service.price}‚ÇΩ</code>"
        )
        
        if is_bot:
            admin_message += f"\n\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ ({username}). –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã."
        
        if additional_question:
            admin_message += f"\n<b>‚ùì –í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞:</b> <i>{additional_question}</i>"
        
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å",
                callback_data=f"respond_price_{price_request.id}"
            )]
        ])
        
        for admin_id in settings.admin_ids:
            try:
                await bot.send_message(
                    admin_id,
                    admin_message,
                    reply_markup=admin_keyboard,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        log_error(e)
        raise e

