"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
"""

from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.enums.parse_mode import ParseMode
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from loguru import logger
import re

from database.models import User, Prize, SlotSpin
from core.utils.slot_machine import generate_slot_combination, check_win, format_slot_result
from core.utils.referral import generate_referral_link, get_referral_stats
from core.utils.subscription import is_subscribed, get_channel_info, CHANNEL_ID
from keyboards.client.slot_machine import (
    get_slot_machine_keyboard, 
    get_subscription_keyboard, 
    get_prizes_list_keyboard, 
    get_prize_keyboard,
    get_win_celebration_keyboard
)
from core.utils.slot_machine import animate_slot_machine
from config.settings import settings

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ref (–ø–æ–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏)
@router.message(Command("ref"))
async def cmd_referral(
    message: Message, 
    session: AsyncSession,
    bot: Bot
):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    """
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    ref_link = await generate_referral_link(user_id, bot)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    invited_count, attempts = await get_referral_stats(user_id, session)
    
    await message.answer(
        f"üìä <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{invited_count}</b>\n"
        f"üé∞ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–µ: <b>{attempts}</b>\n\n"
        f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n{ref_link}\n\n"
        f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +1 –ø–æ–ø—ã—Ç–∫—É –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–µ!",
        parse_mode=ParseMode.HTML
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
@router.message(F.text == "üé∞ –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞")
async def slot_machine_menu(
    message: Message, 
    session: AsyncSession,
    bot: Bot
):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    if not await is_subscribed(user_id, bot):
        channel_name = await get_channel_info(bot) or "–Ω–∞—à –∫–∞–Ω–∞–ª"
        await message.answer(
            f"‚ùå <b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª</b> {CHANNEL_ID}\n\n"
            f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.",
            reply_markup=get_subscription_keyboard(channel_name),
            parse_mode=ParseMode.HTML
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    result = await session.execute(
        select(User).where(User.telegram_id == user_id)
    )
    user = result.scalar_one_or_none()
    
    if not user:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–µ
    await message.answer(
        "üé∞ <b>–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ ILPO-TON</b>\n\n"
        "<i>–ò—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞–π—Ç–µ —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã!</i>\n\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ø—ã—Ç–æ–∫:</b> {user.attempts if user else 1}\n\n"
        "<b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
        "‚Ä¢ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ = <b>–ø—Ä–∏–∑</b>\n"
        "‚Ä¢ 2 –∏–ª–∏ –±–æ–ª–µ–µ üçí = <b>–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞</b>\n"
        "‚Ä¢ –ë–∞–∑–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞: <b>1 —Ä–∞–∑ –≤ –¥–µ–Ω—å</b>\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞ <b>–ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π</b>",
        reply_markup=get_slot_machine_keyboard(),
        parse_mode=ParseMode.HTML
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(F.data == "check_subscription")
async def check_subscription(
    callback: CallbackQuery, 
    session: AsyncSession,
    bot: Bot
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
    """
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    if await is_subscribed(callback.from_user.id, bot):
        await callback.message.edit_text(
            "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É.",
            reply_markup=None,
            parse_mode=ParseMode.HTML
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
        await callback.message.answer(
            "üé∞ <b>–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ ILPO-TON</b>\n\n"
            "<i>–ò—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞–π—Ç–µ —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã!</i>\n\n"
            f"<b>–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ø—ã—Ç–æ–∫:</b> {user.attempts if user else 1}\n\n"
            "<b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
            "‚Ä¢ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ = <b>–ø—Ä–∏–∑</b>\n"
            "‚Ä¢ 2 –∏–ª–∏ –±–æ–ª–µ–µ üçí = <b>–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞</b>\n"
            "‚Ä¢ –ë–∞–∑–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞: <b>1 —Ä–∞–∑ –≤ –¥–µ–Ω—å</b>\n"
            "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞ <b>–ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π</b>",
            reply_markup=get_slot_machine_keyboard(),
            parse_mode=ParseMode.HTML
        )
    else:
        channel_name = await get_channel_info(bot) or "–Ω–∞—à –∫–∞–Ω–∞–ª"
        await callback.message.edit_text(
            "‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞</b>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID} –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–Ω–æ–≤–∞.",
            reply_markup=get_subscription_keyboard(channel_name),
            parse_mode=ParseMode.HTML
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
@router.callback_query(F.data == "spin_slot")
async def spin_slot_machine(
    callback: CallbackQuery, 
    session: AsyncSession,
    bot: Bot
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        if not await is_subscribed(callback.from_user.id, bot):
            channel_name = await get_channel_info(bot)
            await callback.message.edit_text(
                "‚ö†Ô∏è –î–ª—è –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!",
                reply_markup=get_subscription_keyboard(channel_name or "–Ω–∞—à –∫–∞–Ω–∞–ª")
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        if user.attempts <= 0:
            await callback.answer("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏!", show_alert=True)
            return
            
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        user.attempts -= 1
        await session.commit()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
        combination = generate_slot_combination()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        initial_message = await callback.message.edit_text(
            "üé∞ –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...\n\n" + format_slot_result(('‚ùì', '‚ùì', '‚ùì'))
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        await animate_slot_machine(initial_message, combination)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        prize_text, extra_attempts = check_win(combination)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ø—ã—Ç–∫–µ –≤ —Ç–∞–±–ª–∏—Ü–µ slot_spins
        slot_spin = SlotSpin(
            user_id=user.id,
            combination=format_slot_result(combination),
            result=prize_text,
            created_at=datetime.now()
        )
        session.add(slot_spin)
        
        # –ï—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª–∏ –ø—Ä–∏–∑ (–Ω–µ –ø—Ä–æ—Å—Ç–æ –¥–æ–ø. –ø–æ–ø—ã—Ç–∫—É)
        if prize_text != "–ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!" and prize_text != "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞":
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–∑–µ –≤ –ë–î
            new_prize = Prize(
                user_id=user.id,
                prize_name=prize_text,
                combination=format_slot_result(combination),
                status="PENDING",
                created_at=datetime.now()
            )
            session.add(new_prize)
            await session.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –ø—Ä–∏–∑–∞
            
            # –°–≤—è–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ø—ã—Ç–∫–µ —Å –ø—Ä–∏–∑–æ–º
            slot_spin.prize_id = new_prize.id
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å—Ç—Ä–∞ –ø–æ–ø—ã—Ç–∫–∏, –µ—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª–∏ –∏—Ö
            if extra_attempts > 0:
                user.attempts += extra_attempts
            
            await session.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            result_text = (
                f"üé∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n\n"
                f"{format_slot_result(combination)}\n\n"
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏:</b>\n"
                f"{prize_text}\n\n"
                f"–û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ø—ã—Ç–∫–∏: {user.attempts}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–∑–µ
            await callback.message.edit_text(
                result_text,
                reply_markup=get_win_celebration_keyboard(new_prize.id),
                parse_mode=ParseMode.HTML
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –≤—ã–∏–≥—Ä—ã—à–µ
            admin_notification = (
                f"üéØ <b>–ù–æ–≤—ã–π –≤—ã–∏–≥—Ä—ã—à –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–µ!</b>\n\n"
                f"üë§ –ò–≥—Ä–æ–∫: {user.full_name}\n"
                f"üÜî ID: {user.telegram_id}\n"
                f"üéÅ –ü—Ä–∏–∑: {prize_text}\n"
                f"üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {format_slot_result(combination)}"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏–∑",
                        callback_data=f"confirm_slot_prize_{new_prize.id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—é",
                        url=f"tg://user?id={user.telegram_id}"
                    )
                ]
            ])
            
            for admin_id in settings.admin_ids:
                try:
                    await bot.send_message(
                        chat_id=admin_id,
                        text=admin_notification,
                        reply_markup=admin_keyboard,
                        parse_mode=ParseMode.HTML
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                    
        else:
            # –ï—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
            if prize_text == "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞":
                user.attempts += extra_attempts
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            result_text = (
                f"üé∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n\n"
                f"{format_slot_result(combination)}\n\n"
                f"{prize_text}\n\n"
                f"–û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ø—ã—Ç–∫–∏: {user.attempts}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            await callback.message.edit_text(
                result_text,
                reply_markup=get_slot_machine_keyboard(),
                parse_mode=ParseMode.HTML
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑–æ–≤
@router.callback_query(F.data == "my_prizes")
@router.callback_query(F.data.startswith("prizes_page_"))
async def show_my_prizes(
    callback: CallbackQuery, 
    session: AsyncSession
):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    user_id = callback.from_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = 1
    if callback.data.startswith("prizes_page_"):
        page = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user_result = await session.execute(
        select(User).where(User.telegram_id == user_id)
    )
    user = user_result.scalar_one_or_none()
    
    if not user:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    prizes_result = await session.execute(
        select(Prize.id, Prize.prize_name, Prize.combination, Prize.status, Prize.created_at, Prize.confirmed_at, Prize.used_at, Prize.admin_comment)
        .where(Prize.user_id == user.id)
        .order_by(Prize.created_at.desc())
    )
    prizes = prizes_result.all()
    
    if not prizes:
        await callback.message.edit_text(
            "üèÜ <b>–ú–æ–∏ –ø—Ä–∏–∑—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É!",
            reply_markup=InlineKeyboardBuilder().row(
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ).as_markup(),
            parse_mode=ParseMode.HTML
        )
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items_per_page = 3
    total_pages = (len(prizes) + items_per_page - 1) // items_per_page
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 1:
        page = 1
    elif page > total_pages:
        page = total_pages
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(prizes))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    current_page_prizes = prizes[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    prizes_data = [(prize.id, prize.prize_name, prize.status) for prize in current_page_prizes]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard = get_prizes_list_keyboard(prizes_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_row = []
    
    if page > 1:
        pagination_row.append(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prizes_page_{page-1}")
        )
    
    pagination_row.append(
        InlineKeyboardButton(text=f"üìÑ {page}/{total_pages}", callback_data="prizes_page_info")
    )
    
    if page < total_pages:
        pagination_row.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"prizes_page_{page+1}")
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard.inline_keyboard.append(pagination_row)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        "üèÜ <b>–ú–æ–∏ –ø—Ä–∏–∑—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
        "<i>‚è≥ - –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        "‚úÖ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n"
        "‚ùå - –æ—Ç–∫–ª–æ–Ω–µ–Ω\n"
        "üéâ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</i>"
    )
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–∑–µ
@router.callback_query(F.data.startswith("show_prize_"))
async def show_prize_info(
    callback: CallbackQuery, 
    session: AsyncSession
):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–∏–∑–µ
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–∏–∑–∞ –∏–∑ callback_data
    prize_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∑–µ
    prize_result = await session.execute(
        select(Prize).where(Prize.id == prize_id)
    )
    prize = prize_result.scalar_one_or_none()
    
    if not prize:
        await callback.answer("–ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_result = await session.execute(
        select(User).where(User.id == prize.user_id)
    )
    user = user_result.scalar_one_or_none()
    
    if not user or user.telegram_id != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–∏–∑—É.", show_alert=True)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —ç–º–æ–¥–∑–∏
    status_info = {
        "PENDING": {
            "emoji": "‚è≥",
            "text": "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
            "description": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞—à –≤—ã–∏–≥—Ä—ã—à"
        },
        "CONFIRMED": {
            "emoji": "‚úÖ",
            "text": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
            "description": "–ü—Ä–∏–∑ –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é"
        },
        "REJECTED": {
            "emoji": "‚ùå",
            "text": "–û—Ç–∫–ª–æ–Ω–µ–Ω",
            "description": "–ü—Ä–∏–∑ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        },
        "USED": {
            "emoji": "üéâ",
            "text": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω",
            "description": "–ü—Ä–∏–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω"
        }
    }.get(prize.status, {
        "emoji": "‚ùì",
        "text": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å",
        "description": ""
    })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–∑–µ
    message_text = (
        f"{status_info['emoji']} <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–∑–µ #{prize.id}</b>\n\n"
        f"üéÅ <b>–ü—Ä–∏–∑:</b> {prize.prize_name}\n"
        f"üé∞ <b>–í—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è:</b>\n{prize.combination}\n"
        f"üìÖ <b>–î–∞—Ç–∞ –≤—ã–∏–≥—Ä—ã—à–∞:</b> {prize.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_info['text']}\n"
        f"‚ÑπÔ∏è <i>{status_info['description']}</i>\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
    if prize.status in ["CONFIRMED", "REJECTED"]:
        message_text += f"\nüìù <b>–î–∞—Ç–∞ {status_info['text'].lower()}:</b> {prize.confirmed_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        if prize.status == "CONFIRMED":
            message_text += (
                "\nüèÜ <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑:</b>\n"
                "1. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å\n"
                "2. –ê–¥—Ä–µ—Å: <b>—É–ª.–ö–∞–ª–∏–Ω–∏–Ω–∞ 128–ê –∫2</b>\n"
                "3. –ü—Ä–∏ —Å–µ–±–µ –∏–º–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π –ª–∏—á–Ω–æ—Å—Ç—å\n"
                "\n‚è∞ <i>–ü—Ä–∏–∑ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π</i>"
            )
        elif prize.status == "REJECTED":
            reject_reason = getattr(prize, 'reject_reason', None) or prize.admin_comment or "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            message_text += f"\n‚ùóÔ∏è <b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</b>\n{reject_reason}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if prize.admin_comment and prize.status != "REJECTED":
        message_text += f"\nüë®‚Äçüíº <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n{prize.admin_comment}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤
    if prize.status == "CONFIRMED":
        keyboard.append([
            InlineKeyboardButton(
                text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                url="https://t.me/Juli_Shriman"
            )
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏–∑–∞ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        if callback.from_user.id in settings.admin_ids:
            keyboard.append([
                InlineKeyboardButton(
                    text="üéâ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω—ã–π",
                    callback_data=f"mark_prize_used_{prize.id}"
                )
            ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([
        InlineKeyboardButton(
            text="üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–∏–∑–æ–≤",
            callback_data="my_prizes"
        )
    ])
    
    await callback.message.edit_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode=ParseMode.HTML
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–∑–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
@router.message(Command("confirm_prize"))
async def cmd_confirm_prize(
    message: Message, 
    session: AsyncSession,
    bot: Bot,
    user: User
):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–∏–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if not user.is_admin:
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–∏–∑–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    command_parts = message.text.split()
    if len(command_parts) < 2:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–∏–∑–∞.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/confirm_prize 123</code>",
            parse_mode=ParseMode.HTML
        )
        return
    
    try:
        prize_id = int(command_parts[1])
    except ValueError:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> ID –ø—Ä–∏–∑–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∑–µ
    prize_result = await session.execute(
        select(Prize).where(Prize.id == prize_id)
    )
    prize = prize_result.scalar_one_or_none()
    
    if not prize:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> –ü—Ä–∏–∑ —Å ID {prize_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–∏–∑
    if prize.status != "PENDING":
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> –ü—Ä–∏–∑ —Å ID {prize_id} —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å {prize.status}.",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_result = await session.execute(
        select(User).where(User.id == prize.user_id)
    )
    winner = user_result.scalar_one_or_none()
    
    if not winner:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–∏–≥—Ä–∞–≤—à–∏–π –ø—Ä–∏–∑, –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    admin_comment = None
    if len(command_parts) > 2:
        admin_comment = " ".join(command_parts[2:])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–∑–∞
    prize.status = "CONFIRMED"
    prize.confirmed_at = datetime.now()
    if admin_comment:
        prize.admin_comment = admin_comment
    
    await session.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_notification = (
        f"üéâ <b>–í–∞—à –ø—Ä–∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
        f"<b>–ü—Ä–∏–∑:</b> {prize.prize_name}\n"
        f"<b>–í—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è:</b> {prize.combination}\n\n"
        f"<b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞:</b>\n"
        f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –ø–æ –∞–¥—Ä–µ—Å—É: <b>—É–ª.–ö–∞–ª–∏–Ω–∏–Ω–∞ 128–ê –∫2</b>\n"
        f"–ü—Ä–∏ —Å–µ–±–µ –∏–º–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π –ª–∏—á–Ω–æ—Å—Ç—å.\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if admin_comment:
        user_notification += f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n{admin_comment}\n\n"
    
    user_notification += "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    
    try:
        await bot.send_message(
            chat_id=winner.telegram_id,
            text=user_notification,
            parse_mode=ParseMode.HTML
        )
        
        await message.answer(
            f"‚úÖ <b>–ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {winner.full_name}.",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {winner.telegram_id}: {e}")
        await message.answer(
            f"‚ö†Ô∏è <b>–ü—Ä–∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.</b>\n"
            f"–û—à–∏–±–∫–∞: {str(e)}",
            parse_mode=ParseMode.HTML
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞
@router.message(Command("notify_prize"))
async def cmd_notify_prize(
    message: Message, 
    session: AsyncSession,
    bot: Bot,
    user: User
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —è–≤–∏—Ç—å—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if not user.is_admin:
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–∏–∑–∞ –∏ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    command_parts = message.text.split(maxsplit=2)
    if len(command_parts) < 3:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–∏–∑–∞ –∏ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/notify_prize 123 –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ —Å 10:00 –¥–æ 18:00</code>",
            parse_mode=ParseMode.HTML
        )
        return
    
    try:
        prize_id = int(command_parts[1])
        notification_text = command_parts[2]
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/notify_prize 123 –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ —Å 10:00 –¥–æ 18:00</code>",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∑–µ
    prize_result = await session.execute(
        select(Prize).where(Prize.id == prize_id)
    )
    prize = prize_result.scalar_one_or_none()
    
    if not prize:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> –ü—Ä–∏–∑ —Å ID {prize_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–∑–∞
    if prize.status != "CONFIRMED":
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> –ü—Ä–∏–∑ —Å ID {prize_id} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å {prize.status}. "
            f"–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤.",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_result = await session.execute(
        select(User).where(User.id == prize.user_id)
    )
    winner = user_result.scalar_one_or_none()
    
    if not winner:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–∏–≥—Ä–∞–≤—à–∏–π –ø—Ä–∏–∑, –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    prize.admin_comment = notification_text
    await session.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_notification = (
        f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞</b>\n\n"
        f"<b>–ü—Ä–∏–∑:</b> {prize.prize_name}\n\n"
        f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n{notification_text}\n\n"
        f"<b>–ê–¥—Ä–µ—Å –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞:</b> —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123\n"
        f"<b>–ü—Ä–∏ —Å–µ–±–µ –∏–º–µ—Ç—å:</b> –¥–æ–∫—É–º–µ–Ω—Ç, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π –ª–∏—á–Ω–æ—Å—Ç—å\n\n"
        f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    
    try:
        await bot.send_message(
            chat_id=winner.telegram_id,
            text=user_notification,
            parse_mode=ParseMode.HTML
        )
        
        await message.answer(
            f"‚úÖ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {winner.full_name}!</b>",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {winner.telegram_id}: {e}")
        await message.answer(
            f"‚ö†Ô∏è <b>–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.</b>\n"
            f"–û—à–∏–±–∫–∞: {str(e)}",
            parse_mode=ParseMode.HTML
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
@router.callback_query(F.data == "show_referrals")
async def show_referrals(
    callback: CallbackQuery, 
    session: AsyncSession,
    bot: Bot
):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await callback.answer()
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
    invited_count, attempts_from_referrals = await get_referral_stats(user_id, session)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    ref_link = await generate_referral_link(user_id, bot)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
    message_text = (
        "<b>üìä –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"<b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:</b> {invited_count}\n"
        f"<b>–ü–æ–ª—É—á–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫:</b> {attempts_from_referrals}\n\n"
        "<i>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</i>\n"
        f"<code>{ref_link}</code>\n\n"
        "<i>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–µ!</i>"
    )
    
    await callback.message.edit_text(
        message_text,
        reply_markup=InlineKeyboardBuilder().row(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ).as_markup(),
        parse_mode=ParseMode.HTML
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø—Ä–∞–≤–∏–ª
@router.callback_query(F.data == "slot_rules")
async def show_rules(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
    """
    await callback.answer()
    
    message_text = (
        "<b>‚ùì –ü—Ä–∞–≤–∏–ª–∞ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã</b>\n\n"
        "<b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ö—Ä—É—Ç–∏—Ç—å –±–∞—Ä–∞–±–∞–Ω¬ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞\n"
        "‚Ä¢ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>2 –±–∞–∑–æ–≤—ã–µ –ø–æ–ø—ã—Ç–∫–∏</b>\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, <b>–ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π</b>\n\n"
        "<b>–ü—Ä–∏–∑—ã:</b>\n"
        "‚Ä¢ <b>üíéüíéüíé</b> ‚Äî –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ —Ä–µ–º–æ–Ω—Ç 1500‚ÇΩ\n"
        "‚Ä¢ <b>üéâüéâüéâ</b> ‚Äî –°–∫–∏–¥–∫–∞ 10% –Ω–∞ —Ç–æ–Ω–∏—Ä–æ–≤–∫—É\n"
        "‚Ä¢ <b>üõ¢Ô∏èüõ¢Ô∏èüõ¢Ô∏è</b> ‚Äî –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∑–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞\n"
        "‚Ä¢ <b>üöóüöóüöó</b> ‚Äî –ü–æ–ª–∏—Ä–æ–≤–∫–∞ —Ñ–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫\n" 
        "‚Ä¢ <b>üéÅüéÅüéÅ</b> ‚Äî –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ 500‚ÇΩ\n"
        "‚Ä¢ <b>üçíüçíüçí</b> ‚Äî 2 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏\n\n"
        "<i>–ü—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ –¥–≤—É—Ö –∏–ª–∏ –±–æ–ª–µ–µ üçí –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +1 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–ø—ã—Ç–∫—É</i>"
    )
    
    await callback.message.edit_text(
        message_text,
        reply_markup=InlineKeyboardBuilder().row(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ).as_markup(),
        parse_mode=ParseMode.HTML
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, session: AsyncSession):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
    """
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    result = await session.execute(
        select(User).where(User.telegram_id == callback.from_user.id)
    )
    user = result.scalar_one_or_none()
    
    await callback.message.edit_text(
        "üé∞ <b>–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ ILPO-TON</b>\n\n"
        "<i>–ò—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞–π—Ç–µ —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã!</i>\n\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ø—ã—Ç–æ–∫:</b> {user.attempts if user else 1}\n\n"
        "<b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
        "‚Ä¢ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ = <b>–ø—Ä–∏–∑</b>\n"
        "‚Ä¢ 2 –∏–ª–∏ –±–æ–ª–µ–µ üçí = <b>–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞</b>\n"
        "‚Ä¢ –ë–∞–∑–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞: <b>2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å</b>\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞ <b>–ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π</b>",
        reply_markup=get_slot_machine_keyboard(),
        parse_mode=ParseMode.HTML
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π"
@router.callback_query(F.data == "invite_friends")
async def invite_friends(
    callback: CallbackQuery, 
    session: AsyncSession,
    bot: Bot
):
    """
    –°–æ–∑–¥–∞—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç
    –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    """
    await callback.answer()
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    result = await session.execute(
        select(User).where(User.telegram_id == user_id)
    )
    user = result.scalar_one_or_none()
    
    if not user:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_slot_machine_keyboard()
        )
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    ref_link = await generate_referral_link(user_id, bot)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    invite_message = (
        "<b>üé∞ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ ILPO-TON –ë–æ—Ç</b>\n\n"
        "<i>–ü—Ä–∏–≤–µ—Ç! –Ø –∏—Å–ø–æ–ª—å–∑—É—é –±–æ—Ç ILPO-TON —Å –∫—Ä—É—Ç–æ–π —Å–ª–æ—Ç-–º–∞—à–∏–Ω–æ–π –∏ –ø—Ä–∏—è—Ç–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏.</i>\n\n"
        "<b>–ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∏ +2 –±–æ–Ω—É—Å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–µ!</b>"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await callback.message.edit_text(
        "<b>üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –≤ ILPO-TON –ë–æ—Ç</b>\n\n"
        "<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.\n"
        "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–µ–≥–æ—Å—è –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ +2 –ø–æ–ø—ã—Ç–∫–∏ –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–µ!</i>",
        reply_markup=InlineKeyboardBuilder()
            .row(InlineKeyboardButton(
                text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏", 
                switch_inline_query=f"–ü—Ä–∏–≤–µ—Ç! –ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –±–æ—Ç ILPO-TON –∏ –ø–æ–ª—É—á–∞–π –ø—Ä–∏–∑—ã –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–µ: {ref_link}"
            ))
            .row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
            .as_markup(),
        parse_mode=ParseMode.HTML
    )

@router.callback_query(F.data.startswith("confirm_slot_prize_"))
async def confirm_slot_prize(callback: CallbackQuery, session: AsyncSession, bot: Bot, user: User):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–∏–∑ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if not user.is_admin or callback.from_user.id not in settings.admin_ids:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –Ω–µ–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: user_id={callback.from_user.id}, is_admin={user.is_admin}")
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤", show_alert=True)
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–∏–∑–∞ –∏–∑ callback_data
        prize_id = int(callback.data.split("_")[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∑–µ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å—Ç—Ä–æ–∫–∏
        # FOR UPDATE –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥—Ä—É–≥–∏–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
        prize_result = await session.execute(
            select(Prize)
            .where(Prize.id == prize_id)
            .with_for_update(skip_locked=True)  # skip_locked=True –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        )
        prize = prize_result.scalar_one_or_none()
        
        if not prize:
            await callback.answer("‚ùå –ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–∏–∑
        if prize.status != "PENDING":
            # –ï—Å–ª–∏ –ø—Ä–∏–∑ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª
            if prize.confirmed_by:
                confirming_admin_result = await session.execute(
                    select(User).where(User.id == prize.confirmed_by)
                )
                confirming_admin = confirming_admin_result.scalar_one_or_none()
                admin_name = confirming_admin.full_name if confirming_admin else "–î—Ä—É–≥–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
                
                await callback.answer(
                    f"‚ùå –ü—Ä–∏–∑ —É–∂–µ {prize.status.lower()} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name} "
                    f"({prize.confirmed_at.strftime('%d.%m.%Y %H:%M')})",
                    show_alert=True
                )
            else:
                await callback.answer(f"‚ùå –ü—Ä–∏–∑ —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å {prize.status}", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
        winner_result = await session.execute(
            select(User).where(User.id == prize.user_id)
        )
        winner = winner_result.scalar_one_or_none()
        
        if not winner:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–∏–≥—Ä–∞–≤—à–∏–π –ø—Ä–∏–∑, –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–∑–∞
        prize.status = "CONFIRMED"
        prize.confirmed_at = datetime.now()
        prize.confirmed_by = user.id  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–µ–≥–æ –ø—Ä–∏–∑
        
        try:
            await session.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–∑–∞: {e}")
            await session.rollback()
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_notification = (
            f"üéâ <b>–í–∞—à –ø—Ä–∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
            f"<b>–ü—Ä–∏–∑:</b> {prize.prize_name}\n"
            f"<b>–í—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è:</b> {prize.combination}\n\n"
            f"<b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞:</b>\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –ø–æ –∞–¥—Ä–µ—Å—É: <b>—É–ª.–ö–∞–ª–∏–Ω–∏–Ω–∞ 128–ê –∫2</b>\n"
            f"–ü—Ä–∏ —Å–µ–±–µ –∏–º–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π –ª–∏—á–Ω–æ—Å—Ç—å.\n\n"
            f"<i>–ü—Ä–∏–∑ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π.</i>"
        )
        
        try:
            await bot.send_message(
                chat_id=winner.telegram_id,
                text=user_notification,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏–∑ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_notification = (
            f"‚úÖ <b>–ü—Ä–∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
            f"üë§ –ò–≥—Ä–æ–∫: {winner.full_name}\n"
            f"üÜî ID: {winner.telegram_id}\n"
            f"üéÅ –ü—Ä–∏–∑: {prize.prize_name}\n"
            f"üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {prize.combination}\n"
            f"üìÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {prize.confirmed_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üë®‚Äçüíº –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª: {user.full_name}"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—é",
                    url=f"tg://user?id={winner.telegram_id}"
                )
            ]
        ])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ç–∏–º –ø—Ä–∏–∑–æ–º —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in settings.admin_ids:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                await bot.edit_message_text(
                    chat_id=admin_id,
                    message_id=callback.message.message_id,
                    text=admin_notification,
                    reply_markup=admin_keyboard,
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")
                continue
        
        await callback.answer("‚úÖ –ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞", show_alert=True)
        await session.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
