# src/keyboards/admin/admin.py

from typing import List
from datetime import datetime

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging

logger = logging.getLogger(__name__)


def get_admin_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    keyboard = [
        [
            KeyboardButton(text="üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º"),
            KeyboardButton(text="üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        ]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_admin_inline_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    keyboard = [
        [
            InlineKeyboardButton(text="üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏", callback_data="manage_appointments"),
            InlineKeyboardButton(text="üïê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", callback_data="manage_schedule")
        ],
        [
            InlineKeyboardButton(text="üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏", callback_data="manage_services"),
            InlineKeyboardButton(text="üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º", callback_data="manage_content")
        ],
        [   
            InlineKeyboardButton(text="üí∞ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–∞—Å—á–µ—Ç", callback_data="manage_price_requests"),
            InlineKeyboardButton(text="üé∞ –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞", callback_data="admin_slot_machine_menu")
        ],
        [
            InlineKeyboardButton(text="üîô –í—ã–π—Ç–∏ –∏–∑ –ê–¥–º–∏–Ω–∫–∏", callback_data="exit_admin_panel")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_services_management_keyboard(services: list) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏
    """
    keyboard = [
        [InlineKeyboardButton(text="üìã –í—Å–µ —É—Å–ª—É–≥–∏", callback_data="view_all_services")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="add_service")],
        [InlineKeyboardButton(text="üìÅ –ê—Ä—Ö–∏–≤ —É—Å–ª—É–≥", callback_data="view_archived_services")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_service_view_keyboard(service_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å–ª—É–≥–∏
    """
    keyboard = [
        [
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_service_{service_id}"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_service_{service_id}")
        ],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_services")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_time_slots_dates_keyboard(time_slots: list, page: int = 1) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —Å–ª–æ—Ç—ã
    –° –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –ø–æ 6 –¥–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (2 —Å—Ç–æ–ª–±—Ü–∞ –ø–æ 3 –∫–Ω–æ–ø–∫–∏)
    """
    keyboard = []
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã, –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    current_date = datetime.now().date()
    filtered_slots = [slot for slot in time_slots if slot.date.date() >= current_date]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –¥–∞—Ç–∞–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
    dates = {}
    for slot in filtered_slots:
        date_str = slot.date.strftime('%d.%m.%Y')
        slot_date = slot.date.date()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if date_str not in dates:
            dates[date_str] = {'count': 1, 'date': slot_date}
        else:
            dates[date_str]['count'] += 1
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    sorted_dates = sorted(dates.items(), key=lambda x: x[1]['date'])
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items_per_page = 6  # 2 —Å—Ç–æ–ª–±—Ü–∞ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
    total_pages = (len(sorted_dates) + items_per_page - 1) // items_per_page
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 1:
        page = 1
    elif page > total_pages:
        page = total_pages if total_pages > 0 else 1
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(sorted_dates))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    current_page_dates = sorted_dates[start_idx:end_idx]
    temp_row = []
    
    for date_str, date_info in current_page_dates:
        callback_data = f"view_date_{date_str}"
        button = InlineKeyboardButton(
            text=f"üìÖ {date_str}\n({date_info['count']} —Å–ª.)",
            callback_data=callback_data
        )
        temp_row.append(button)
        
        # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ 2 –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if len(temp_row) == 2 or date_str == current_page_dates[-1][0]:
            keyboard.append(temp_row)
            temp_row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    
    if total_pages > 1:
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è",
                callback_data=f"date_page_{page-1}"
            ))
            
        nav_buttons.append(InlineKeyboardButton(
            text=f"üìÑ {page}/{total_pages}",
            callback_data="ignore"
        ))
        
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=f"date_page_{page+1}"
            ))
            
        keyboard.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_time_slots_for_date_keyboard(time_slots: list, date_str: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
    """
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    for slot in time_slots:
        if slot.date.strftime('%d.%m.%Y') == date_str:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üïê {slot.date.strftime('%H:%M')}",
                    callback_data=f"view_slot_{slot.id}"
                ),
                InlineKeyboardButton(
                    text="‚ùå",
                    callback_data=f"delete_slot_{slot.id}"
                )
            ])
    
    keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º", callback_data="admin_back_to_dates")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_appointments_management_keyboard(appointments: list) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏
    """
    keyboard = []
    for appointment in appointments:
        keyboard.extend([
            [
                InlineKeyboardButton(
                    text=(
                        f"{appointment.user.full_name} - "
                        f"{appointment.service.name} - "
                        f"{appointment.appointment_time.strftime('%d.%m.%Y %H:%M')}"
                    ),
                    callback_data=f"appointment_{appointment.id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"confirm_appointment_{appointment.id}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data=f"cancel_appointment_{appointment.id}"
                )
            ]
        ])
    
    keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_news_management_keyboard(news_items: list) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏
    """
    keyboard = [
        [
            InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é",
                callback_data="content_add_news_"
            )
        ]
    ]
    
    if news_items:
        keyboard.append([
            InlineKeyboardButton(
                text="üì∞ –°–ø–∏—Å–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
                callback_data="news_divider"
            )
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å –¥–∞—Ç–∞–º–∏ (–Ω–µ –±–æ–ª–µ–µ 5)
        for item in news_items[:5]:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date_str = item.created_at.strftime("%d.%m.%Y")
            # –û–±—Ä–µ–∑–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            title = item.title if len(item.title) <= 30 else f"{item.title[:27]}..."
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–æ–≤–æ—Å—Ç–∏
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üìå {date_str} | {title}",
                    callback_data=f"content_news_{item.id}"
                )
            ])
    
    keyboard.append([
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
            callback_data="content_back_to_content"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_content_management_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    """
    keyboard = [
        [
            InlineKeyboardButton(text="üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏", callback_data="content_manage_news"),
            InlineKeyboardButton(text="üì® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏", callback_data="content_manage_broadcasts")
        ],
        [
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_broadcast_management_keyboard(broadcasts: list = None) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏
    """
    keyboard = [
        [
            InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast_add")
        ]
    ]
    
    if broadcasts:
        for broadcast in broadcasts[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
            status_emoji = {
                "DRAFT": "üìù",
                "SENDING": "üîÑ",
                "SENT": "‚úÖ",
                "CANCELLED": "‚ùå"
            }.get(broadcast.status, "‚ùì")
            
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{status_emoji} {broadcast.title[:30]}...",
                    callback_data=f"broadcast_view_{broadcast.id}"
                )
            ])
    
    keyboard.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="broadcast_back_to_content")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_broadcast_audience_keyboard() -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    keyboard = [
        [
            InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="broadcast_audience_all"),
            InlineKeyboardButton(text="üë§ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", callback_data="broadcast_audience_active")
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_skip_image_keyboard() -> ReplyKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    keyboard = [
        [KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]
    ]
    
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)


def get_confirmation_keyboard(action: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    """
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text="‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        callback_data=action
    )
    
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="cancel_action"
    )
    
    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
    builder.adjust(2)
    return builder.as_markup()


def get_service_edit_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏
    """
    keyboard = [
        [
            InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_name"),
            InlineKeyboardButton(text="üìã –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_description")
        ],
        [
            InlineKeyboardButton(text="üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="edit_field_price"),
            InlineKeyboardButton(text="‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="edit_field_duration")
        ],
        [
            InlineKeyboardButton(text="üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_field_image")
        ],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_services")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_back_to_edit_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="back_to_service_edit")]
    ]) 