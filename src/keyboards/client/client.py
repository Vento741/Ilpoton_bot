# src/keyboards/client/client.py

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from typing import List
from datetime import datetime

from database.models import TimeSlot, Service

def get_main_keyboard() -> ReplyKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = [
        [
            KeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"),
        ],
        [
            KeyboardButton(text="üí∞ –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã"),
            KeyboardButton(text="üì¢ –ù–æ–≤–æ—Å—Ç–∏")
        ],
        [
            KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"),
            KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
        ],
        [
            KeyboardButton(text="üé∞ –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞")
        ]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_contact_keyboard() -> ReplyKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    """
    keyboard = [[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)


def get_services_keyboard(services: List[Service]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Å–ª—É–≥
    """
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–∏
    for service in services:
        keyboard.append([
            InlineKeyboardButton(
                text=f"{service.name} - –æ—Ç {service.price}‚ÇΩ",
                callback_data=f"appointment_select_service_{service.id}"
            )
        ])
    
    # # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    # keyboard.append([
    #     InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    # ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_time_slots_keyboard(time_slots: List[TimeSlot], page: int = 1) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    –° –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –ø–æ 6 —Å–ª–æ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (2 —Å—Ç–æ–ª–±—Ü–∞ –ø–æ 3 –∫–Ω–æ–ø–∫–∏)
    """
    keyboard = []
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã, –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    current_date = datetime.now().date()
    filtered_slots = [slot for slot in time_slots if slot.date.date() >= current_date and slot.is_available]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –¥–∞—Ç–∞–º
    dates = {}
    for slot in filtered_slots:
        date_str = slot.date.strftime('%d.%m.%Y')
        slot_date = slot.date.date()
        if date_str not in dates:
            dates[date_str] = {'slots': [slot], 'date': slot_date}
        else:
            dates[date_str]['slots'].append(slot)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    sorted_dates = sorted(dates.items(), key=lambda x: x[1]['date'])
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items_per_page = 6  # 2 —Å—Ç–æ–ª–±—Ü–∞ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
    total_pages = (len(sorted_dates) + items_per_page - 1) // items_per_page
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 1:
        page = 1
    elif page > total_pages:
        page = total_pages if total_pages > 0 else 1
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(sorted_dates))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    current_page_dates = sorted_dates[start_idx:end_idx]
    temp_row = []
    
    for date_str, date_info in current_page_dates:
        slots = date_info['slots']
        earliest_slot = min(slots, key=lambda x: x.date.time())
        latest_slot = max(slots, key=lambda x: x.date.time())
        time_range = f"{earliest_slot.date.strftime('%H:%M')}-{latest_slot.date.strftime('%H:%M')}"
        
        button = InlineKeyboardButton(
            text=f"üìÖ {date_str}\n({time_range}, {len(slots)} —Å–ª.)",
            callback_data=f"select_date_{date_str}"
        )
        temp_row.append(button)
        
        # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ 2 –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if len(temp_row) == 2 or date_str == current_page_dates[-1][0]:
            keyboard.append(temp_row)
            temp_row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    
    if total_pages > 1:
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è",
                callback_data=f"client_date_page_{page-1}"
            ))
            
        nav_buttons.append(InlineKeyboardButton(
            text=f"üìÑ {page}/{total_pages}",
            callback_data="ignore"
        ))
        
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=f"client_date_page_{page+1}"
            ))
            
        keyboard.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_time_slots_for_date_keyboard(time_slots: List[TimeSlot], date_str: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
    """
    keyboard = []
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    date_slots = [
        slot for slot in time_slots 
        if slot.date.strftime('%d.%m.%Y') == date_str and slot.is_available
    ]
    date_slots.sort(key=lambda x: x.date.time())
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    for slot in date_slots:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üïê {slot.date.strftime('%H:%M')}",
                callback_data=f"select_time_{slot.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º", callback_data="client_back_to_dates")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_profile_keyboard(has_active_appointments: bool = False) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    """
    keyboard = [
        [InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π", callback_data="appointments_history")],
        [InlineKeyboardButton(text="üì± –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="change_contact")]
    ]
    if has_active_appointments:
        keyboard.insert(0, [
            InlineKeyboardButton(text="üïê –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏", callback_data="active_appointments")
        ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard) 