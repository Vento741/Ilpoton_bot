"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–æ–π
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∏–≥—Ä—ã—à–µ–π
"""

import random
import asyncio
from typing import Tuple, List, Dict
from aiogram.types import Message

# –°–∏–º–≤–æ–ª—ã –∏ –∏—Ö –≤–µ—Å–∞ –¥–ª—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã (—á–µ–º –≤—ã—à–µ –≤–µ—Å, —Ç–µ–º —á–∞—â–µ –≤—ã–ø–∞–¥–∞–µ—Ç)
SLOT_SYMBOLS = [
    ('üçí', 75),  # –í–∏—à–Ω—è - –æ—á–µ–Ω—å —á–∞—Å—Ç–∞—è, –¥–∞–µ—Ç –¥–æ–ø –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ 2+ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö
    ('üíé', 5),   # –ê–ª–º–∞–∑ - —É–≤–µ–ª–∏—á–µ–Ω —à–∞–Ω—Å –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–∞
    ('üéâ', 20),   # –ü—Ä–∞–∑–¥–Ω–∏–∫ - —É–≤–µ–ª–∏—á–µ–Ω —à–∞–Ω—Å —Å–∫–∏–¥–∫–∏
    ('üõ¢Ô∏è', 25),   # –ë–æ—á–∫–∞ - —á–∞—Å—Ç—ã–π –ø—Ä–∏–∑
    ('üöò', 30),   # –ú–∞—à–∏–Ω–∞ - —Å—Ä–µ–¥–Ω—è—è —Ä–µ–¥–∫–æ—Å—Ç—å
    ('üéÅ', 40)    # –ü–æ–¥–∞—Ä–æ–∫ - —á–∞—Å—Ç—ã–π –ø—Ä–∏–∑
]

# –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–∑–æ–≤
PRIZES = {
    ('üíé', 'üíé', 'üíé'): "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ —Ä–µ–º–æ–Ω—Ç 1500‚ÇΩ",
    ('üéâ', 'üéâ', 'üéâ'): "–°–∫–∏–¥–∫–∞ 10% –Ω–∞ —Ç–æ–Ω–∏—Ä–æ–≤–∫—É",
    ('üõ¢Ô∏è', 'üõ¢Ô∏è', 'üõ¢Ô∏è'): "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∑–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞",
    ('üöò', 'üöò', 'üöò'): "–ü–æ–ª–∏—Ä–æ–≤–∫–∞ —Ñ–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫",
    ('üéÅ', 'üéÅ', 'üéÅ'): "–ê–≤—Ç–æ–ø–æ—Ä—Ñ—é–º–µ—Ä–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –≤ –ø–æ–¥–∞—Ä–æ–∫",
    ('üçí', 'üçí', 'üçí'): "2 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏"
}

def generate_slot_combination() -> Tuple[str, str, str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
    —Å —É—á–µ—Ç–æ–º –∏—Ö –≤–µ—Å–æ–≤ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –≤—ã–ø–∞–¥–µ–Ω–∏—è)
    
    Returns:
        Tuple[str, str, str]: –ö–æ—Ä—Ç–µ–∂ –∏–∑ —Ç—Ä–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤-—ç–º–æ–¥–∑–∏
    """
    # –°–æ–∑–¥–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
    weighted_symbols = []
    for symbol, weight in SLOT_SYMBOLS:
        weighted_symbols.extend([symbol] * weight)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏–∑ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    return tuple(random.choice(weighted_symbols) for _ in range(3))

def check_win(combination: Tuple[str, str, str]) -> Tuple[str, int]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –Ω–∞ –≤—ã–∏–≥—Ä—ã—à
    
    Args:
        combination: –ö–æ—Ä—Ç–µ–∂ –∏–∑ —Ç—Ä–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        
    Returns:
        Tuple[str, int]: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–∏–∑–æ–≤
    if combination in PRIZES:
        prize_text = PRIZES[combination]
        # –ï—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        extra_attempts = 2 if combination == ('üçí', 'üçí', 'üçí') else 0
        return prize_text, extra_attempts
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (–≤—Å–µ —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö, –Ω–æ –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ)
    if len(set(combination)) == 1:
        return "–°–∫–∏–¥–∫–∞ 5% –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —É—Å–ª—É–≥—É", 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–≤–µ –≤–∏—à–Ω–∏
    cherry_count = combination.count('üçí')
    if cherry_count >= 2:
        return "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞", 1
    
    # –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏
    return "–ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!", 0

def format_slot_result(combination: Tuple[str, str, str]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    
    Args:
        combination: –ö–æ—Ä—Ç–µ–∂ –∏–∑ —Ç—Ä–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    """
    return " | ".join(combination)

async def animate_slot_machine(message: Message, final_combination: Tuple[str, str, str]) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        final_combination: –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤
    """
    # –°–∏–º–≤–æ–ª—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)
    symbols = [symbol for symbol, _ in SLOT_SYMBOLS]
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    spin_texts = [
        "üé∞ –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã",
        "üé∞ –ë–∞—Ä–∞–±–∞–Ω—ã –≤—Ä–∞—â–∞—é—Ç—Å—è",
        "üé∞ –ò—Å–ø—ã—Ç—ã–≤–∞–µ–º —É–¥–∞—á—É",
        "üé∞ –ò—â–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é",
        "üé∞ –ú–∞–≥–∏—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"
    ]
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    process_emojis = ["‚ö°Ô∏è", "‚ú®", "üí´", "üåü", "‚≠êÔ∏è"]
    
    # –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è (5 –∫–∞–¥—Ä–æ–≤)
    for i in range(5):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        random_combination = tuple(random.choice(symbols) for _ in range(3))
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —ç–º–æ–¥–∑–∏
        spin_text = random.choice(spin_texts)
        emoji = random.choice(process_emojis)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–æ—á–∫–∞–º–∏
        dots = "." * ((i % 3) + 1)
        animation_text = f"{spin_text}{dots}\n{emoji}\n\n{format_slot_result(random_combination)}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text(animation_text)
        await asyncio.sleep(0.5)
    
    # –≠—Ñ—Ñ–µ–∫—Ç –∑–∞–º–µ–¥–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π
    slow_frames = []
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–¥—Ä—ã –¥–ª—è –∑–∞–º–µ–¥–ª–µ–Ω–∏—è, –≥–¥–µ —Å–∏–º–≤–æ–ª—ã –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for i in range(3):
        combination = list(random.choice(symbols) for _ in range(3))
        # –§–∏–∫—Å–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
        for j in range(i):
            combination[j] = final_combination[j]
        slow_frames.append(tuple(combination))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–¥—Ä—ã –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
    for i, combination in enumerate(slow_frames):
        await message.edit_text(
            f"üé∞ –ë–∞—Ä–∞–±–∞–Ω—ã –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è{'.' * (i + 1)}\nüí´\n\n{format_slot_result(combination)}"
        )
        await asyncio.sleep(0.7)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
    await message.edit_text(
        "üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n‚ú®\n\n" + 
        format_slot_result(final_combination)
    )

def generate_animation_frame() -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–∞–¥—Ä –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    
    Returns:
        str: –°—Ç—Ä–æ–∫–∞ —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    """
    symbols = [symbol for symbol, _ in SLOT_SYMBOLS]
    combination = tuple(random.choice(symbols) for _ in range(3))
    return format_slot_result(combination) 