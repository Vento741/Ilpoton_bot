from datetime import datetime, timedelta
from typing import Tuple, List
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from loguru import logger

from database.models import TimeSlot, Appointment
from core.bot_instance import bot

async def get_time_slots_view(date: datetime, session: AsyncSession) -> Tuple[str, List[List[InlineKeyboardButton]]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –¥–∞—Ç—É
    Returns: (message_text, keyboard_buttons)
    """
    date_str = date.strftime('%d.%m.%Y')
    time_slots = await session.execute(
        select(TimeSlot)
        .where(
            TimeSlot.date >= date.replace(hour=0, minute=0),
            TimeSlot.date <= date.replace(hour=23, minute=59)
        )
        .order_by(TimeSlot.date)
    )
    time_slots = time_slots.scalars().all()
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–∏—Ö —Å–ª–æ—Ç–æ–≤, –∏—Å–∫–ª—é—á–∞—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ
    appointments = await session.execute(
        select(Appointment)
        .join(TimeSlot)
        .where(
            TimeSlot.date >= date.replace(hour=0, minute=0),
            TimeSlot.date <= date.replace(hour=23, minute=59),
            Appointment.status.in_(["PENDING", "CONFIRMED"])  # –ò—Å–∫–ª—é—á–∞–µ–º CANCELLED
        )
        .options(
            selectinload(Appointment.user),
            selectinload(Appointment.service)
        )
    )
    appointments = appointments.scalars().all()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç—ã—Ö —á–∞—Å–∞—Ö
    occupied_slots = {}
    
    for app in appointments:
        slot_time = app.time_slot.date
        time_str = slot_time.strftime('%H:%M')
        occupied_slots[time_str] = {
            'appointment': app,
            'is_main': True
        }
        
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞—Å
        if app.status == "CONFIRMED":
            # –°–ª–µ–¥—É—é—â–∏–π —á–∞—Å
            next_hour = (slot_time + timedelta(hours=1))
            if next_hour.date() == slot_time.date():
                next_hour_str = next_hour.strftime('%H:%M')
                occupied_slots[next_hour_str] = {
                    'appointment': app,
                    'is_main': False
                }
            
            # –ü—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞—Å
            prev_hour = (slot_time - timedelta(hours=1))
            if prev_hour.date() == slot_time.date():
                prev_hour_str = prev_hour.strftime('%H:%M')
                occupied_slots[prev_hour_str] = {
                    'appointment': app,
                    'is_main': False
                }
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
    keyboard.append([InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç –Ω–∞ —ç—Ç—É –¥–∞—Ç—É",
        callback_data=f"add_slot_to_date_{date_str}"
    )])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ {date_str}:\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Å–ª–æ—Ç–µ
    for slot in time_slots:
        time_str = slot.date.strftime('%H:%M')
        slot_info = occupied_slots.get(time_str)
        
        if slot_info:
            app = slot_info['appointment']
            is_main = slot_info['is_main']
            status_emoji = "üïê" if app.status == "PENDING" else "üöó"
            
            if is_main:
                # –û—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ—Ç —Å –∑–∞–ø–∏—Å—å—é
                text += (
                    f"\n{time_str} {status_emoji}\n"
                    f"üë§ {app.user.full_name}\n"
                    f"üíá‚Äç‚ôÇÔ∏è {app.service.name}\n"
                )
                if app.final_price:
                    text += f"üí∞ {app.final_price}‚ÇΩ\n"
                else:
                    text += f"üí∞ –æ—Ç {app.service.price}‚ÇΩ\n"
                text += "-------------------\n"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å
                next_hour = (app.time_slot.date + timedelta(hours=1)).strftime('%H:%M')
                if app.status == "CONFIRMED" and next_hour in occupied_slots:
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å –≤ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É
                    keyboard.append([
                        InlineKeyboardButton(
                            text=f"{time_str}-{next_hour} {status_emoji} ü´µ",
                            callback_data=f"view_appointment_{app.id}"
                        ),
                        InlineKeyboardButton(
                            text="üóë",
                            callback_data=f"cancel_appointment_{app.id}"
                        )
                    ])
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞ –∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
                    keyboard.append([
                        InlineKeyboardButton(
                            text=f"{time_str} {status_emoji}",
                            callback_data=f"view_appointment_{app.id}"
                        ),
                        InlineKeyboardButton(
                            text="üóë",
                            callback_data=f"cancel_appointment_{app.id}"
                        )
                    ])
            elif not is_main:
                # –î–ª—è –Ω–µ–æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å) –Ω–µ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
                continue
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —ç—Ç–æ—Ç —Å–ª–æ—Ç –≤ –∑–∞–Ω—è—Ç—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
            is_occupied = False
            slot_datetime = slot.date
            
            for app in appointments:
                if app.status == "CONFIRMED":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Å–ª–æ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω —á–∞—Å –¥–æ –∏ —á–∞—Å –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏
                    appointment_time = app.time_slot.date
                    if (appointment_time - timedelta(hours=1) <= slot_datetime <= appointment_time + timedelta(hours=1)):
                        is_occupied = True
                        break
            
            if not is_occupied:
                # –ï—Å–ª–∏ —Å–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"{time_str} ‚úÖ",
                        callback_data=f"select_time_slot_{slot.id}"
                    ),
                    InlineKeyboardButton(
                        text="üóë",
                        callback_data=f"delete_slot_{slot.id}"
                    )
                ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(
        text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º",
        callback_data="manage_schedule"
    )])
    
    return text, keyboard

async def cancel_appointment(
    appointment: Appointment,
    reason: str,
    session: AsyncSession,
    notify_client: bool = True
) -> None:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º time_slot_id –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        time_slot = appointment.time_slot
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
        appointment.status = "CANCELLED"
        appointment.cancellation_reason = reason
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ—Ç
        if time_slot:
            time_slot.is_available = True
            
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å
            if appointment.confirmed_at:
                next_hour = time_slot.date + timedelta(hours=1)
                next_slot_result = await session.execute(
                    select(TimeSlot).where(TimeSlot.date == next_hour)
                )
                next_slot = next_slot_result.scalar_one_or_none()
                if next_slot:
                    next_slot.is_available = True
        
        await session.commit()
        
        if notify_client and appointment.user and appointment.user.telegram_id:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –±–æ—Ç–∞
                await bot.send_message(
                    appointment.user.telegram_id,
                    f"‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n\n"
                    f"üìÖ –î–∞—Ç–∞: {time_slot.date.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üíá‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞: {appointment.service.name}\n"
                    f"‚ùì –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏."
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {appointment.user.telegram_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: {e}", exc_info=True)
        await session.rollback()
        raise

async def check_and_clear_states(state: FSMContext) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    """
    current_state = await state.get_state()
    if current_state:
        logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state}, –æ—á–∏—â–∞–µ–º")
        await state.clear()

async def send_completion_message(appointment: Appointment) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="1‚≠ê", callback_data=f"rate_service_{appointment.id}_1"),
                InlineKeyboardButton(text="2‚≠ê", callback_data=f"rate_service_{appointment.id}_2"),
                InlineKeyboardButton(text="3‚≠ê", callback_data=f"rate_service_{appointment.id}_3"),
                InlineKeyboardButton(text="4‚≠ê", callback_data=f"rate_service_{appointment.id}_4"),
                InlineKeyboardButton(text="5‚≠ê", callback_data=f"rate_service_{appointment.id}_5")
            ]
        ])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            f"‚ú® –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏!\n\n"
            f"üìÖ –î–∞—Ç–∞: {appointment.time_slot.date.strftime('%d.%m.%Y %H:%M')}\n"
            f"üíá‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞: {appointment.service.name}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {appointment.final_price or appointment.service.price}‚ÇΩ\n\n"
            f"üåü –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç—ã:"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await bot.send_message(
            chat_id=appointment.user.telegram_id,
            text=message_text,
            reply_markup=keyboard
        )
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É (ID: {appointment.user.telegram_id})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def update_completed_appointments(session: AsyncSession) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∑–∞–ø–∏—Å–µ–π –Ω–∞ COMPLETED –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.now()
        # logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")
        
        result = await session.execute(
            select(Appointment)
            .join(TimeSlot)
            .where(
                Appointment.status == "CONFIRMED",
                TimeSlot.date < current_time  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –ø—Ä–æ—à–ª–æ
            )
            .options(
                selectinload(Appointment.time_slot),
                selectinload(Appointment.service),
                selectinload(Appointment.user)
            )
        )
        appointments = result.scalars().all()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
        updated_count = 0
        for appointment in appointments:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ —Å —É—á–µ—Ç–æ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏
            appointment_time = appointment.time_slot.date
            appointment_end_time = appointment_time + timedelta(minutes=appointment.service.duration)
            
            # logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ #{appointment.id}:")
            # logger.debug(f"–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {appointment_time}")
            # logger.debug(f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {appointment_end_time}")
            # logger.debug(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
            if current_time > appointment_end_time:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                appointment.status = "COMPLETED"
                updated_count += 1
                # logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ #{appointment.id} –Ω–∞ COMPLETED (–≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {appointment_time}, –æ–∫–æ–Ω—á–∞–Ω–∏–µ: {appointment_end_time})")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await send_completion_message(appointment)

        if updated_count > 0:
            await session.commit()
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç–∞—Ç—É—Å COMPLETED")
        else:
            logger.debug("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–ø–∏—Å–µ–π: {e}")
        await session.rollback() 