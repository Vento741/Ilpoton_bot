from typing import Any, Awaitable, Callable, Dict

from aiogram import types
from aiogram.dispatcher.flags import get_flag
from aiogram.utils.chat_action import ChatActionSender
from cachetools import TTLCache

from core.middlewares.base import BaseCustomMiddleware


class ThrottlingMiddleware(BaseCustomMiddleware):
    """Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    def __init__(self, rate_limit: int = 1):
        """
        :param rate_limit: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        """
        self.cache = TTLCache(maxsize=10000, ttl=rate_limit)
        self.rate_limit = rate_limit

    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.TelegramObject,
        data: Dict[str, Any],
    ) -> Any:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
        :param event: –°–æ–±—ã—Ç–∏–µ
        :param data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        throttling_key = self._get_throttling_key(event)
        if throttling_key is None:
            return await handler(event, data)

        if throttling_key in self.cache:
            if isinstance(event, types.Message):
                await event.answer(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º üôè"
                )
            return None

        self.cache[throttling_key] = None
        return await handler(event, data)

    @staticmethod
    def _get_throttling_key(event: types.TelegramObject) -> str | None:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á –¥–ª—è —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–∞
        :param event: –°–æ–±—ã—Ç–∏–µ
        :return: –ö–ª—é—á –∏–ª–∏ None, –µ—Å–ª–∏ —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥ –Ω–µ –Ω—É–∂–µ–Ω
        """
        if isinstance(event, types.Message):
            return f"message_{event.from_user.id}"
        elif isinstance(event, types.CallbackQuery):
            return f"callback_{event.from_user.id}"
        return None 