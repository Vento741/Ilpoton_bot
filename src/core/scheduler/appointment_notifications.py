from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import select, and_
from sqlalchemy.orm import selectinload
from loguru import logger

from database.models import Appointment, User, TimeSlot
from core.bot_instance import bot
from config.settings import settings
from database.base import async_session

async def notify_admin_about_appointment() -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö
    """
    try:
        # logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        now = datetime.now()
        hour_later = now + timedelta(hours=1)
        
        # logger.info(f"–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π: —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è {now.strftime('%d.%m.%Y %H:%M')}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏, –æ –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏
            result = await session.execute(
                select(Appointment)
                .join(Appointment.time_slot)
                .where(
                    Appointment.status == "CONFIRMED",
                    Appointment.notified == False,
                    Appointment.time_slot.has(
                        and_(
                            TimeSlot.date > now,  # –ë—É–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏
                            TimeSlot.date <= hour_later  # –î–æ –∫–æ—Ç–æ—Ä—ã—Ö –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ –±–æ–ª—å—à–µ —á–∞—Å–∞
                        )
                    )
                )
                .options(
                    selectinload(Appointment.user),
                    selectinload(Appointment.service),
                    selectinload(Appointment.time_slot)
                )
            )
            appointments = result.scalars().all()

            # logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {len(appointments)}")
            if appointments:
                for app in appointments:
                    time_until = app.time_slot.date - now
                    minutes_until = int(time_until.total_seconds() / 60)
                    # logger.info(f"–ó–∞–ø–∏—Å—å #{app.id} –Ω–∞ {app.time_slot.date.strftime('%d.%m.%Y %H:%M')} "
                    #           f"(–æ—Å—Ç–∞–ª–æ—Å—å {minutes_until} –º–∏–Ω—É—Ç)")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
            for appointment in appointments:
                notifications_sent = True  # –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                
                # –¢–µ–∫—Å—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                client_text = (
                    "‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏!\n\n"
                    f"‚è∞ –ß–µ—Ä–µ–∑ —á–∞—Å, –≤ {appointment.time_slot.date.strftime('%H:%M')}\n"
                    f"üíá‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞: {appointment.service.name}\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {appointment.final_price}‚ÇΩ\n\n"
                    "üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ 5-10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏\n"
                    "üìç –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–Ω—å—à–µ"
                )
                
                # –¢–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞
                admin_text = (
                    "‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –∑–∞–ø–∏—Å–∏!\n\n"
                    f"‚è∞ –ß–µ—Ä–µ–∑ —á–∞—Å, –≤ {appointment.time_slot.date.strftime('%H:%M')}\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {appointment.user.full_name}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {appointment.user.phone_number or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üöò –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {appointment.car_brand} {appointment.car_model} ({appointment.car_year})\n"
                    f"üíá‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞: {appointment.service.name}\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {appointment.final_price}‚ÇΩ\n"
                )
                
                if appointment.client_comment:
                    # –ó–∞–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∂–∏—Ä–Ω—ã–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
                    formatted_comment = appointment.client_comment.replace(
                        "–ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞:", "<b>–ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞:</b>"
                    ).replace(
                        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å:", "<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å:</b>"
                    ).replace(
                        "–û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", "<b>–û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b>"
                    )
                    admin_text += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞: {formatted_comment}"
                if appointment.admin_response:
                    admin_text += f"\n‚Ü™Ô∏è –û—Ç–≤–µ—Ç: {appointment.admin_response}"
                if appointment.admin_comment:
                    admin_text += f"\nüë®‚Äçüíº –î–ª—è –∞–¥–º–∏–Ω–æ–≤: {appointment.admin_comment}"
                
                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                client_keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
                        callback_data=f"client_cancel_appointment_{appointment.id}"
                    )
                ]])
                
                admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="üìã –î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏",
                        callback_data=f"appointment_details_{appointment.id}"
                    )
                ]])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                try:
                    await bot.send_message(
                        appointment.user.telegram_id,
                        client_text,
                        reply_markup=client_keyboard,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {appointment.user.telegram_id}: {e}")
                    notifications_sent = False
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
                admin_notifications_sent = True
                for admin_id in settings.admin_ids:
                    try:
                        await bot.send_message(
                            admin_id,
                            admin_text,
                            reply_markup=admin_keyboard,
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                        admin_notifications_sent = False
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
                if notifications_sent and admin_notifications_sent:
                    appointment.notified = True
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏ #{appointment.id}")
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", exc_info=True) 